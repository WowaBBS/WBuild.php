<?
  $Loader->Parent_Class('/Object');
//$Loader->Using_Class('/Builder/Task/Base');

  /// States of task:
  ///   * Wait Depends
  ///   * Ready for starting
  ///   * Processing
  ///   * Finished
  ///   * Failed
  
  // TODO: Remove
  class C_Builder_Task_Manager extends C_Object
  {
    Var $List      =[]; // $Id=>$Task
    Var $Wait      =[]; // $Id=>$Task
    Var $Ready     =[]; // $Id=>$Task
    Var $InProcess =[]; // $Id=>$Task
    Var $Finished  =[]; // $Id=>$Task
    Var $Failed    =[]; // $Id=>$Task
    Var $bPrepared =false;
    
    Function Deprecated_Add(C_Builder_Task_Base $Task)
    {
      $this->_Add($Task);
      $this->_Prepare($Task);
    }
    
    Function Create($Type='Base', $Vars=[])
    {
      if($this->bPrepared) $this->Log('Fatal', 'Task manager should be prepared for creating task');
      $Class='/Builder/Task/'.$Type;
      $Res=$this->Create_Object($Class, $Vars);
      $this->_Add($Res);
      Return $Res;
    }
    
    Function _Add($Task)
    {
      $Id=$Task->Object_Id;
      if(IsSet($this->List[$Id]))
        UnReachable();
      $Task->Manager=$this;
      $this->List[$Id]=$Task;
    }
    
    Function _Prepare(C_Builder_Task_Base $Task)
    {
      $Task->_Prepare();
      $Id=$Task->Object_Id;
      if(Count($Task->Depends)>0)
        $this->Wait[$Id]=$Task;
      else
        $this->Ready[$Id]=$Task;
    }
    
    Function Prepare()
    {
      if($this->bPrepared) UnReachable();
      $this->bPrepared=true;
      ForEach($this->List As $Task)
        $this->_Prepare($Task);
    }
    
    Function GetNext()
    {
      if(!$this->bPrepared)
        $this->Prepare();
      $Res=Array_Pop($this->Ready);
      if(!$Res)
        return null;
      $this->InProcess[$Res->Object_Id]=$Res;
      return $Res;
    }
    
    Function Failed(C_Builder_Task_Base $Task)
    {
      if(!$Task->bFailed) $this->Log('Fatal', 'Failed in not failed =)');

      $Id=$Task->Object_Id;

      UnSet($this->Wait      [$Id]);
      UnSet($this->Ready     [$Id]);
      UnSet($this->InProcess [$Id]);
      UnSet($this->Finished  [$Id]);
      $this->Failed    [$Id]=$Task;
    }
    
    Function Finished(C_Builder_Task_Base $Task)
    {
      if(!$Task->bFinished) $this->Log('Fatal', 'Finished is not finished =)');

      $Id=$Task->Object_Id;

      UnSet($this->Wait      [$Id]);
      UnSet($this->Ready     [$Id]);
      UnSet($this->InProcess [$Id]);
      $this->Finished  [$Id]=$Task;
      UnSet($this->Failed    [$Id]);
    }
    
    Function Ready(C_Builder_Task_Base $Task)
    {
      if($Task->bFailed) $this->Log('Fatal', 'Failed task can`t be ready');
      if($Task->bFinished) $this->Log('Fatal', 'Finishd task can`t be ready');

      $Id=$Task->Object_Id;

      UnSet($this->Wait      [$Id]);
      $this->Ready     [$Id]=$Task;
      UnSet($this->InProcess [$Id]);
      UnSet($this->Finished  [$Id]);
      UnSet($this->Failed    [$Id]);
    }
  };
?>