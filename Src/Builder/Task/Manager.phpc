<?
  $Loader->Parent_Class('/Object');
//$Loader->Using_Class('/Builder/Task/Base');

  class C_Builder_Task_Manager extends C_Object
  {
    Var $List                =[]; // $Id=>$Task // TODO: Remove
    Var $Threads_Maximum     =4;
    Var $Threads_Started     =0;
    Var $Wait_Sleep          =50*1000*1000;
    Var $Tasks_Ready_Changed =false;
    Var $TasksByState=[
      'Init'      =>[],
      'Wait'      =>[],
      'Locking'   =>[],
      'Check'     =>[],
      'Ready'     =>[],
      'Started'   =>[],
      'InProcess' =>[],
      'Skipped'   =>[],
      'Finished'  =>[],
      'Failed'    =>[],
      'Rejected'  =>[],
    ];
    Var $NumTasksDone=0;
    Var $NumTasksAdded=0;
    
    function _Init(Array $Args)
    {
      parent::_Init($Args);
      $this->Threads_Maximum=$Args['Threads_Maximum']?? Static::getNumberOfLogicalCPUCores();
    }
    
    Function OnTaskDone($Task)
    {
      $this->NumTasksDone++;
      $End=$Task->Task_State==='Finished'? '':' is '.$Task->Task_State;
      $this->Log('Log',
        '  [', $this->NumTasksDone, '/', $this->NumTasksAdded, '] ',
        $Task->Task_Name, $End
      );
    }
    
    Function _TaskStateChanged($Task, $OldState, $State)
    {
      $Id=$Task->Object_GetId();
      if(!$this->TasksByState[$OldState][$Id])
        $this->Log('Fatal', 'Task ', $Task->Task_Name, ' hadn\'t ols state ', $OldState);
      else
        UnSet($this->TasksByState[$OldState][$Id]);
      if(IsSet($this->TasksByState[$State]))
        $this->TasksByState[$State][$Id]=$Task;
      else
        $this->Log('Fatal', 'Task ', $Task->Task_Name, ' has unknown state ', $State);
      if($State==='Ready')
        $this->Tasks_Ready_Changed=true;
    }
    
    Function Create($Type='Base', $Vars=[])
    {
      $Class='/Builder/Task/'.$Type;
      $Res=$this->Create_Object($Class, $Vars);
      $this->_Add($Res);
      Return $Res;
    }
    
    Public Function _Add($Task) // TODO: Private
    {
      $this->NumTasksAdded++;
      $Id=$Task->Object_GetId();
      if(IsSet($this->List[$Id]))
      {
        $this->Log('Error', 'Task ', $Task->Task_Name, ' was already added to task manager');
      }
      else
      {
        if($Task->Tasks_Manager)
          $this->Log('Fatal', 'Task ', $Task->Task_Name, ' was already added to another task manager');
        $Task->Tasks_Manager=$this;
        $this->List[$Id]=$Task;
        $State=$Task->Task_State;
        if($State!=='Init')
          $this->Log('Fatal', 'Task ', $Task->Task_Name, ' hasn\'t state Init and have another state ', $State);
        else
          $this->TasksByState[$State][$Id]=$Task;
      }
    }
    
    Function Async_Update($DeltaTime)
    {
      ForEach($this->TasksByState['InProcess']As $Item)
        $Item->Async_Update($DeltaTime);
      $Res=0;
      ForEach($this->TasksByState['InProcess']As $Item)
        if($Item->NumThreads>0)
          $Res+=$Item->NumThreads;
      $this->Threads_Started=$Res;
      return $Res;
    }
    
    Private Function ExecuteReadyTasks($DeltaTime):bool
    {
      While($Tasks=$this->TasksByState['Init'])
        ForEach($Tasks As $Task)
          $Task->Task_Init();
          
      $Tasks=$this->TasksByState['Locking'];
      ForEach($Tasks As $Task)
         $Task->Task_Locking($DeltaTime);

      While($Tasks=$this->TasksByState['Check'])
        ForEach($Tasks As $Task)
          $Task->Task_Check();
      
      if($this->Tasks_Ready_Changed)
      {
        KSort($this->TasksByState['Ready']); // Some slowly, but user friendly
        $this->Tasks_Ready_Changed=false;
      }
      $Threads_Maximum=&$this->Threads_Maximum;
      $Threads_Started=&$this->Threads_Started;
      $Res=false;
      ForEach($this->TasksByState['Ready'] As $Id=>$Task)
        if($Threads_Started<=0 || $Task->NumThreads+$Threads_Started<=$Threads_Maximum)
        {
          $Task->Execute();
        //$this->Log('Log', $Task->Task_Name, ' is ', $Task->Task_State);
          $Res=true;
          if($Task->NumThreads>0)
            $Threads_Started+=$Task->NumThreads;
          if($this->Tasks_Ready_Changed)
            break;
        }
      return $Res; // Count($this->TasksByState['Started'])>0
    }
    
    Function IsActive()
    {
      return
        Count($this->TasksByState['Init'      ])>0 ||
        Count($this->TasksByState['Locking'   ])>0 ||
        Count($this->TasksByState['Check'     ])>0 ||
        Count($this->TasksByState['Ready'     ])>0 ||
        Count($this->TasksByState['InProcess' ])>0  ;
    }
    
    Function Execute()
    {
      $Time2=$Time=MicroTime(true);
      while($this->IsActive())
      {
        $DeltaTime=$Time2-$Time;
        if(!$this->ExecuteReadyTasks($DeltaTime))
          Time_NanoSleep(0, $this->Wait_Sleep);
       #echo '[',
       #  Count($this->TasksByState['Init'      ]),',',
       #  Count($this->TasksByState['Locking'   ]),',',
       #  Count($this->TasksByState['Check'     ]),',',
       #  Count($this->TasksByState['Ready'     ]),',',
       #  Count($this->TasksByState['InProcess' ]),',',$this->Threads_Started,']'  ;
        $this->Async_Update($DeltaTime);
        $Time=$Time2;
        $Time2=MicroTime(true);
      }
      
      if($this->TasksByState['Wait'])
      {
        $Log=$this->Log('Error', 'Some tasks in wait status yet:');
        ForEach($this->TasksByState['Wait']As $Task)
        {
          $Log('  ', $Task->Task_Name, ' wait for:');
          ForEach($Task->Tasks_WaitFor As $k=>$Task_WaitFor)
            $Log('    ', $k, ': ', $Task_WaitFor->Task_Name, ' ', $Task_WaitFor->Task_State);
        # $Deb=[$Task->Exec_List];
        # ForEach($Task->Tasks_WaitFor As $k=>$Task_WaitFor)
        #   $Deb[]=$Task_WaitFor->Exec_Descr;
        # $this->Debug($Deb);
        }
        $Log->Done();
      }
      if($this->TasksByState['Init'])
      {
        $Log=$this->Log('Error', 'Some tasks in init status yet:');
        ForEach($this->TasksByState['Init']As $Task)
          $Log('  ', $Task->Task_Name);
        $Log->Done();
      }
      $Log=$this->Log('Log', 'All tasks done:');
      ForEach($this->TasksByState As $Type=>$List)
        if(Count($List)>0)
          $Log('  ', Str_Pad($Type, 9), ' : ', Count($List));
      $Log('  ', Str_Pad('Total', 9), ' : ', $this->NumTasksAdded);
      $Log->Done();
    }

    public static function getNumberOfLogicalCPUCores()
    {
      static $Res=0;
      if($Res>0)
        return $Res;
      if($Res=$_SERVER['NUMBER_OF_PROCESSORS']?? 0)
        return $Res;
      if(Is_File('/proc/cpuinfo'))
      {
        $Lines=File_Get_Contents('/proc/cpuinfo');
        $Lines=Explode("\n", $Lines);
        $Res=0;
        ForEach($Lines As $Line)
          if(StrPos('processor', $Line)>=0)
            $Res++;
      }
      else
      {
        $Lines=`wmic computersystem get NumberOfLogicalProcessors`;
        if($Lines!==null)
        {
          $Lines=Explode("\n", StrTr(Trim($Lines), ["\r"=>'']));
          if(Count($Lines)==2)
            $Res=(int)$Lines[1];
        }
      }
      If($Res<=0)
        $Res=1;
      return $Res;
    }
  };
?>