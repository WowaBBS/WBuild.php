<?  $Loader->Parent_Class('/Builder/Task/Base');    class C_Builder_Task_Exec extends C_Builder_Task_Base  {    Var $Descr=[];    Var $List=[];    static $LabelIdx=0;        function _Init(Array $Args)    {      parent::_Init($Args);      if(IsSet($Args['Asset']))        $this->Asset=$Args['Asset'];    }        Function AllocLabelIdx() { return Self::$LabelIdx++; }        Function Descr() // VarArgs    {      $this->Descr=Implode(func_get_args());      $this->Exec('');      $this->Exec('');      ForEach(Explode("\n", $this->Descr) As $Line)        $this->Exec('Rem '.$Line);      $this->Exec('');    }        Function ToString()    {      return Implode("\r\n", $this->List);    }        Function Exec($Cmd, $Args=null)    {      if($Args!==null)      {        $Args->Prepare($this);        if(IsSet($this->Asset))        {          $Options=$this->Asset->GetAssetsR('Exec/Option:'.$Cmd);          ForEach($Options As $Option)          {            $Option->AddArgsTo($Args);            if($Option->IsOverride())              break;          }        }        $_Args=$Args->ToString();      }      else        $_Args='';      if(StrLen(Trim($_Args))>0)        $_Args=' '.$_Args;      $this->List[]=$Cmd.$_Args;    //TODO: $Args->CheckObjects    //TODO: $Args->CheckResult      if($Args!==null)      {        $this->Exec('if errorlevel 1 echo Error && exit 1');        $this->Exec('');      }    }    Var $CheckObjects =[];    Var $CheckResult  =[];    Var $MkDir=[];        Function MkDir($v)    {      if(Is_Object($v))      {        $v->MkDir();        $v=$v->GetDirFullPath();      }      $v=StrTr($v, '\\', '/');      if(IsSet($this->MkDir[$v]))        return;      $this->Exec('MkDir "'.$v.'" 2>nul');      CreatePath($v);      $this->MkDir[$v]=true;    }        Function Copy($From, $To)    {     #if(IsSet($From->FileDepends))     #{     #  ForEach($From->FileDepends As $Item)     #    Echo 'Path: ', $Item->Path, "\n";     #}     #if(IsSet($From->FileDepends))     #  ForEach($From->FileDepends As $Item)     #    $this->Copy($Item, $To);            $F= StrTr($From ->GetPath(), '/', '\\');      $T= StrTr($To   ->GetPath(), '/', '\\');      $this->Exec('if not exist '.$T.' copy '.$F.' '.$T);      $this->Exec('xcopy '.$F.' '.$T.' /YDI');    }        Function CheckObject($v)    {      if(IsSet($v->Tasks))        ForEach($v->Tasks As $Task)          $this->Depends($Task);      $this->CheckObjects[]=$v;    }        Function CheckObjects(Array $l)    {      ForEach($l As $i)        $this->CheckObject($i);    }    Function _CheckFile($v)    {          $this->Exec('if not exist '.$v->GetPath().' echo Can`t find file '.$v->Path.' && exit 1');    }        Function CheckFile($v)    {     #if($v->IsNoSearch())     #  return;      $this->CheckObject($v);      if(false)        Echo $v->GetMD5(), ' ', $v->Path, "\n";      $this->_CheckFile($v);    }        Function CheckResultFile($v)    {     #$v->ShouldBeExists();      $v->InvalidateCache();      $this->_CheckFile($v);      $this->CheckResult[]=$v->GetFileName();    }        Function CheckFiles($l)    {      ForEach($l As $i)        $this->CheckFile($i);    }    Function _GetTaskHash(Array &$Res)    {      Parent::_GetTaskHash($Res);      $Res[]=$this->List;    }        Function Finish()    {    }  };  $DebM=$Loader->Get_Singleton('/Debug/Manager');  $DebM->AddNoInlineClass('C_Builder_Task_Exec');?>