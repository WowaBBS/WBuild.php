<?
  $Loader->Parent_Class('/Builder/Task/Base');
  $Loader->Load_Lib('/FS/Utils');
  
  class C_Builder_Task_Exec extends C_Builder_Task_Base
  {
    Var $Exec_Descr   =[];
    Var $Exec_List    =[];
    Var $Exec_CmdList =[];
    Var $Exec_Idx     =0 ;
    Var $Exec_Log_Out =true ;
    Var $Exec_Log_Err =true ;
    Var $ContentHash  =[];
  //static $LabelIdx  =0;
    Var $LabelIdx     =0;
    Var $Exec         =null;
    Var $NumThreads   =1;
    Var $Env          =[];
    
    Protected function _Init(Array $Args)
    {
      parent::_Init($Args);
      $this->Exec_List[]='@echo off';
    }
    
  //Function AllocLabelIdx() { return Self::$LabelIdx++; }
    Function AllocLabelIdx() { return $this->LabelIdx++; }
    
    Function Descr(...$Args)
    {
      $this->Exec_Descr=Implode($Args);
      $this->ExecCmd('');
      $this->ExecCmd('');
      ForEach(Explode("\n", $this->Exec_Descr) As $Line)
        $this->ExecCmd('Echo [Log] '.$Line);
      $this->ExecCmd('');
    }
    
    Function ExecCmd($Cmd, $Args=null) { $this->Exec($Cmd, $Args); } // TODO:
    Function Exec($Cmd, $Args=null)
    {
      if($Args!==null)
      {
        $Args->Prepare($this, $Cmd);
        $_Args=$Args->ToString();
        $this->ContentHash[]=$Args->ContentHash;
      }
      else
        $_Args='';
      if(StrLen(Trim($_Args))>0)
        $_Args=' '.$_Args;
      $Res=$Cmd.$_Args;
      $this->Exec_List[]=$Res;
    //TODO: $Args->CheckInput
    //TODO: $Args->CheckResult
      if($Args!==null)
      {
        $this->Exec('if errorlevel 1 echo Error && exit /b');
        $this->Exec('');
      }
      return $Res;
    }

    Function _MkDir(String $v)
    {
      $this->ExecCmd('MkDir "'.$v.'" 2>nul');
    }
    
    Function _AddCheckFile(String $v, ?String $i=null)
    {    
      $this->ExecCmd('if not exist "'.$v.'" echo [Error] Can`t find file "'.($i??$v).'" && exit /b');
    }
    
    Function Copy($From, $To)
    {
      $F= StrTr($From ->GetFullPath(), '/', '\\');
      $T= StrTr($To   ->GetFullPath(), '/', '\\');
      $this->Exec('if not exist "'.$T.'" copy "'.$F.'" "'.$T.'"');
      $this->Exec('xcopy "'.$F.'" "'.$T.'" /YDI');
    }
    
    Function MkDir($v) // TODO: Remove
    {
      if($v=parent::MkDir($v))
        $this->_MkDir($v);
    }
    
    Function AddCheckFile($v, Array $Args=[])
    {
      if(Parent::AddCheckFile($v, $Args))
        $this->_AddCheckFile($v->GetFullPath(), $v->GetLocalPath());
    }
    
    Function _AddCheckResultFile($v, $Args)
    {
      Parent::_AddCheckResultFile($v, $Args);
      $this->_AddCheckFile($v->GetFullPath(), $v->GetLocalPath());
    }
    
    Function _GetTaskHash(Array &$Res)
    {
      Parent::_GetTaskHash($Res);
      $Res['Task.Exec'   ]=$this->Exec_List   ;
      $Res['ContentHash' ]=$this->ContentHash ;
    }
    
    Function SaveCallTo($File=false)
    {
      If($File===false)
        $File=$this->CachePath;
      $File.='.bat';
      CreatePath(DirName($File));
      $Content=$this->ToString();
      $this->ContentHash[]=md5($Content);
      File_Put_Contents($File, $Content);
      $this->Exec_List=[];
    //$this->Log('Log', 'call "',$File,'"');
      $this->Exec('call "'.$File.'"');
      return $File;
    }
    
    Function AddOutFile($File=false)
    {
      If($File===false)
        $File=$this->CachePath;
      $File.='.out';
      CreatePath(DirName($File));
      $this->Exec_Log_Out=$File;
      File_Put_Contents($File, '');
      return $File;
    }
    
    Function AddErrFile($File=false)
    {
      If($File===false)
        $File=$this->CachePath;
      $File.='.err';
      CreatePath(DirName($File));
      $this->Exec_Log_Err=$File;
      File_Put_Contents($File, '');
      return $File;
    }
    
    Function ToString($Separator="\r\n")
    {
      return Implode($Separator, $this->Exec_List);
    }
    
    Function _Task_Clear()
    {
      $this->Exec_List=[];
      Parent::_Task_Clear();
    }
    
    Function Exec_Finish()
    {
    }
    
    Protected Function DoExecute()
    {
    //$this->Log('Log', 'Async_Exec ', $this->Task_Name);
      if($this->Exec_Log_Out===true) $this->AddOutFile();
      if($this->Exec_Log_Err===true) $this->AddErrFile();
      
      $this->Exec=$this->Create_Object('/System/Exec');
      $this->Exec->Env=$_SERVER+$this->Env;
      
      if($this->Async_Next(true))
        while($this->Async_Next()) {};
      if(!$this->Exec)
        $this->Task_SetState_Failed();
      else
        $this->Task_SetState_InProcess();
    }

    Function Async_Update($DeltaTime):bool
    {
      if(!Parent::Async_Update($DeltaTime))
        return false;
      while($this->Async_Next()) {};
      return true;
    }
    
    Function Async_Next(bool $First=false)
    {
    # echo 'IsExec=', (bool)$this->Exec, "\n";
    # echo 'Alive=', $this->Exec->Is_Alive(), "\n";
    # $this->Debug($this->Exec->GetStatus());
      if(!$First)
      {
        if($this->Exec && $this->Exec->Is_Alive())
          return false;
        if($this->Exec->GetExitCode()!==0)
        {
          $this->Log('Error', 'ExitCode=', $this->Exec->GetExitCode());
          $this->Task_SetState_Failed();
          return false;
        }
      }
    //$this->Log('Log', 'Async_Next ', $this->Task_Name);
      if(IsSet($this->Exec_List[$this->Exec_Idx]))
      {
        $Item=$this->Exec_List[$this->Exec_Idx];
        $this->Exec_Idx++;
      //$this->Debug($this->Exec_List);
      //$this->Debug($Item);
        if(!$this->Exec)
        {
          $this->Log('Fatal', 'Task ', $this->Task_Name, ' haven\'t exec object for item: ', $Item);
          return false;
        }
        if($this->Exec_Log_Out) $Item.=' >>"' .$this->Exec_Log_Out.'"';
        if($this->Exec_Log_Err) $Item.=' 2>>"'.$this->Exec_Log_Err.'"';
        $this->Exec->Command=$Item;
      //$this->Log('Log', 'Exec ', $Item);
        if(!$this->Exec->Execute($this->NumThreads<0))
        {
          $this->Task_SetState_Failed();
          return false;
        }
        return true;
      }
      
      $this->Task_SetState_Finished();
      return false;
    }
    
    Function _UpdateLog($File, $IsError=false)
    {
      ClearStatCache(true, $File);
      if(FileSize($File)<=0)
      {
        UnLink($File);
        return;
      }
      if($this->Task_State=='Finished' && !$this->OutIsFinished)
        return;
      $Out=File_Get_Contents($File);
      $Out=StrTr($Out, ["\r\n"=>"\n", "\n"=>'']);
      if($IsError)
        $this->Log('Error', 'Exec_Error_Log:')($Out);
      else
        $this->Log('Log', 'Exec_Output_Log:')($Out);
      // TODO: Write Output
    }
    
    Protected Function Task_OnDone()
    {
      if($this->Exec)
      {
        if($this->Exec->Is_Alive())
        {
          $this->Log('Error', 'Task ', $this->Task_Name, ' was terminated');
          $this->Exec->Terminate();
        }
        $this->Exec->Done();
      }
      Parent::Task_OnDone();
      if(Is_String($this->Exec_Log_Out)) $this->_UpdateLog($this->Exec_Log_Out, false );
      if(Is_String($this->Exec_Log_Err)) $this->_UpdateLog($this->Exec_Log_Err, true  );
    }
  };

  $DebM=$Loader->Get_Singleton('/Debug/Manager');
  $DebM->AddNoInlineClass('C_Builder_Task_Exec');
?>