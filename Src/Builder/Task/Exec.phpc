<?
  $Loader->Parent_Class('/Builder/Task/Depends');
  
  class C_Builder_Task_Exec extends C_Builder_Task_Depends
  {
    Var $Descr=[];
    Var $List=[];
    Var $ContentHash=[];
  //static $LabelIdx=0;
    Var $LabelIdx=0;
    
    function _Init(Array $Args)
    {
      parent::_Init($Args);
      if(IsSet($Args['Asset']))
        $this->Asset=$Args['Asset'];
      $this->List[]='@echo off';
    }
    
  //Function AllocLabelIdx() { return Self::$LabelIdx++; }
    Function AllocLabelIdx() { return $this->LabelIdx++; }
    
    Function Descr(...$Args)
    {
      $this->Descr=Implode($Args);
      $this->Exec('');
      $this->Exec('');
      ForEach(Explode("\n", $this->Descr) As $Line)
        $this->Exec('Echo [Log] '.$Line);
      $this->Exec('');
    }
    
    Function Exec($Cmd, $Args=null)
    {
      if($Args!==null)
      {
        $Args->Prepare($this, $Cmd);
        $_Args=$Args->ToString();
        $this->ContentHash[]=$Args->ContentHash;
      }
      else
        $_Args='';
      if(StrLen(Trim($_Args))>0)
        $_Args=' '.$_Args;
      $Res=$Cmd.$_Args;
      $this->List[]=$Res;
    //TODO: $Args->CheckInput
    //TODO: $Args->CheckResult
      if($Args!==null)
      {
        $this->Exec('if errorlevel 1 echo Error && exit /b');
        $this->Exec('');
      }
      return $Res;
    }

    Function _MkDir(String $v)
    {
      $this->Exec('MkDir "'.$v.'" 2>nul');
    }
    
    Function _CheckFile(String $v, ?String $i=null)
    {    
      $this->Exec('if not exist "'.$v.'" echo [Error] Can`t find file "'.($i??$v).'" && exit /b');
    }
    
    Function Copy($From, $To)
    {
      $F= StrTr($From ->GetFullPath(), '/', '\\');
      $T= StrTr($To   ->GetFullPath(), '/', '\\');
      $this->Exec('if not exist "'.$T.'" copy "'.$F.'" "'.$T.'"');
      $this->Exec('xcopy "'.$F.'" "'.$T.'" /YDI');
    }
    
    Function MkDir($v) // TODO: Remove
    {
      if($v=parent::MkDir($v))
        $this->_MkDir($v);
    }
    
    Function CheckFile($v, bool $CheckHash=true)
    {
      if(Parent::CheckFile($v, $CheckHash))
        $this->_CheckFile($v->GetFullPath(), $v->GetLocalPath());
    }
    
    Function CheckResultFile($v, $bAddTask=true)
    {
      Parent::CheckResultFile($v, $bAddTask);
      $this->_CheckFile($v->GetFullPath(), $v->GetLocalPath());
    }
    
    Function _GetTaskHash(Array &$Res)
    {
      Parent::_GetTaskHash($Res);
      $Res['Task.Exec'   ]=$this->List        ;
      $Res['ContentHash' ]=$this->ContentHash ;
    }
    
    Function SaveCallTo($File=false)
    {
      If($File===false)
        $File=$this->CachePath;
      $File.='.bat';
      CreatePath(DirName($File));
      $Content=$this->ToString();
      $this->ContentHash[]=md5($Content);
      File_Put_Contents($File, $Content);
      $this->List=[];
      $this->Exec('call "'.$File.'"');
      return $File;
    }
    
    Function ToString($Separator="\r\n")
    {
      return Implode($Separator, $this->List);
    }
    
    Function Refuse()
    {
      $this->List        =[];
      Parent::Refuse();
    }
    
    Function Finish()
    {
    }
    
    Protected Function Prepare_Depends() {}
    
    Protected Function DoExecute()
    {
      $Exec=$this->Create_Object('/System/Exec');
      $Exec->Env=$_SERVER;
      
      ForEach($this->List As $Item)
      {
        $Exec->Command=$Item;
        $Exec->Execute();
      }
      $Exec->Done();
    }
  };

  $DebM=$Loader->Get_Singleton('/Debug/Manager');
  $DebM->AddNoInlineClass('C_Builder_Task_Exec');
?>
