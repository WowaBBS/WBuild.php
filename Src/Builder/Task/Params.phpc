<?  $Loader->Parent_Class('/Object');    class C_Builder_Task_Params extends C_Object  {    Var $List=[];    Var $bInline=false;    Var $bPreloaded=false;    Protected Function _Cloneable() { return true; }        Function Add() // VarArgs    {      $this->AddItem(func_get_args());      return $this;    }        Function AddItem($Item, $Key=false) // VarArgs    {      if(Is_Array($Item))        $Item=Implode($Item);      if($Key===false)      {        if($Item[0]!=='<')        {          $this->List[]=$Item;          return $this;        }        $Key=$Item;        $Item=true;      }      if($Item===true)        $Item=$Key;      else if($Key[0]!=='<')        $Item=$Key.$Item;      $this->List[$Key]=$Item;      return $this;    }        Function AddList($List)    {      ForEach($List As $k=>$Item)        $this->AddItem($Item, Is_Integer($k)? false:$k);    }        Function Preload($Asset, $Cmd)    {      if($this->bPreloaded)        return;      $Options=$Asset->GetAssetsR('Exec/Option:'.$Cmd);      $Res=[];      ForEach($Options As $Option)      {        $Res[]=$Option;        if($Option->IsOverride())          break;      }      $Options=Array_Reverse($Res);      ForEach($Options As $Option)        $Option->AddArgsTo($this);      $this->bPreloaded=$Cmd;    }        Function Prepare($Exec, $Cmd)    {      if(IsSet($Exec->Asset))        $this->Preload($Exec->Asset, $Cmd);            if($this->bInline)        return;      $Exec->Exec('');      $Exec->Exec('Set PARAMS=');      ForEach($this->List As $Item)        $Exec->Exec('Set PARAMS=%PARAMS% '.$Item);      $this->List=['%PARAMS%'];    }        Function Clear()    {      $this->List=[];    }        Function Inline()    {      $this->bInline=true;    }        Function SaveTo($File, $Separator=' ', $Replace=false)    {      CreatePath(DirName($File));      File_Put_Contents($File, $this->ToString($Separator));      if($Replace===false)        return;      $this->Clear();      $this->Add($Replace[0], $File, $Replace[1]);      $this->Inline();    }        Function RemoveSet($Set)    {      $Remove=[];      ForEach($this->List As $k=>$v)        if(IsSet($Set[$v]))          $Remove[]=$k;      ForEach($Remove As $k)        UnSet($this->List[$k]);      return Count($Remove)>0;    }        Function RemoveAnyList($List)    {      $Set=[];      ForEach($List As $Item)        $Set[$Item]=true;      return $this->RemoveSet($Set);    }        Function RemoveAny() // VarArgs    {      return $this->RemoveAnyList(func_get_args());    }        Function Override() // VarArgs    {      $List=func_get_args();      $this->RemoveAnyList($List);      ForEach($List As $Item)        $this->Add($Item);    }        Function HasSet($Set)    {      ForEach($this->List As $k=>$v)        if(IsSet($Set[$v]))          return true;      return false;    }        Function HasAnyList($List)    {      $Set=[];      ForEach($List As $Item)        $Set[$Item]=true;      return $this->HasSet($Set);    }        Function HasAny() // VarArgs    {      return $this->HasAnyList(func_get_args());    }        Function ToString($Separator=' ')    {    //if($this->bInline)      return Implode($Separator, $this->List);    //return '%PARAMS%';    }  };?>