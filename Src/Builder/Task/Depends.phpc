<?
  $Loader->Parent_Class('/Builder/Task/Base');
  
  Abstract Class C_Builder_Task_Depends extends C_Builder_Task_Base
  {
    Private $CheckHash   =[];
    Private $CheckInput  =[];
    Private $CheckResult =[];
    Private $MkDir       =[];
    
    Function LoadInputTasks()
    {
      ForEach($this->CheckInput As $v)
        if(IsSet($v->Tasks))
          ForEach($v->Tasks As $Task)
            $this->Depends($Task);
    }
    
    Function MkDir($v)
    {
      if(Is_Object($v))
      {
        $v->MkDir();
        $v=$v->GetDirFullPath();
      }

      $v=StrTr($v, '\\', '/');
      if(IsSet($this->MkDir[$v]))
        return false;
      
      CreatePath($v);
      $this->MkDir[$v]=true;
      return $v;
    }
    
    Function CheckInput($v, bool $CheckHash=true)
    {  // TODO: It't disabled for late binding in GetMakeTasks
    //if(IsSet($v->Tasks))
    //  ForEach($v->Tasks As $Task)
    //    $this->Depends($Task);
      $Res=!$v->IsNoSearch();
      if($Res)
        $this->CheckInput[]=$v;
      if($CheckHash)
        $this->CheckHash[]=$v;
      return $Res;
    }
    
    Function CheckInputs(Array $l, bool $CheckHash=true)
    {
      ForEach($l As $i)
        $this->CheckInput($i, $CheckHash);
    }

    Function CheckFile($v, bool $CheckHash=true)
    {
      return $this->CheckInput($v, $CheckHash);
    }
    
    Function CheckFiles(Array $l, bool $CheckHash=true)
    {
      ForEach($l As $i)
        $this->CheckFile($i, $CheckHash);
    }

    Function CheckResultFile($v, $bAddTask=true)
    {
     #$v->ShouldBeExists();
     #$v->InvalidateCache(); // TODO: On finih task
      $this->CheckResult []=$v;
      $this->CheckHash   []=$v;
      if($bAddTask)
        $v->AddTask($this);
    }
    
    Function Refuse()
    {
      $this->CheckInput  =[];
      $this->CheckResult =[];
      $this->CheckHash   =[];
      $this->MkDir       =[];
    }
    
    Protected Function AgregateCheckVars($z=false)
    {
      $Res=0;
      ForEach($this->CheckInput As $i)
        if(!$i->Exists())
        {
          $this->Log('Error', 'File not found ',$i->GetFullPath());
          $Res=1;
        }
      if($Res)
        return $Res;
      ForEach($this->CheckResult As $i)
        if(!$i->Exists())
        {
          if($z)
            $this->Log('Error', 'File not found ',$i->GetFullPath());
          $Res=2;
        }
      if($Res===1)
        return $Res;
      $Res=[
        'Task.Check'=>$Res,
      ];
      $this->_GetTaskHash($Res);
      ForEach($this->CheckHash As $i)
        $Res[$i->GetKey()]=$i->GetHash();
      return $Res;
    }
    
    Function CleanResult()
    {
      Parent::CleanResult();
      ForEach($this->CheckResult As $i)
        $i->Remove();
    }
    
    Function UpdateResult()
    {
      ForEach($this->CheckResult As $i)
        $i->InvalidateCache(); // TODO: On finih task
    }

    Abstract Protected Function Prepare_Depends();
    Abstract Protected Function DoExecute();
    
    Protected $CheckVars=[];
    
    Function Cache_CheckFile($File)
    {
      if(!$File->Exists())
        return False;
      $Hash=$this->CheckVars[$File->GetKey()]??False;
      if($Hash==False)
        return False;
      if($Hash!==$File->GetHash())
        return False;
      return True;
    }
    
    Final Protected Function _Execute()
    {
      $this->Prepare_Depends();
      $Cache=$this->Asset->GetManager()->Cache;
      if(!$this->CachePath)
        $this->Log('Fatal', 'No cache path');
      $Storage=$Cache->GetStorage($this->CachePath.'.check');
      $CheckVars=$Storage->GetVars();
      $this->CheckVars=$CheckVars;
      if($CheckVars)
      {
        $_CheckVars=$this->AgregateCheckVars();
        if($_CheckVars===1)
        {
          $this->Log('Error', 'Haven`t required files');
          if(true) // TODO: CleanOnFailed
            $this->CleanResult();
          return true; // TODO: Skip, haven`t required files
        }
        if(Is_Array($_CheckVars) && $CheckVars==$_CheckVars && $CheckVars['Task.Check']!==2)
          return true;
      }
      $this->CleanResult();
    //$Compiler=$this->RequireAsset('Cpp/Compiler')->Instance;
    //$Exec->Env['VcVars']=$Compiler->VCVars;
    
      $this->DoExecute();
      
      $this->UpdateResult();
      $CheckVars=$this->AgregateCheckVars(true);
    //$this->Debug($CheckVars);
      $Storage->SetVars($CheckVars);
    //$this->Debug($Storage->FullPath);
      $Storage->Done();
      $this->CheckVars=[];
    
      if($CheckVars['Task.Check']===2)
      {
        $this->Log('Error', 'Task is failed');
        return true; // TODO: Task is failed
      }
      return true;
    }

  //****************************************************************
    
    Protected Function _Debug_Info(Array &$Res)
    {
      Parent::_Debug_Info($Res);
      
      $L=[]; ForEach($this->CheckHash   As $R) $L[]=$R->ToDebugInfo(); $Res['CheckHash'   ]=$L;
      $L=[]; ForEach($this->CheckInput  As $R) $L[]=$R->ToDebugInfo(); $Res['CheckInput'  ]=$L;
      $L=[]; ForEach($this->CheckResult As $R) $L[]=$R->ToDebugInfo(); $Res['CheckResult' ]=$L;
      
      if($this->Outer) unset($Res['Outer']);
      UnSet($Res['Depends']); // TODO: ???
      $Res['Info']=$Res['Info']->Name;
    //UnSet($Res['Depends']); // TODO: ???
    }
    
  //****************************************************************
  };

  $DebM=$Loader->Get_Singleton('/Debug/Manager');
  $DebM->AddNoInlineClass('C_Builder_Task_Exec');
?>