<?
  $Loader->Parent_Class('/Builder/Task/Base');
  
  class C_Builder_Task_Depends extends C_Builder_Task_Base
  {
    Private $CheckHash   =[];
    Private $CheckInput  =[];
    Private $CheckResult =[];
    Private $MkDir       =[];
    
    Function LoadInputTasks()
    {
      ForEach($this->CheckInput As $v)
        if(IsSet($v->Tasks))
          ForEach($v->Tasks As $Task)
            $this->Depends($Task);
    }
    
    Function MkDir($v)
    {
      if(Is_Object($v))
      {
        $v->MkDir();
        $v=$v->GetDirFullPath();
      }

      $v=StrTr($v, '\\', '/');
      if(IsSet($this->MkDir[$v]))
        return false;
      
      CreatePath($v);
      $this->MkDir[$v]=true;
      return $v;
    }
    
    Function CheckInput($v)
    {  // TODO: It't disabled for late binding in GetMakeTasks
    //if(IsSet($v->Tasks))
    //  ForEach($v->Tasks As $Task)
    //    $this->Depends($Task);
      $Res=!$v->IsNoSearch();
      if($Res)
        $this->CheckInput[]=$v;
      $this->CheckHash[]=$v;
      return $Res;
    }
    
    Function CheckInputs(Array $l)
    {
      ForEach($l As $i)
        $this->CheckInput($i);
    }

    Function CheckFile($v)
    {
      return $this->CheckInput($v);
    }
    
    Function CheckFiles(Array $l)
    {
      ForEach($l As $i)
        $this->CheckFile($i);
    }

    Function CheckResultFile($v, $bAddTask=true)
    {
     #$v->ShouldBeExists();
     #$v->InvalidateCache(); // TODO: On finih task
      $this->CheckResult []=$v;
      $this->CheckHash   []=$v;
      if($bAddTask)
        $v->AddTask($this);
    }
    
    Function Refuse()
    {
      $this->CheckInput  =[];
      $this->CheckResult =[];
      $this->CheckHash   =[];
      $this->MkDir       =[];
    }
    
    Protected Function CheckInfo($z=false)
    {
      $Res=0;
      ForEach($this->CheckInput As $i)
        if(!$i->Exists())
        {
          $this->Log('Error', 'File not found ',$i->GetFullPath());
          $Res=1;
        }
      if($Res)
        return $Res;
      ForEach($this->CheckResult As $i)
        if(!$i->Exists())
        {
          if($z)
            $this->Log('Error', 'File not found ',$i->GetFullPath());
          $Res=2;
        }
      if($Res)
        return $Res;
      $Res=[];
      $this->_GetTaskHash($Res);
      ForEach($this->CheckHash As $i)
        $Res[$i->GetFullPath()]=$i->GetMD5();
      return $Res;
    }
    
    Function CleanResult()
    {
      Parent::CleanResult();
      ForEach($this->CheckResult As $i)
        $i->Remove();
    }
    
    Function UpdateResult()
    {
      ForEach($this->CheckResult As $i)
        $i->InvalidateCache(); // TODO: On finih task
    }

    Protected Function DoExecute() {}
    
    Final Protected Function _Execute()
    {
      $Cache=$this->Asset->GetManager()->Cache;
      $Storage=$Cache->GetStorage($this->CachePath.'.check');
      $CheckVars=$Storage->GetVars();
      if($CheckVars)
      {
        $CheckInfo=$this->CheckInfo();
        if($CheckInfo===1)
        {
          $this->Log('Error', 'Haven`t required files');
          if(true) // TODO: CleanOnFailed
            $this->CleanResult();
          return true; // TODO: Skip, haven`t required files
        }
        if(Is_Array($CheckInfo) && $CheckVars===$CheckInfo)
          return true;
      }
      $this->CleanResult();
    //$Compiler=$this->RequireAsset('Cpp/Compiler')->Instance;
    //$Exec->Env['VcVars']=$Compiler->VCVars;
    
      $this->DoExecute();
      
      $this->UpdateResult();
      $CheckInfo=$this->CheckInfo(true);
    //$this->Debug($CheckInfo);
      $Storage->SetVars($CheckInfo);
    //$this->Debug($Storage->FullPath);
      $Storage->Done();
    
      if($CheckInfo===2)
      {
        $this->Log('Error', 'Task is failed');
        return true; // TODO: Task is failed
      }
      return true;
    }
  };

  $DebM=$Loader->Get_Singleton('/Debug/Manager');
  $DebM->AddNoInlineClass('C_Builder_Task_Exec');
?>
