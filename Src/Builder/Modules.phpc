<?
  $Loader->Parent_Class('/Object');
//$Loader->Load_Class('/Builder/Module');
//$Loader->Load_Lib('/FS/Utils');

  class C_Builder_Modules extends C_Object
  {
    Var $CacheDir='.Build/Modules';
    Var $Modules=[];
    Var $Manager;
    
    Function GetModules() { return $this->Modules; }
    
    Function _Init(Array $Args)
    {
      parent::_Init($Args);
      $this->CacheDir=$Args['CacheDir']??$this->CacheDir;
      $this->Manager=$Args['Manager'];
      if(IsSet($Args[0]))
      {
        $File=$Args[0];
        if(Is_Dir($File))
          $this->SearchDir($File);
        elseif(Is_File($File))
        {
          $Param=include $Args[0];
          $this->_Init_Param($Param);
        }
      }
    }
    
    Function _Init_Param(Array $Param)
    {
    
    }
    
    Function Exec()
    {
    }
    
    Function SearchDir($Path)
    {
    //$Path=RealPath($Path); $Path=StrTr($Path, '\\', '/');
      $PathLen =StrLen($Path)+1;
      
      $Stack   =[$Path];
      While(IsSet($Stack[0]))
      {
        $Dir=Array_Pop($Stack);
        if(Is_File($Dir.'/.module.php'))
        {
          $FullName=SubStr($Dir, $PathLen);
          $this->Log('Log', 'Module ', $FullName);
          
          $Pos = StrRPos($FullName, '/');
          if($Pos===False)
          {
            $Parent ='';
            $Name   =$FullName;
          }
          else
          {
            $Parent =SubStr($FullName, 0, $Pos);
            $Name   =SubStr($FullName, $Pos+1);
          }
          
        //$this->Log('Debug', 'Modules ', $this->CacheDir);
          
          $MPath=$Dir.'/.module.php';
          $Args=[
            'PhpFile'  =>File_Exists($MPath)? $MPath:'',
            'Parent'   =>$Parent    ,
            'Name'     =>$Name      ,
            'FullName' =>$FullName  ,
            'Path'     =>$Dir.'/'   ,
            'Modules'  =>$this,
            'CacheDir' =>$this->CacheDir.'/'.$FullName, // 
          ];
            
        //$this->Log('Debug', 'Mod ', $Parent, 'Mod ', $Parent);
          $Module=$this->Create_Object('/Builder/Module', $Args);
          $this->Modules[$Module->FullName]=$Module;
          if(false)
            $this->Modules[$Module->Name]=$Module;
          Continue;
        }
        
        If(!($Handle=OpenDir($Dir)))
          Continue;
      
        while(False !== ($Name=ReadDir($Handle)))
        {
          if($Name==='.'  ) continue;
          if($Name==='..' ) continue;
   
          $DirName=$Dir.'/'.$Name;
          
          if(Is_Dir($DirName))
            $Stack[]=$DirName;
        }
        CloseDir($Handle);
      }
    }
    
    Function Get($Name)
    {
      return $this->Modules[$Name]??false;
    }
    
    Protected Function _Done()
    {
      ForEach($this->Modules As $Module)
        $Module->Done();
      $this->Modules=[];
      parent::_Done();
    }
    
    Function Create_Context($Args)
    {
      $Args['Modules']=$this;
      return $this->Create_Object('/Builder/Context', $Args);
    }

    Protected Function _Debug_Info(Array &$Res)
    {
      Parent::_Debug_Info($Res);
      UnSet($Res['Manager']);
    }
  };
?>