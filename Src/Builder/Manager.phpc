<?
  $Loader->Parent_Class('/Object');
//$Loader->Load_Class('/Builder/Module');
  $Loader->Load_Type('/System/Delegate');
  $Loader->Load_Lib('/FS/Utils');

  class C_Builder_Manager extends C_Object
  {
    Var $CacheDir ='.Build';
    Var $Cache    ;
    Var $Modules  ;
    Var $OnAsset  ;
    Var $Performance ;
    Var $Configurations=[
      'Configuration'=>[
        'Release'     =>['Config'=>['Release' ]],
        'Debug'       =>['Config'=>['Debug'   ]],
      ],
      'Platform'=>[
        'Win32'=>['Config'=>['Win32', 'VC'=>2017]],
        'Win64'=>['Config'=>['Win64', 'VC'=>2017]],
      ],
    ];
    
    Function _Init(Array $Args)
    {
      $this->OnAsset=new TDelegate();
      parent::_Init($Args);
      $this->CacheDir=FileName_Normalize(RealPath('./').'/'.($Args['CacheDir']??$this->CacheDir)).'/';
      $this->Cache=$this->Create_Object('/Cache/Manager', [$this->CacheDir]);
      $ModulesArgs= $Args['Modules']??[''];
      $ModulesArgs['CacheDir']='Modules';
      $ModulesArgs['Manager']=$this;
      $this->Performance =$this->Create_Object('/Debug/Performance');
      $this->Modules    =$this->Create_Object('/Builder/Modules', $ModulesArgs);
      if($Args['Configurations']?? False)
        $this->Configurations=include $Args['Configurations'];
    }
 
    Function GetModule($Name)
    {
      return $this->Modules->Get($Name);
    }
    
    Protected Function _Done()
    {
      $this->Modules->Done();
      $this->Modules=null;
      parent::_Done();
    }
    
    Function Create_Context($Args)
    {
      $Args['Manager']=$this;
      return $this->Create_Object('/Builder/Context', $Args);
    }
    
    //****************************************************************
    // Paths
   
    Protected $Paths=[]; // Path for searching several programs
    Protected $Paths_Inited=false; // Path for searching several programs
    
    Function GetPaths()
    {
      if($this->Paths_Inited)
        return $this->Paths;
      
      $this->LoadPathEnv();
      $this->LoadPathInstalled();
      
      $this->Paths_Inited=true;
      return $this->Paths;
    }
    
    Function AddPath($Path)
    {
      if(!Is_String($Path))
        $Path=Implode(';', $Path);
      $Paths=Preg_Split("/[\r\n|;,]+/", $Path);
      ForEach($Paths As $Path)
      {
        $Path=Path_Simplify($Path);
        $Key=Path_Key($Path);
        if(StrLen($Key))
          $this->Paths[$Key]=$Path;
      }
    }
    
    Function LoadPathEnv()
    {
      $this->AddPath(GetEnv('PATH'));
    }
    
    Function LoadPathFile($FileName, $Err=true)
    {
      if(File_Exists($FileName))
        $this->AddPath(File_Get_Contents($FileName));
      elseif($Err)
        $this->Log('Error', 'Path file not found: ', $FileName);
    }
    
    Function LoadPathInstalled()
    {
      $Res=$this->GetInstalledPrograms();
      $this->AddPath($Res->GetPaths());
    }
    
    //****************************************************************
    // Compilers
    
    Var $Compilers=[];
    
    Function GetCompiler($Name, Array $Args=[])
    {
      if(IsSet($this->Compilers[$Name]))
        return $this->Compilers[$Name];
      $Args['Manager']=$this;
      $Res=$this->Create_Object('/Builder/Compiler/'.$Name.'/Manager', $Args);
      $this->Compilers[$Name]=$Res;
      return $Res;
    }
 
    //****************************************************************
    // Programs
    
    Var $Programs=[];
    
    Function GetProgram($Name, Array $Args=[])
    {
      if(IsSet($this->Programs[$Name]))
        return $this->Programs[$Name];
      $Args['Manager']=$this;
      $Res=$this->Create_Object('/Builder/Program/'.$Name.'/Manager', $Args);
      $this->Programs[$Name]=$Res;
      return $Res;
    }

    
    Function GetInstalledPrograms()
    {
      return $this->Get_Singleton('/Builder/Program/Installed')->GetList();
    }
   
  //****************************************************************
  // Events
  
    Function _DoAssetEvent($Asset, $Type, ...$Args)
    {
      return ($this->OnAsset)($Asset, $Type, ...$Args);
    }
    
  //****************************************************************
  };
?>