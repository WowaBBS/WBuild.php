<?
  $Loader->Parent_Class('/Object');
//$Loader->Load_Class('/Builder/Module');
  $Loader->Load_Type('/System/Delegate');
  $Loader->Load_Type('/Builder/Config');
  $Loader->Load_Lib('/FS/Utils');

  class C_Builder_Manager extends C_Object
  {
    Var $CacheDir ='.Build/';
    Var $Cache    ;
    Var $Modules  ;
    Var $OnAsset  ;
    Var $Performance ;
    Var $Configurations=[
      'Configuration'=>[
        'Release'     =>['Config'=>['Release' ]],
        'Debug'       =>['Config'=>['Debug'   ]],
      ],
      'Platform'=>[
        'Win32'=>['Config'=>['Win32', 'VC'=>2022]],
        'Win64'=>['Config'=>['Win64', 'VC'=>2022]],
      ],
    ];
    
    Function _Init(Array $Args)
    {
      $this->Ctrl_Handler_Init();
      $this->OnAsset=new TDelegate();
      parent::_Init($Args);
      $CacheDir=$Args['CacheDir']?? $this->CacheDir;
      CreatePath($CacheDir);
      $CacheDir=StrTr(RealPath($CacheDir), '\\', '/').'/';
      $this->CacheDir=$CacheDir;
      
      $this->Mutex_Create();
      
      $this->Cache=$this->Create_Object('/Cache/Manager', [$CacheDir]);
      $ModulesArgs= $Args['Modules']??[''];
      $ModulesArgs['CacheDir']='Modules';
      $ModulesArgs['Manager']=$this;
      $this->Performance =$this->Create_Object('/Debug/Performance');
      $this->Modules    =$this->Create_Object('/Builder/Modules', $ModulesArgs);
      if($Args['Configurations']?? False)
        $this->SetConfigurationsMap(include $Args['Configurations']);
    }
 
    Protected Function _Done()
    {
      $this->Modules->Done();
      $this->Modules=null;
      $this->Performance->Done();
      $this->Mutex_Close();
      parent::_Done();
    }
    
    Function SetConfigurationsMap($Cs)
    {
      $Res=['Configuration' =>[], 'Platform'      =>[],];
      ForEach($Res As $Type=>&$List)
        ForEach($Cs[$Type] As $Config=>$v)
          $List[$Config]=(new T_Builder_Config())->InitArray($this, $List, $v, $Config, $Type);
      $this->Configurations=$Res;
    }
 
    Function GetModule($Name)
    {
      return $this->Modules->Get($Name);
    }
    
    Function Create_Context($Args)
    {
      $Args['Manager']=$this;
      return $this->Create_Object('/Builder/Context', $Args);
    }
    
    //****************************************************************
    // Paths
   
    Protected $Paths=[]; // Path for searching several programs
    Protected $Paths_Inited=false; // Path for searching several programs
    
    Function GetPaths()
    {
      if($this->Paths_Inited)
        return $this->Paths;
      
      $this->LoadPathEnv();
      $this->LoadPathInstalled();
      
      $this->Paths_Inited=true;
      return $this->Paths;
    }
    
    Function AddPath($Path)
    {
      if(!Is_String($Path))
        $Path=Implode(';', $Path);
      $Paths=Preg_Split("/[\r\n|;,]+/", $Path);
      ForEach($Paths As $Path)
      {
        $Path=Path_Simplify($Path);
        $Key=Path_Key($Path);
        if(StrLen($Key))
          $this->Paths[$Key]=$Path;
      }
    }
    
    Function LoadPathEnv()
    {
      $this->AddPath(GetEnv('PATH'));
    }
    
    Function LoadPathFile($FileName, $Err=true)
    {
      if(File_Exists($FileName))
        $this->AddPath(File_Get_Contents($FileName));
      elseif($Err)
        $this->Log('Error', 'Path file not found: ', $FileName);
    }
    
    Function LoadPathInstalled()
    {
      $Res=$this->GetInstalledPrograms();
      $this->AddPath($Res->GetPaths());
    }
    
    //****************************************************************
    // Compilers
    
    Var $Compilers=[];
    
    Function GetCompiler($Name, Array $Args=[])
    {
      if(IsSet($this->Compilers[$Name]))
        return $this->Compilers[$Name];
      $Args['Manager']=$this;
      $Res=$this->Create_Object('/Builder/Compiler/'.$Name.'/Manager', $Args);
      $this->Compilers[$Name]=$Res;
      return $Res;
    }
 
    //****************************************************************
    // Programs
    
    Var $Programs=[];
    
    Function GetProgram($Name, Array $Args=[])
    {
      if(IsSet($this->Programs[$Name]))
        return $this->Programs[$Name];
      $Args['Manager']=$this;
      $Res=$this->Create_Object('/Builder/Program/'.$Name.'/Manager', $Args);
      $this->Programs[$Name]=$Res;
      return $Res;
    }

    
    Function GetInstalledPrograms()
    {
      return $this->Get_Singleton('/Builder/Program/Installed')->GetList();
    }
   
  //****************************************************************
  // Events
  
    Function _DoAssetEvent($Asset, $Type, ...$Args)
    {
      return ($this->OnAsset)($Asset, $Type, ...$Args);
    }
    
  //****************************************************************

    Function Ctrl_Handler_Init($v=true)
    {
      if(Function_Exists('sapi_windows_set_ctrl_handler'))
        SApi_Windows_Set_Ctrl_Handler([$this, 'Ctrl_Handler'], $v);
    }
  
    function Ctrl_Handler(Int $Event)
    {
      Static $Skip=false;
      if($Skip)
        return;
      $Skip=true;
      $this->Ctrl_Handler_Init(False);
      Switch($Event)
      { 
      Case PHP_WINDOWS_EVENT_CTRL_C     : $EventName='Ctrl+C'     ; break;
      Case PHP_WINDOWS_EVENT_CTRL_BREAK : $EventName='Ctrl+Break' ; break;
      Default: $EventName='Unknown '.$Event;
      }
    //$this->GetLogger()->Get('Console')->Disable();
    //Ini_Set('display_errors', 'off');
      SApi_Windows_Cp_Set(SApi_Windows_Cp_Get('oem'));
      SApi_Windows_Generate_Ctrl_Event($Event); //,$pid) : bool
      $this->Log('Fatal', 'Ctrl_Handler ', $EventName, ' (', $Event, ')');
    }
    
  //****************************************************************
    Var $Mutex=null;
    
    Function Mutex_Create()
    {
      $OpenMode=omRead|omWrite|omMakePath|omCreate|omBinary;//|omShareable;
      $OpenMode|=($Args['Append']??False)? omAppend:omClear; //omExclusive
      $MutexName=$this->CacheDir.'Mutex.lock';
    //$this->Log('Debug', 'MutexFile: ',$MutexName);
      $this->Mutex=$this->Create_Object('/Stream/File', [
        'FileName'=>$MutexName,
        'OpenMode'=>$OpenMode,
      ]);
    }
  
    Function Mutex_Close()
    {
      $this->Mutex->Close();
      $this->Mutex->Done();
      $this->Mutex=null;
    }
    
    Function Lock($Wait=false)
    {
    //$this->Log('Debug', ($Wait? 'Locking':'Try lock'), ' mutex');
      if($this->Mutex->TryLock())
        return true;
      if($Wait)
      {
        $this->Log('Log', 'Wait....');
        return $this->Mutex->Lock();
      }
      $this->Log('Error', 'WBuilder is busy...');
      return false;
    }
    
    Function UnLock()
    {
      return $this->Mutex->UnLock();
    }
    
  //****************************************************************
  };
?>