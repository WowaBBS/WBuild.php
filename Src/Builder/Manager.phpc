<?  $Loader->Parent_Class('/Object');//$Loader->Load_Class('/Builder/Module');  $Loader->Load_Lib('/FS/Utils');  class C_Builder_Manager extends C_Object  {    Var $CacheDir='.Build';    Var $Cache;      Var $Modules;        Function _Init(Array $Args)    {      parent::_Init($Args);      $this->CacheDir=FileName_Normalize(RealPath('./').'/'.($Args['CacheDir']??$this->CacheDir)).'/';      $this->Cache=$this->Create_Object('/Cache/Manager', [$this->CacheDir]);      $ModulesArgs= $Args['Modules']??[''];      $ModulesArgs['CacheDir']='Modules';      $ModulesArgs['Manager']=$this;      $this->LoadPathEnv();      $this->LoadPathInstaled();      $this->Modules=$this->Create_Object('/Builder/Modules', $ModulesArgs);    }     Function GetModule($Name)    {      return $this->Modules->Get($Name);    }        Protected Function _Done()    {      $this->Modules->Done();      $this->Modules=null;      parent::_Done();    }        Function Create_Context($Args)    {      $Args['Manager']=$this;      return $this->Create_Object('/Builder/Context', $Args);    }        //****************************************************************    // Paths       Var $Paths=[]; // Path for searching several programs        Function AddPath($Path)    {      if(!Is_String($Path))        $Path=Implode(';', $Path);      $Paths=Preg_Split("/[\r\n|;,]+/", $Path);      ForEach($Paths As $Path)      {        $Path=Path_Simplify($Path);        $Key=Path_Key($Path);        if(StrLen($Key))          $this->Paths[$Key]=$Path;      }    }        Function LoadPathEnv()    {      $this->AddPath(GetEnv('PATH'));    }        Function LoadPathFile($FileName, $Err=true)    {      if(File_Exists($FileName))        $this->AddPath(File_Get_Contents($FileName));      elseif($Err)        echo '[Error] File not found: ', $FileName, "\n";    }        Function LoadPathInstaled()    {      $Res=$this->LoadInstaledPrograms();      $this->AddPath(Array_Keys($Res));    }        //****************************************************************    // Compilers        Var $Compilers=[];        Function GetCompiler($Name, Array $Args=[])    {      if(IsSet($this->Compilers[$Name]))        return $this->Compilers[$Name];      $Args['Manager']=$this;      $Res=$this->Create_Object('/Builder/Compiler/'.$Name.'/Manager', $Args);      $this->Compilers[$Name]=$Res;      return $Res;    }     //****************************************************************    // Programs    Var $Programs=[];    Var $Installed=[];        Function GetProgram($Name, Array $Args=[])    {      if(IsSet($this->Programs[$Name]))        return $this->Programs[$Name];      $Args['Manager']=$this;      $Res=$this->Create_Object('/Builder/Program/'.$Name.'/Manager', $Args);      $this->Programs[$Name]=$Res;      return $Res;    }        Function LoadInstaledPrograms()    {      if($this->Installed)        return $this->Installed;      $Reg=$this->Create_Object('/System/Reg');      echo 'Search installed Programs',"\n";      $List=$Reg->SearchParam(        [          'HKLM\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall',          'HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall',          'HKCU\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall',          'HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall',        ],        ['InstallLocation', 'DisplayName'], // 'InstallSource'        ['Recursive'=>true]      );      $Res=[];      ForEach($List As $Item)      {        $InstallLocation =$Item['InstallLocation' ]??false;        $DisplayName     =$Item['DisplayName'     ]??false;        if(!$InstallLocation)          continue;        $Key=Path_Key($InstallLocation);        if(!IsSet($Res[$Key]))          $Res[$Key]=['Path'=>Path_Simplify($InstallLocation)];        if($DisplayName!==false) $Res[$Key]['Title']=$DisplayName;      }      $Reg->Done();      $this->Installed=$Res;      return $this->Installed;    }       //****************************************************************  };?>