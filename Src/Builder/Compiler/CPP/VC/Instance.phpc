<?
  $Loader->Load_Lib('/FS/Utils');
  $Loader->Load_Lib('/FS/My');
  $Loader->Parent_Class('/Builder/Compiler/CPP/Base/Instance');

  class C_Builder_Compiler_CPP_VC_Instance extends C_Builder_Compiler_CPP_Base_Instance
  {
    Static $ShortName='VC';
    Var $DirVersion  ='2010';
    Var $VCVars      ='C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\vcvars32.bat';
    Var $Ver         =100;
    Var $Info;
    
    Function GetCompilerIdHash() { return $this->VCVars; }

    Function IsCompiler($Name) { return static::$ShortName===$Name; }
    Function CompareVersion($Ver)
    {
      $Ver=$this->Manager->NormalizeVersion($Ver);
      $Current=$this->Info['VcFullVer'];
    //$this->Debug([$Current, $Ver]);
      if($Current<$Ver[0]) return -1;
      if($Current>$Ver[1]) return  1;
                           return  0;
    }
    
    Function CMake_GetPlatform($Asset)
    {
      if(!$Asset) return '';
      $Config=$Asset->GetConfig();
      if($Config->InlineCheck(['Win32'     ])) return ''            ; // Win32?
      if($Config->InlineCheck(['Win64'     ])) return 'Win64'       ;
      if($Config->InlineCheck(['Win', 'arm'])) return 'ARM'         ;
                                               return 'Unsupported' ; 
    }
    
    Function CMake_GetGenerator($Asset=null)
    {
      $Platform=$this->CMake_GetPlatform($Asset);
      if($Platform==='' || $Platform==='Win32')
        $Platform='';
      else
        $Platform=' '.$Platform;
      return 'Visual Studio '.$this->Info['Version'][0].' '.$this->Info['Year'].$Platform;
    }
    
    Function DetectUsingPath($Path)
    {
      return GetEnv('ProgramFiles(x86)').'\Reference Assemblies\Microsoft\Framework\.NETFramework\\'.SubStr($Path, 1);
    }
    
    Function GetLibPaths()
    {
      return $this->Info['Lib'];
    }
    
    Function _Init(Array $Args)
    {
      Parent::_Init($Args);
      $Info=$Args['Info'];
    //$this->Debug($Info);
      $this->Info=$Info;
      $this->DirVersion =$Info['DirVersion' ];
      $this->VCVars     =$Info['VcVars'     ];
      $this->Ver        =$Info['VcVer'      ];
    }
    
    Function CheckConfig($Config)
    {
      $Cfg=$this->Manager->ParseConfig($Config);
      return $this->Manager->CheckCfg($Cfg, $this->Info);
      // TODO:
    //return true;
    }
    
    Function PrepareExec($Exec)
    {
      $bLocal=false;
      $Idx=$Exec->AllocLabelIdx();
      $Ver=$this->Ver;
    //$Exec->Exec('call "'.$this->VCVars.'"');
      $Exec->Exec('if not defined _VS_VER_ goto m'.$Idx);
      $Exec->Exec('if "%_VS_VER_%"=="'.$Ver.'" goto l'.$Idx);
      if($bLocal)
        $Exec->Exec('EndLocal');
      $Exec->Exec(':m'.$Idx);
      $Exec->Exec('echo Change VS');
      if($bLocal)
        $Exec->Exec('SetLocal');
      $Exec->Exec('SET _VS_VER_='.$Ver);
      $Exec->Exec('call "'.$this->VCVars.'"');
      $Exec->Exec(':l'.$Idx);
    }
    
    Function Exec_Cl      ($Exec, $Params) { return $Exec->Exec('cl'      ,$Params); }
    Function Exec_Lib     ($Exec, $Params) { return $Exec->Exec('lib'     ,$Params); }
    Function Exec_Link    ($Exec, $Params) { return $Exec->Exec('link'    ,$Params); }
    Function Exec_MSBuild ($Exec, $Params) { return $Exec->Exec('msbuild' ,$Params); }
    Function Exec_Rc      ($Exec, $Params) { return $Exec->Exec('rc'      ,$Params); }
    Function Exec_Mt      ($Exec, $Params) { return $Exec->Exec('mt'      ,$Params); }
    
    Function GetPchFile    ($Name) { return $Name.'.pch'     ; }
    Function GetObjFile    ($Name) { return $Name.'.obj'     ; }
    Function GetExeFile    ($Name) { return $Name.'.exe'     ; } // TODO:
    Function GetDllFile    ($Name) { return $Name.'.dll'     ; } // '.so'
    Function GetDllLibFile ($Name) { return $Name.'.dll.lib' ; }
    Function GetLibFile    ($Name) { return $Name.'.lib'     ; }
    
    Function DefineDLLExport () { return '__declspec(dllexport)'; }
    Function DefineDLLImport () { return '__declspec(dllimport)'; }
  //Function DefineDLLProxy  () { return '__declspec(dllimport dllexport)'; }

    Protected Function CreateTaskCompile(Array $Args)
    {
      $Args['Compiler']=$this;
      return $Args['Outer']->Create_Object('/Builder/Compiler/CPP/VC/Task/Compile', $Args);
    }
    
    Final Function _BuildRc(Array $Args)
    {
      $Exec      =$Args['Exec'     ];
      $RcAsset   =$Args['RcAsset'  ];
      $ResAsset  =$Args['ResAsset' ];
      $Includes  =$Args['Includes' ];

      $Params=$this->CreateParams();
      $Params->Add('/nologo');
      $Params->Preload($ResAsset, 'rc');
      ForEach($Includes As $Include)
        $Params->Add('-I "',$Include->GetFullPath(),'"');
      $Params->Add('/fo"',$ResAsset->GetFullPath(),'"');
      $Params->Add('"',$RcAsset->GetFullPath(),'"');

      $this->PrepareExec($Exec);
      $this->Exec_Rc($Exec, $Params);
    }
    
    Final Function _BuildResX(Array $Args)
    {
      $Exec      =$Args['Exec'      ];
      $ResXAsset =$Args['ResXAsset' ];
      $Resources =$Args['Resources' ];
      $Using     =$Args['Using'     ];
      
      $Params=$this->CreateParams();
      $Params->Preload($Resources, 'resgen');
      $Params->Add('/useSourcePath');
      ForEach($Using As $Item)
        $Params->Add('/r:"',$Item->GetFullPath(),'"');
      $Params->Add('/compile');
      $Params->Add('"',$ResXAsset->GetFullPath(),'","',$Resources->GetFullPath(),'"'); // FogTunerControl.resX,Release\FogTuner.FogTunerControl.resources
      
      $ResGen=$this->Create_Object('/Builder/Program/WinSDK/ResGen');
      $Path=$ResGen->Get();
      
      $Exec->Exec('"'.$Path.'"', $Params);
    }
    
  //$Args['Exec'    ]=$this->Create_Exec();
  //$Args['Objects' ]=$this->ExtractAssets  ('Cpp/Obj');
  //$Args['Libs'    ]=$this->ExtractAssetsR ('Cpp/Lib');
    Protected Function _Build(Array $Args, $Params, $OutAsset, bool $IsExe)
    {
      if(!IsSet($Args['Name'      ])) UnSupported(); // TODO: Remove
      $Outer     =$Args['Outer'     ];
      $Name      =$Args['Name'      ];
      $Exec      =$Args['Exec'      ];
    //$OutAsset  =$Args['OutAsset'  ];
    //$Params    =$Args['Params'    ];
      $Objects   =$Args['Objects'   ];
      $Libs      =$Args['Libs'      ];
      $ResAsset  =$Args['ResAsset'  ]??[];
      $Resources =$Args['Resources' ]??[];
      $Manifests =$Args['Manifests' ]??[];

      $IsIncremental=$Params->HasAny('/INCREMENTAL', '-INCREMENTAL');
      
      $Params->Add('/nologo');
      ForEach($Objects As $Item)
        $Params->Add('"',$Item->GetFullPath(),'"');
 
      ForEach($Libs As $Item)
        $Params->Add('"',$Item->GetFullPath(),'"');
        
      ForEach($Resources As $Item)
      {
        $ResName=$Name.'.'.$Item->GetFileName();
        $ResPrivate=$Item->ResPrivate? ',PRIVATE':'';
        $Params->Add('/ASSEMBLYRESOURCE:"',$Item->GetFullPath(),'","',$ResName,'"',$ResPrivate);
      }
      
      ForEach($ResAsset As $Item)
        $Params->Add('"',$Item->GetFullPath(),'"');
        
    //Var_Dump($Params);
      $Params->Add('/OUT:"', $OutAsset->GetFullPath(),'"');

      $OutManifest=false;
      if($Manifests)
        $OutManifest=$OutAsset->GetFullPath().'.intermadiate.manifest';
      if($OutManifest)
      {
        // See: https://msdn.microsoft.com/ru-ru/library/bb384691.aspx
        $ManifestLevel='asInvoker'; // asInvoker, highestAvailable, requireAdministrator
        $ManifestAccess=false;
        $Params->Add('/MANIFEST');
        $Params->Add('/ManifestFile:"', $OutManifest ,'"');
        $Params->Add('/MANIFESTUAC:"level=\'',$ManifestLevel,'\' uiAccess=\'',$ManifestAccess?'true':'false','\'" ');
      }
    
      if($Manifests && $IsIncremental)
      {
        // See: tinyXmlTest.log and tinyXmlTest_manifest.rc in https://www.testgroup.polito.it/tools_svn/Testing/MarciaTesta++/releases/v1.0/Code/tinyxml/DebugtinyXmlTest/
        // rc: 1 /* CREATEPROCESS_MANIFEST_RESOURCE_ID */ 24 /* RT_MANIFEST */ "D:\\t.exe.embed.manifest"
        //   or
        //    #include <winuser.h>  
        //    1 RT_MANIFEST "D:\\t.exe.embed.manifest"
        //   or
        //    1 24 "D:\\t.exe.embed.manifest"
        #rc /nologo /fo"t.exe.embed.manifest.res" t_manifest.rc
        #link /MANIFEST /ManifestFile:"t.exe.intermediate.manifest" /MANIFESTUAC:"level='asInvoker' uiAccess='false'" t.exe.embed.manifest.res
        #mt /nologo /verbose /out:"t.exe.embed.manifest" /manifest t.exe.intermediate.manifest
        #rc /nologo /fo"t.exe.embed.manifest.res" t_manifest.rc 
        #link /MANIFEST /ManifestFile:"t.exe.intermediate.manifest" /MANIFESTUAC:"level='asInvoker' uiAccess='false'" t.exe.embed.manifest.res 
        
        $EmbedManifest =$OutAsset->GetFullPath().'.embed.manifest';
        $EmbedRc       =$EmbedManifest.'.rc'  ;
        $EmbedRes      =$EmbedManifest.'.res' ;
        
        File_Put_Contents($EmbedRc, '1 24 "'.$EmbedManifest.'"');
        if(!File_Exists($EmbedManifest))
          File_Put_Contents($EmbedManifest, '');
        
        $Params1=$this->CreateParams();
        $Params1->Inline();
        $Params1->Add('/nologo');
        $Params1->Preload($OutAsset, 'rc');
        $Params1->Add('/fo"',$EmbedRes.'"');
        $Params1->Add('"',$EmbedRc.'"');
        $ExecRc=$this->Exec_Rc($Exec, $Params1);
        $Params->Add('"',$EmbedRes,'"');
      }
      
      $PdbAsset=false;
      if($Params->HasAny('/DEBUG', '-DEBUG'))
      {
        $PDB=FilePath_GetPathNick($OutAsset->GetLocalPath()).'.pdb';
        $PdbAsset=$Outer->CreateAsset('FS/File', ['Path'=>$PDB, '>Create'=>true, '>Parent'=>$OutAsset->Parent]); //TODO: Private
       #$this->Debug([
       #  $OutAsset->Parent->GetFullPath(),
       #  $PdbAsset->Parent->GetFullPath(),
       #  $OutAsset->GetFullPath(),
       #  $PdbAsset->GetFullPath(),
       #  $OutAsset->GetLocalPath(),
       #  $PDB,
       #  $PdbAsset->GetLocalPath(),
       #]);
        $OutAsset->AddFileDepends($PdbAsset);
      }
      
      $FileParams=$Exec->CachePath.'.Opt';
      $Params->SaveTo($FileParams, "\r\n", ['@"','"']);
      
      $ExecLink=$this->Exec_Link($Exec, $Params);

      if($Manifests)
      {
        $Params1=$this->CreateParams();
        $Params1->Add('/nologo');
        $Params1->Add('/verbose');
        if($IsIncremental) // TODO: Check Program.ilk file is exists and not empty
          $Params1->Add('/out:"',$EmbedManifest,'"');
        else
          $Params1->Add('/outputresource:"',$OutAsset->GetFullPath(),';#',$IsExe?1:2,'"');
        if($OutManifest)
          $Params1->Add('/manifest ',$OutManifest);
        ForEach($Manifests As $Manifest)
          $Params1->Add('"',$Manifest->GetFullPath(),'"');
        // TODO: Like $Params->SaveTo($FileParams, "\r\n", ['@"','"']);
        $this->Exec_Mt($Exec, $Params1);
        if($IsIncremental)
        {
          $Exec->Exec($ExecRc   );
          $Exec->Exec($ExecLink );
        }
      }
    
      if($PdbAsset)
        $Exec->CheckResultFile($PdbAsset); // TODO: Lazy check???
    }

  //$Args['Exec'     ]=$this->Create_Exec();
  //$Args['Objects'  ]=$this->ExtractAssets  ('Cpp/Obj');
  //$Args['Libs'     ]=$this->ExtractAssetsR ('Cpp/Lib');
  //$Args['ExeAsset' ]=$this->CreateAsset   ('Bin/Exe', ['Path'=>$Compiler->GetExeFile($ExeName)]);
    Protected Function _BuildExe(Array $Args)
    {
      $Exec     =$Args['Exec'     ];
    //$Objects  =$Args['Objects'  ];
    //$Libs     =$Args['Libs'     ];
      $ExeAsset =$Args['ExeAsset' ];
      
      $Params=$this->CreateParams();
      $Params->Preload($ExeAsset, 'link');
      $this->_Build($Args, $Params, $ExeAsset, true);
    }

  //$Args['Exec'     ]=$this->Create_Exec();
  //$Args['Objects'  ]=$this->ExtractAssets  ('Cpp/Obj');
  //$Args['Libs'     ]=$this->ExtractAssetsR ('Cpp/Lib');
  //$Args['DllAsset' ]=$this->CreateAsset    ('Bin/Dll', ['Path'=>$Compiler->GetDllFile    ($Name)]);
  //$Args['LibAsset' ]=$this->CreateAsset    ('Bin/Lib', ['Path'=>$Compiler->GetDllLibFile ($Name)]);
    Protected Function _BuildDll(Array $Args)
    {
      $Exec     =$Args['Exec'     ];
    //$Objects  =$Args['Objects'  ];
    //$Libs     =$Args['Libs'     ];
      $DllAsset =$Args['DllAsset' ];
      
      $Params=$this->CreateParams();
      $Params->Preload($DllAsset, 'link');
      if($LibAsset =$Args['LibAsset' ]??false)
        $Params->Add('/IMPLIB:',$LibAsset->GetFullPath());
      $Params->Add('/DLL');
      $this->_Build($Args, $Params, $DllAsset, false);
    }

  //$Args['Exec'     ]=$this->Create_Exec();
  //$Args['Objects'  ]=$this->ExtractAssets  ('Cpp/Obj');
  //$Args['Libs'     ]=$this->ExtractAssetsR ('Cpp/Lib');
  //$Args['LibAsset' ]=$this->CreateAsset    ('Bin/Lib', ['Path'=>$Compiler->GetDllFile($Name)]);
    Protected Function _BuildLib(Array $Args)
    {
      $Exec     =$Args['Exec'     ];
      $Objects  =$Args['Objects'  ];
    //$Libs     =$Args['Libs'     ];
      $LibAsset =$Args['LibAsset' ];
      
      $Params=$this->CreateParams();
      $Params->Add('/nologo');
      $Params->Preload($LibAsset, 'lib');
      
      ForEach($Objects As $Obj)
        $Params->Add($Obj->GetFullPath());
      //$Params->Add('-I ',$Obj->GetFullPath());
 
      $Params->Add('/OUT:'.$LibAsset->GetFullPath());

      $FileParams=$Exec->CachePath.'.Opt';
      $Params->SaveTo($FileParams, "\r\n", ['@"','"']);

      $this->Exec_Lib($Exec, $Params);
    }
  }
?>