<?  $Loader->Load_Lib('/FS/Utils');  $Loader->Load_Lib('/FS/My');  $Loader->Parent_Class('/Builder/Compiler/CPP/Base/Instance');  class C_Builder_Compiler_CPP_VC_Instance extends C_Builder_Compiler_CPP_Base_Instance  {    var $VCVars='C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\vcvars32.bat';        Function _Prepare($Exec)    {      $Exec->Exec('call "'.$this->VCVars.'"');    }    Function Exec_Cl      ($Exec, $Params) { $Exec->Exec('cl'      ,$Params); }    Function Exec_Lib     ($Exec, $Params) { $Exec->Exec('lib'     ,$Params); }    Function Exec_Link    ($Exec, $Params) { $Exec->Exec('link'    ,$Params); }    Function Exec_MSBuild ($Exec, $Params) { $Exec->Exec('msbuild' ,$Params); }        Function GetObjFile    ($SrcAsset) { return $SrcAsset->GetLocalPathNic().'.obj'; }    Function GetExeFile    ($Name, $Path='') { return $Path.$Name.'.exe'; } // TODO:     Function GetDllFile    ($Name, $bDebug=false, $Path='') { return $Path.$Name.($bDebug? '_d.dll'     :'.dll'     ); } // '.so'    Function GetDllLibFile ($Name, $bDebug=false, $Path='') { return $Path.$Name.($bDebug? '_d.dll.lib' :'.dll.lib' ); }    Function GetLibFile    ($Name, $bDebug=false, $Path='') { return $Path.$Name.($bDebug? '_d.lib'     :'.lib'     ); }        Function DefineDLLExport() { return '__declspec(dllexport)'; }    Function DefineDLLImport() { return '__declspec(dllimport)'; }        Protected Function _Compile(Array $Args)    {      $Defines  =$Args['Defines'  ];      $Includes =$Args['Includes' ];      $Items    =$Args['Items'    ];          $Params=$this->CreateParams();      $Params->Add('/nologo');            ForEach($Defines As $Define)        $Params->Add('-D ',$Define->GetKeyValue());       ForEach($Includes As $Include)      {        $Params->CheckObject($Include);        $Params->Add('-I ',$Include->GetPath());      }      $BaseParams=$Params;            ForEach($Items As $Item)      {        $SrcAsset =$Item['SrcAsset' ];        $ObjAsset =$Item['ObjAsset' ];        $Exec     =$Item['Exec'     ];                $Exec->Descr('Compile ',$ObjAsset->GetLocalPathNic());        $Exec->CheckFile($SrcAsset);                $Params=$BaseParams->Clone();        $Params->Add('-c ' ,$SrcAsset->GetFileName());      //$Params->Add('/Fo:',$ObjAsset->GetFileName());        $Params->Add('/Fo' ,$ObjAsset->GetFileName());        $this->Exec_Cl($Exec, $Params);                $Exec->CheckResultFile($ObjAsset);      }    }      //$Args['Exec'    ]=$this->CreateExec();  //$Args['Objects' ]=$this->RemoveAssets  ('Cpp/Obj');  //$Args['Libs'    ]=$this->RemoveAssetsR ('Cpp/Lib');    Protected Function _Build(Array $Args, $Params, $OutAsset)    {      $Exec     =$Args['Exec'     ];    //$OutAsset =$Args['OutAsset' ];    //$Params   =$Args['Params'   ];      $Objects  =$Args['Objects'  ];      $Libs     =$Args['Libs'     ];          $Params->Add('/nologo');      ForEach($Objects As $Obj)        $Params->Add($Obj->GetFileName());      //$Params->Add('-I ',$Obj->GetFileName());       ForEach($Libs As $LibFile)        $Params->Add($LibFile->GetFileName());      //$Params->Add('-l ',$LibFile->GetFileName());          //Var_Dump($Params);      $Params->Add('/OUT:', $OutAsset->GetFileName());            $this->Exec_Link($Exec, $Params);    }      //$Args['Exec'     ]=$this->CreateExec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['ExeAsset' ]=$this->CreateAsset('Bin/Exe', ['Path'=>$Compiler->GetExeFile($ExeName)]);    Protected Function _BuildExe(Array $Args)    {      $Exec     =$Args['Exec'     ];    //$Objects  =$Args['Objects'  ];    //$Libs     =$Args['Libs'     ];      $ExeAsset =$Args['ExeAsset' ];            $Params=$this->CreateParams();      $this->_Build($Args, $Params, $ExeAsset);    }  //$Args['Exec'     ]=$this->CreateExec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['DllAsset' ]=$this->CreateAsset('Bin/Dll', ['Path'=>$Compiler->GetDllFile    ($Name)]);  //$Args['LibAsset' ]=$this->CreateAsset('Bin/Lib', ['Path'=>$Compiler->GetDllLibFile ($Name)]);    Protected Function _BuildDll(Array $Args)    {      $Exec     =$Args['Exec'     ];    //$Objects  =$Args['Objects'  ];    //$Libs     =$Args['Libs'     ];      $DllAsset =$Args['DllAsset' ];      $LibAsset =$Args['LibAsset' ];            $Params=$this->CreateParams();      $Params->Add('/IMPLIB:',$LibAsset->GetFileName());      $Params->Add('/DLL');      $this->_Build($Args, $Params, $DllAsset);    }  //$Args['Exec'     ]=$this->CreateExec();  //$Args['Objects'  ]=$this->RemoveAssets  ('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR ('Cpp/Lib');  //$Args['LibAsset' ]=$this->CreateAsset   ('Bin/Lib', ['Path'=>$Compiler->GetDllFile($Name)]);    Protected Function _BuildLib(Array $Args)    {      $Exec     =$Args['Exec'     ];      $Objects  =$Args['Objects'  ];    //$Libs     =$Args['Libs'     ];      $LibAsset =$Args['LibAsset' ];            $Params=$this->CreateParams();      $Params->Add('/nologo');            ForEach($Objects As $Obj)        $Params->Add($Obj->GetFileName());      //$Params->Add('-I ',$Obj->GetFileName());       $Params->Add('/OUT:'.$LibAsset->GetFileName());      $this->Exec_Lib($Exec, $Params);    }  }?>