<?  $Loader->Load_Lib('/FS/Utils');  $Loader->Load_Lib('/FS/My');  $Loader->Parent_Class('/Builder/Compiler/CPP/Base/Instance');  class C_Builder_Compiler_CPP_VC_Instance extends C_Builder_Compiler_CPP_Base_Instance  {    Static $ShortName='VC';    Var $DirVersion  ='2010';    Var $VCVars      ='C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\vcvars32.bat';    Var $Ver         =100;    Var $Info;        Function GetCompilerIdHash() { return $this->VCVars; }        Function DetectUsingPath($Path)    {      return GetEnv('ProgramFiles(x86)').'\Reference Assemblies\Microsoft\Framework\.NETFramework\\'.SubStr($Path, 1);    }        Function _Init(Array $Args)    {      Parent::_Init($Args);      $Info=$Args['Info'];      $this->Info=$Info;      $this->DirVersion =$Info['DirVersion' ];      $this->VCVars     =$Info['VcVars'     ];      $this->Ver        =$Info['VcVer'      ];    }        Function CheckConfig($Config)    {      $Cfg=$this->Manager->ParseConfig($Config);      return $this->Manager->CheckCfg($Cfg, $this->Info);      // TODO:    //return true;    }        Function PrepareExec($Exec)    {      $bLocal=false;      $Idx=$Exec->AllocLabelIdx();      $Ver=$this->Ver;    //$Exec->Exec('call "'.$this->VCVars.'"');      $Exec->Exec('if not defined _VS_VER_ goto m'.$Idx);      $Exec->Exec('if "%_VS_VER_%"=="'.$Ver.'" goto l'.$Idx);      if($bLocal)        $Exec->Exec('EndLocal');      $Exec->Exec(':m'.$Idx);      $Exec->Exec('echo Change VS');      if($bLocal)        $Exec->Exec('SetLocal');      $Exec->Exec('SET _VS_VER_='.$Ver);      $Exec->Exec('call "'.$this->VCVars.'"');      $Exec->Exec(':l'.$Idx);    }        Function Exec_Cl      ($Exec, $Params) { $Exec->Exec('cl'      ,$Params); }    Function Exec_Lib     ($Exec, $Params) { $Exec->Exec('lib'     ,$Params); }    Function Exec_Link    ($Exec, $Params) { $Exec->Exec('link'    ,$Params); }    Function Exec_MSBuild ($Exec, $Params) { $Exec->Exec('msbuild' ,$Params); }        Function GetPchFile    ($Name) { return $Name.'.pch'; }    Function GetObjFile    ($Name) { return $Name.'.obj'; }    Function GetExeFile    ($Name) { return $Name.'.exe'; } // TODO:     Function GetDllFile    ($Name, $bDebug=false) { return $Name.($bDebug? '_d.dll'     :'.dll'     ); } // '.so'    Function GetDllLibFile ($Name, $bDebug=false) { return $Name.($bDebug? '_d.dll.lib' :'.dll.lib' ); }    Function GetLibFile    ($Name, $bDebug=false) { return $Name.($bDebug? '_d.lib'     :'.lib'     ); }        Function DefineDLLExport () { return '__declspec(dllexport)'; }    Function DefineDLLImport () { return '__declspec(dllimport)'; }  //Function DefineDLLProxy  () { return '__declspec(dllimport dllexport)'; }    Protected Function _CompileDir($Args)    {      $Outer    =$Args['Outer'    ];      $Items    =$Args['Items'    ];      $Params   =$Args['Params'   ];      $Exec     =$Args['Exec'     ];      $Dir      =$Args['Dir'      ]; //$ObjAsset->GetDirFullPath()      $OutPath  =$Args['OutPath'  ];            $Params   =clone $Params;          $Params->Add('-c');      ForEach($Items As $Item)        $Params->Add($Item['SrcAsset' ]->GetFullPath()); // '-c ' ,            $Params->Add('/Fo"',$Dir.'/"');      $FileParams=$OutPath[0].'Task/Obj/'.$OutPath[1].'.Opt';      $Params->SaveTo($FileParams, "\r\n", ['@"','"']);            $this->Exec_Cl($Exec, $Params);    }        Protected Function _CompileItem(Array $Args)    {      $SrcAsset =$Args['SrcAsset' ];      $ObjAsset =$Args['ObjAsset' ];      $Exec     =$Args['Exec'     ];      $OutPath  =$Args['OutPath'  ];      $Params   =$Args['Params'   ];            $Params->Add('-c "' ,$SrcAsset->GetFullPath(),'"');    //$Params->Add('/Fo:"',$ObjAsset->GetFullPath(),'"');      $Params->Add('/Fo"' ,$ObjAsset->GetFullPath(),'"');      $FileParams=$OutPath[0].'Task/Obj/'.$OutPath[1].'.Opt';      $Params->SaveTo($FileParams, "\r\n", ['@"','"']);            $this->Exec_Cl($Exec, $Params);    }        Protected Function _CompileSplit(Array &$Res, Array $Args)    {      $Outer    = $Args['Outer'    ];      $Items    =&$Args['Items'    ];      $Params   = $Args['Params'   ];      if($Pch=$Outer->GetLastAsset('Cpp/Pch'))        if($StdAfx=$Pch->Extract($Items, $Args))        {          $Params->Add('/Fp"',$Pch->GetDataFile(),'"');          $_Params=clone $Params;          $_Params ->Add('/Yc"',$Pch->GetHeaderName(),'"');          $Params  ->Add('/Yu"',$Pch->GetHeaderName(),'"');          $_Args=$Args;          $_Args['Items'    ]=&$StdAfx  ; // It is fix of big bag          $_Args['Pch'      ]= $Pch     ;          $_Args['Params'   ]= $_Params ;                    $Res[]=$_Args;                    ForEach($Items As $Item)            $Item['Exec']->CheckFile($StdAfx[0]['ObjAsset']);          UnSet($Item);          if($Pch->IsForce())            $Params->Add('/FI',$Pch->GetHeaderPath());        }     #$Deb=$this->Loader->Get_Singleton('/Debug/Manager')->Get('Split.log');     #  ForEach($Args['Items'] As $j=>$Item)     #    $Deb->Writeln('!'.$j.' '.$Item['ObjAsset']->GetLocalPath());     #  ForEach($_Args['Items'] As $j=>$Item)     #    $Deb->Writeln('='.$j.' '.$Item['ObjAsset']->GetLocalPath());     #  ForEach($Items As $j=>$Item)     #    $Deb->Writeln('?'.$j.' '.$Item['ObjAsset']->GetLocalPath());      parent::_CompileSplit($Res, $Args);    }    Protected Function _CompileParams(Array $Args)    {      $Defines   = $Args['Defines'   ];      $Includes  = $Args['Includes'  ];      $Using     = $Args['Using'     ];      $UsingPath = $Args['UsingPath' ];      $EnumCache = $Args['EnumCache' ];      $OutPath   = $Args['OutPath'   ];      $Outer     = $Args['Outer'     ];            $Params=$this->CreateParams();      $Params->Add('/nologo');            $Params->Preload($Outer, 'cl');            ForEach($Defines As $Define)        $Params->Add('-D "',$Define->GetKeyValue(),'"');       ForEach($Includes As $Include)        $Params->Add('-I "',$Include->GetFullPath(),'"');              $Hash=$this->GetCompilerIdHash();      $PdbPath=$OutPath.'PDB';      $PdbName=$this->Info['PDB'];      CreatePath($PdbPath);    //"Debug\vc100.pdb"    //$this->Debug($this->Info['PDB']);      $PdbFile=$PdbPath.'/'.$PdbName.$EnumCache->AllocNum($Hash, $PdbName, ['Pad'=>1, 'NoZero'=>true, 'Split'=>'_']).'.pdb';      $Params->Add('/Fd"',$PdbFile,'"');            if($Using || $UsingPath)      {        // /AI"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0"        ForEach($UsingPath As $Use)          $Params->Add('-AI"',$Use->GetFullPath(),'"');        ForEach($Using As $Use)          $Params->Add('-FU"',$Use->GetFullPath(),'"');        if($Params->RemoveAny('/EHsc', '/EHs'))          $Params->Add('/EHa');        if($Params->RemoveAny('/Gm'))          $Params->Add('/Gm-');        $Params->RemoveAny('/arch:SSE2', '/arch:SSE');        $Params->Override('/clr:nostdlib', '/clr');      }      return $Params;    }        Protected Function Compile_CanGroupByDir(Array $Args) { return true; }        Final Function _BuildRc(Array $Args)    {      $Exec      =$Args['Exec'     ];      $RcAsset   =$Args['RcAsset'  ];      $ResAsset  =$Args['ResAsset' ];      $OutPath   =$Args['OutPath'  ];      $Params=$this->CreateParams();      $Params->Preload($ResAsset, 'rc');      $Params->Add('/l"0x0409"');      $Params->Add('/nologo');      $Params->Add('/fo"',$ResAsset->GetFullPath(),'"');      $Params->Add('"',$RcAsset->GetFullPath(),'"');      $this->PrepareExec($Exec);      $Exec->Exec('rc', $Params);    }        Final Function _BuildResX(Array $Args)    {      $Exec      =$Args['Exec'      ];      $ResXAsset =$Args['ResXAsset' ];      $Resources =$Args['Resources' ];      $OutPath   =$Args['OutPath'   ];      $Using     =$Args['Using'     ];            $Params=$this->CreateParams();      $Params->Preload($Resources, 'resgen');      $Params->Add('/useSourcePath');      ForEach($Using As $Item)        $Params->Add('/r:"',$Item->GetFullPath(),'"');      $Params->Add('/compile');      $Params->Add('"',$ResXAsset->GetFullPath(),'","',$Resources->GetFullPath(),'"'); // FogTunerControl.resX,Release\FogTuner.FogTunerControl.resources            $ResGen=$this->Create_Object('/Builder/Program/WinSDK/ResGen');      $Path=$ResGen->Get();            $Exec->Exec('"'.$Path.'"', $Params);    }      //$Args['Exec'    ]=$this->Create_Exec();  //$Args['Objects' ]=$this->RemoveAssets  ('Cpp/Obj');  //$Args['Libs'    ]=$this->RemoveAssetsR ('Cpp/Lib');    Protected Function _Build(Array $Args, $Params, $OutAsset)    {      if(!IsSet($Args['Name'      ])) UnSupported(); // TODO: Remove      $Outer     =$Args['Outer'     ];      $Name      =$Args['Name'      ];      $Exec      =$Args['Exec'      ];    //$OutAsset  =$Args['OutAsset'  ];    //$Params    =$Args['Params'    ];      $Objects   =$Args['Objects'   ];      $Libs      =$Args['Libs'      ];      $OutPath   =$Args['OutPath'   ];      $ResAsset  =$Args['ResAsset'  ]??[];      $Resources =$Args['Resources' ]??[];          $Params->Add('/nologo');      ForEach($Objects As $Item)        $Params->Add('"',$Item->GetFullPath(),'"');       ForEach($Libs As $Item)        $Params->Add('"',$Item->GetFullPath(),'"');              ForEach($Resources As $Item)      {        $ResName=$Name.'.'.$Item->GetFileName();        $ResPrivate=$Item->ResPrivate? ',PRIVATE':'';        $Params->Add('/ASSEMBLYRESOURCE:"',$Item->GetFullPath(),'","',$ResName,'"',$ResPrivate);      }            ForEach($ResAsset As $Item)        $Params->Add('"',$Item->GetFullPath(),'"');            //Var_Dump($Params);      $Params->Add('/OUT:"', $OutAsset->GetFullPath(),'"');            if($Params->HasAny('/DEBUG', '-DEBUG'))      {        $PDB=FilePath_GetPathNick($OutAsset->GetLocalPath()).'.pdb';        $PdbAsset=$Outer->CreateAsset('FS/File', ['Path'=>$PDB, '>Create'=>true, '>Parent'=>$OutAsset->Parent]); //TODO: Private       #$this->Debug([       #  $OutAsset->Parent->GetFullPath(),       #  $PdbAsset->Parent->GetFullPath(),       #  $OutAsset->GetFullPath(),       #  $PdbAsset->GetFullPath(),       #  $OutAsset->GetLocalPath(),       #  $PDB,       #  $PdbAsset->GetLocalPath(),       #]);        $OutAsset->AddFileDepends($PdbAsset);      }            $FileParams=$OutPath[0].'Task/Link/'.$OutPath[1].'.Opt';      $Params->SaveTo($FileParams, "\r\n", ['@"','"']);            $this->Exec_Link($Exec, $Params);      if($PdbAsset)        $Exec->CheckResultFile($PdbAsset); // TODO: Lazy check???    }      //$Args['Exec'     ]=$this->Create_Exec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['ExeAsset' ]=$this->CreateAsset('Bin/Exe', ['Path'=>$Compiler->GetExeFile($ExeName)]);    Protected Function _BuildExe(Array $Args)    {      $Exec     =$Args['Exec'     ];    //$Objects  =$Args['Objects'  ];    //$Libs     =$Args['Libs'     ];      $ExeAsset =$Args['ExeAsset' ];            $Params=$this->CreateParams();      $Params->Preload($ExeAsset, 'link');      $this->_Build($Args, $Params, $ExeAsset);    }  //$Args['Exec'     ]=$this->Create_Exec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['DllAsset' ]=$this->CreateAsset('Bin/Dll', ['Path'=>$Compiler->GetDllFile    ($Name)]);  //$Args['LibAsset' ]=$this->CreateAsset('Bin/Lib', ['Path'=>$Compiler->GetDllLibFile ($Name)]);    Protected Function _BuildDll(Array $Args)    {      $Exec     =$Args['Exec'     ];    //$Objects  =$Args['Objects'  ];    //$Libs     =$Args['Libs'     ];      $DllAsset =$Args['DllAsset' ];            $Params=$this->CreateParams();      $Params->Preload($DllAsset, 'link');      if($LibAsset =$Args['LibAsset' ]??false)        $Params->Add('/IMPLIB:',$LibAsset->GetFullPath());      $Params->Add('/DLL');      $this->_Build($Args, $Params, $DllAsset);    }  //$Args['Exec'     ]=$this->Create_Exec();  //$Args['Objects'  ]=$this->RemoveAssets  ('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR ('Cpp/Lib');  //$Args['LibAsset' ]=$this->CreateAsset   ('Bin/Lib', ['Path'=>$Compiler->GetDllFile($Name)]);    Protected Function _BuildLib(Array $Args)    {      $Exec     =$Args['Exec'     ];      $Objects  =$Args['Objects'  ];    //$Libs     =$Args['Libs'     ];      $LibAsset =$Args['LibAsset' ];      $OutPath  =$Args['OutPath'  ];            $Params=$this->CreateParams();      $Params->Add('/nologo');      $Params->Preload($LibAsset, 'lib');            ForEach($Objects As $Obj)        $Params->Add($Obj->GetFullPath());      //$Params->Add('-I ',$Obj->GetFullPath());       $Params->Add('/OUT:'.$LibAsset->GetFullPath());      $FileParams=$OutPath[0].'Task/Lib/'.$OutPath[1].'.Opt';      $Params->SaveTo($FileParams, "\r\n", ['@"','"']);      $this->Exec_Lib($Exec, $Params);    }  }?>