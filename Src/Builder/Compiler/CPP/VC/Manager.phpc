<?
  $Loader->Parent_Class('/Builder/Compiler/CPP/Base/Manager');
  $Loader->Load_Lib('/FS/Utils');
 
  class C_Builder_Compiler_CPP_VC_Manager extends C_Builder_Compiler_CPP_Base_Manager
  {  
    /// List from https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B
    Static $Versions=[      // _MSC_VER
      ['MSC'    ,[  1,0  ],  100 ,[  1,0]],
      ['MSC'    ,[  2,0  ],  200 ,[  2,0]],
      ['MSC'    ,[  3,0  ],  300 ,[  3,0]],
      ['MSC'    ,[  4,0  ],  400 ,[  4,0]],
      ['MSC'    ,[  5,0  ],  500 ,[  5,0]],
      ['MSC'    ,[  6,0  ],  600 ,[  6,0]],
      ['MSC'    ,[  7,0  ],  700 ,[  7,0]],
      ['MSVC++' ,[  1,0  ],  800 ,[  1,0]],
      ['MSVC++' ,[  2,0  ],  900 ,[  2,0]],
      ['MSVC++' ,[  4,0  ], 1000 ,[  4,0] ,   0 ,0 ,'VS40'   ,'Developer Studio 4.0'],
      ['MSVC++' ,[  4,2  ], 1020 ,[  4,2] ,   0 ,0 ,'VS42'   ,'Developer Studio 4.2'],
      ['MSVC++' ,[  5,0  ], 1100 ,[  5,0] ,1997 ,0 ,'VS50'   ,'Visual Studio 97 version 5.0'],
      ['MSVC++' ,[  6,0  ], 1200 ,[  6,0] ,   0 ,0 ,'VS60'   ,'Visual Studio 6.0 version 6.0'],
      ['MSVC++' ,[  7,0  ], 1300 ,[  7,0] ,2002 ,0 ,'VS2002' ,'Visual Studio .NET 2002 version 7.0'],
      ['MSVC++' ,[  7,1  ], 1310 ,[  7,1] ,2003 ,0 ,'VS2003' ,'Visual Studio .NET 2003 version 7.1'],
      ['MSVC++' ,[  8,0  ], 1400 ,[  8,0] ,2005 ,0 ,'VS2005' ,'Visual Studio 2005 version 8.0'],
      ['MSVC++' ,[  9,0  ], 1500 ,[  9,0] ,2008 ,0 ,'VS2008' ,'Visual Studio 2008 version 9.0'],
      ['MSVC++' ,[ 10,0  ], 1600 ,[ 10,0] ,2010 ,0 ,'VS2010' ,'Visual Studio 2010 version 10.0'],
      ['MSVC++' ,[ 11,0  ], 1700 ,[ 11,0] ,2012 ,0 ,'VS2012' ,'Visual Studio 2012 version 11.0'],
      ['MSVC++' ,[ 12,0  ], 1800 ,[ 12,0] ,2013 ,0 ,'VS2013' ,'Visual Studio 2013 version 12.0'],
      ['MSVC++' ,[ 14,0  ], 1900 ,[ 14,0] ,2015 ,0 ,'VS2015' ,'Visual Studio 2015 version 14.0'],
      ['MSVC++' ,[ 14,1  ], 1910 ,[ 15,0] ,2017 ,0 ,'VS2017' ,'Visual Studio 2017 version 15.0'],
      ['MSVC++' ,[ 14,11 ], 1911 ,[ 15,3] ,2017 ,1 ,'VS2017' ,'Visual Studio 2017 version 15.3'],
      ['MSVC++' ,[ 14,12 ], 1912 ,[ 15,5] ,2017 ,2 ,'VS2017' ,'Visual Studio 2017 version 15.5'],
    ];
    
    Private Function LoadInfo(&$Item)
    {
      $VcVer=$Item['VcVer'];
      $Item['PDB'         ]='v'  .$VcVer;
      $Item['DirVersion'  ]='MSC'.$VcVer;
      $Item['ShowVersion' ]='MSC'.$VcVer;
      $Item['Version'     ]=0;
      $Item['Year'        ]=0;
      ForEach(Static::$Versions As $I)
        if($I[2]>=$VcVer)
          Break;
      if($I)
      {
        // TODO: Send information to my server about another compiler if $I[2]!=$VcVer 
        $Item['PDB'         ]='v'.$I[1][0].$I[1][1];
        $Item['DirVersion'  ]=$I[6]??$I[0].$I[1][0].'x'.$I[1][1];
        $Item['ShowVersion' ]=$I[7]??$Item['ShowVersion' ];
        $Item['Version'     ]=$I[3];
        $Item['Year'        ]=$I[4]??0;
      }
    }
    
    Private Function _Get($Info)
    {
    //$Key='Instance';
    //if(IsSet($Info[$Key]))
    //  return $Info[$Key];
      $Res=$this->Create_Object('/Builder/Compiler/CPP/VC/Instance', ['Info'=>$Info, 'Manager'=>$this]);
    //$Info[$Key]=$Res;
      return $Res;
    }
    
    Function Compare($a, $b)
    {    
    //if($a['VcFullVer']!==$b['VcFullVer']) return $a['VcFullVer']>b['VcFullVer'];
      if($r=$a['VcFullVer']<=>$b['VcFullVer']) return $r<0;
      
      Static $CPU=[
        'amd64' =>0,
        'x86'   =>1,
        'arm'   =>2,
      ];

      if($r=$CPU[$a['CompilerCPU']]<=>$CPU[$b['CompilerCPU']]) return $r>0;
      if($r=$CPU[$a['CPU']]<=>$CPU[$b['CPU']]) return $r>0;
      if($r=$a['Win']<=>$b['Win']) return $r>0;
      return ($a['VcVars']<=>$b['VcVars'])>0;
    }
    
    Var $List=[];
    Var $MapInfo;
    
    Function _Init(Array $Args)
    {
      Parent::_Init($Args);
      $Finder   =$this->Loader->Create_Object('/Builder/Compiler/CPP/VC/Find'   );
      $Detector =$this->Loader->Create_Object('/Builder/Compiler/CPP/VC/Detect' );
      $MapList  =$this->Manager->Cache->GetMap     ('Compiler/CPP/VS/Dir'   );
      $Check    =$this->Manager->Cache->GetEnumDir ('Compiler/CPP/VS/Info/'  ,['Def'=>['Pad'=>2]]);
    //$MapInfo  =$this->Manager->Cache->GetMap     ('Compiler/CPP/VS/Info'  ,true);
    //$this->MapInfo=$MapInfo;
      $this->MapInfo=$Check;
      $Res=[];
      $BuilderVer=1;
      ForEach($Finder->Find() As $Item)
      {
      //$this->Log('Debug', $Item['Path']);
        $R=$MapList->Get($Item['Path'],
          [
            'Builder'=>$BuilderVer,
            'Compiler'=>$Item['RegVer'],
            'DetectVer'=>$Detector->GetVersion(),
          ],
          [$Detector, 'Detect'],
          [ 
            'Info'    =>$Item    ,
            'Manager' =>$this    ,
            'Check'   =>$Check   ,
          //'MapInfo' =>$MapInfo ,
          ]
        ); //$Item->Detect($Item, $this->Manager);
        ForEach($R As $k=>$v)
          $Res[$k]=$v;
      //break; // TODO: Remove
      }
        
      $Finder   ->Done();
      $Detector ->Done();
    //$MapInfo  ->Done();
      ForEach($Res As &$Item)
        $this->LoadInfo($Item);
      uasort($Res, [$this, 'Compare']);
      $this->List=$Res;
    }
    
    Function NormalizeVersion($v)
    {
      if($v<20) $v+=2000; // Year
      if($v<2002) return [$v*100000, ($v+1)*100000-1]; //_MSC_VER
      if($v>3000) return [$v, $v]; //_MSC_FULL_VER
      $Res=[];
      $bLast=false;
      ForEach(Static::$Versions As $k=>$I)
        if(($I[4]??0)==$v)
          $Res[]=$I[2];
        else if($Res)
        {
          $Res[]=$I[2];
          $bLast=true;
          break;
        }
      $C=Count($Res);
      if($C===0)
      {
        $this->Log('Fatal', 'Visual Studio verion ', $v, ' is incorrect');
        return [0, 0];
      }
      if($bLast)
        $Res=[$Res[0]*100000,  $Res[$C-1]   *100000-1];
      else
        $Res=[$Res[0]*100000, ($Res[$C-1]+1)*100000-1];
      return $Res;
    }
    
    Private Function MsVer($v)
    {
      if($v===1) return [1, 1];
      return $this->NormalizeVersion($v);
    }
    
    Function ParseConfig($Config)
    {
      if(!Is_Object($Config))
        $this->Log('Fatal', 'UnReachable');
      $VC  =$Config->Value['VC'      ];
      $Res=[
        'VC_Min' =>$VC>0? $this->MsVer( $VC)[0]:0,
        'VC_Max' =>$VC<0? $this->MsVer(-$VC)[0]:1000000000,
        'Win'    =>$Config->Value['Windows' ],
        'x86'    =>$Config->Value['x86'     ],
        'arm'    =>$Config->Value['arm'     ],
        '32b'    =>$Config->Value['32b'     ],
        '64b'    =>$Config->Value['64b'     ],
      ];
      Return $Res;
    }
    
    Function CheckCfg($Cfg, $Item)
    {
    //$Deb=$this->Loader->Get_Singleton('/Debug/Manager')->Get('Cfg.log');
    //$Deb->Debug([$Cfg, $Item]);
    //$this->Log('Debug', 'VcVer  ',$Item['VcVer'],' in [',$Cfg['VC_Min'],'..',$Cfg['VC_Max'],']');
    //$this->Log('Debug', '  Win ',$Item['Win'],' == ',$Cfg['Win']);
    //$this->Debug([$Cfg['VC_Min'], $Cfg['VC_Max'], $Item['VcFullVer']]);
      if($Cfg['VC_Min']> $Item['VcFullVer']) return false;
      if($Cfg['VC_Max']<=$Item['VcFullVer']) return false;
      if((bool)$Cfg['Win']!=(bool)$Item['Win']) return false;
      switch($Item['CPU'])
      {
      case 'amd64':
        if(!$Cfg['x86'] || !$Cfg['64b']) return false;
        break;
      case 'x86':
        if(!$Cfg['x86'] || !$Cfg['32b']) return false;
        break;
      case 'arm':
        if(!$Cfg['arm']) return false;
        break;
      default: $this->Log('Fatal', 'Unreachable place');
      }
      return true;
    }

    Function Find($Config)
    {
      if(Is_Array($Config))
        $Config=$this->Create_Object('/Builder/Config/Set', ['Config'=>$Config]);

      $Cfg=$this->ParseConfig($Config);
      ForEach($this->List As $Item)
        if($this->CheckCfg($Cfg, $Item))
           return $this->_Get($Item);
      return null;
    }
  }   
?>