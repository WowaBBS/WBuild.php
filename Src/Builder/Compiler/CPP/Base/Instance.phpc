<?  $Loader->Parent_Class('/Object');    abstract class C_Builder_Compiler_CPP_Base_Instance extends C_Object  {    Static $ShortName='CPP';    Var $DirVersion='Vx';  //Var $Path='Path/Of/Compiler';      Abstract Function GetCompilerIdHash();      Function _Prepare($Exec)    {    }        Function CreateOutPath($Outer)    {      $I=$Outer->GetModuleInstance();      $Add=Static::$ShortName.'_'.$this->DirVersion.'_';      $Key=$this->GetCompilerIdHash(); // TODO: Predefines      $Res=$I->EnumCache->AllocFull($Key, $Add).'/';      return $Res;    }        Function GetObjFile    ($SrcAsset) { return $SrcAsset->GetLocalPathNic().'.object'; }    Function GetExeFile    ($Name, $Path='') { return $Path.$Name.'.executable'; }    Function GetDllFile    ($Name, $bDebug=false, $Path='') { return $Path.$Name.($bDebug? '.debug.dynamic'          :'.dynamic'          ); }    Function GetDllLibFile ($Name, $bDebug=false, $Path='') { return $Path.$Name.($bDebug? '.debug.dynamic.liberary' :'.dynamic.liberary' ); }    Function GetLibFile    ($Name, $bDebug=false, $Path='') { return $Path.$Name.($bDebug? '.debug.liberary'         :'.liberary'         ); }        Function DefineDLLExport() { return 'Export Of DLL'; }    Function DefineDLLImport() { return 'Import Of DLL'; }          //Protected Function _CompileItem (Array $Args) {}    Protected Function _Compile     (Array $Args) {}    Protected Function _BuildExe    (Array $Args) {}    Protected Function _BuildDll    (Array $Args) {}      //Final Function CompileItem(Array $Args)  //{  ////$Defines  =$Args['Defines'  ];  ////$Includes =$Args['Includes' ];  ////$Items    =$Args['Items'    ];  //  //  $this->_CompileItem($Args);  //}      Function PrepareExec($Exec)    {    }        Final Function Compile(Array $Args)    {      $Defines  =$Args['Defines'  ];      $Includes =$Args['Includes' ];      $Items    =$Args['Items'    ];            ForEach($Items As $Item)      {        $SrcAsset =$Item['SrcAsset' ];        $ObjAsset =$Item['ObjAsset' ];        $Exec     =$Item['Exec'     ];        $this->PrepareExec($Exec);        $Exec->Descr('Compile ',$SrcAsset->GetLocalPathNic());                $Exec->CheckObjects($Includes);        $Exec->CheckFile($SrcAsset);        $Exec->MkDir($ObjAsset);                UnSet($SrcAsset );        UnSet($ObjAsset );        UnSet($Exec     );      }           $this->_Compile($Args);      ForEach($Items As $Item)      {        $ObjAsset =$Item['ObjAsset'];        $Exec     =$Item['Exec'     ];              $Exec->CheckResultFile($ObjAsset);                $ObjAsset->AddTask($Exec);      //$ObjAsset->DependsOn($SrcAsset, $Defines, $Includes);        $Exec->Finish();      //UnSet($SrcAsset );        UnSet($ObjAsset );        UnSet($Exec     );      }    }      //$Args['Exec'     ]=$this->Create_Exec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['ExeAsset' ]=$this->CreateAsset('Bin/Exe', ['Path'=>$Compiler->GetExeFile($ExeName)]);    Final Function BuildExe(Array $Args)    {      $Exec     =$Args['Exec'     ];      $Objects  =$Args['Objects'  ];      $Libs     =$Args['Libs'     ];      $ExeAsset =$Args['ExeAsset' ];            $this->PrepareExec($Exec);            $Exec->Descr('Build ',$ExeAsset->GetLocalPathNic());      $Exec->CheckFiles($Objects);      $Exec->CheckFiles($Libs);      $Exec->MkDir($ExeAsset);            $this->_BuildExe($Args);      // TODO: Copy depends dlls      $Exec->CheckResultFile($ExeAsset);      $Exec->Finish();            $ExeAsset->AddTask($Exec);    //$ExeAsset->DependsOn($Objects, $Libs);    }  //$Args['Exec'     ]=$this->Create_Exec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['DllAsset' ]=$this->CreateAsset('Bin/Dll', ['Path'=>$Compiler->GetDllFile    ($Name)]);  //$Args['LibAsset' ]=$this->CreateAsset('Bin/Lib', ['Path'=>$Compiler->GetDllLibFile ($Name)]);    Final Function BuildDll(Array $Args)    {      $Exec     =$Args['Exec'     ];      $Objects  =$Args['Objects'  ];      $Libs     =$Args['Libs'     ];      $DllAsset =$Args['DllAsset' ];      $LibAsset =$Args['LibAsset' ];            $this->PrepareExec($Exec);            $Exec->Descr('Build ',$DllAsset->GetLocalPathNic());      $Exec->CheckFiles($Objects);      $Exec->CheckFiles($Libs);      $Exec->MkDir($DllAsset);      $Exec->MkDir($LibAsset);            $this->_BuildDll($Args);            $Exec->CheckResultFile($DllAsset);      $Exec->CheckResultFile($LibAsset);            $Exec->Finish();            $DllAsset->AddTask($Exec);      $LibAsset->AddTask($Exec);    //$DllAsset->DependsOn($Objects, $Libs);    //$LibAsset->DependsOn($Objects, $Libs);    }  //$Args['Exec'     ]=$this->Create_Exec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['LibAsset' ]=$this->CreateAsset('Bin/Lib', ['Path'=>$Compiler->GetLibFile ($Name)]);    Final Function BuildLib(Array $Args)    {      $Exec     =$Args['Exec'     ];      $Objects  =$Args['Objects'  ];      $Libs     =$Args['Libs'     ];      $LibAsset =$Args['LibAsset' ];            $this->PrepareExec($Exec);            $Exec->Descr('MakeLib ',$LibAsset->GetLocalPathNic());            $Exec->CheckFiles($Objects );      $Exec->CheckFiles($Libs    );      $Exec->MkDir($LibAsset);       $this->_BuildLib($Args);      $Exec->CheckResultFile($LibAsset);      $Exec->Finish();            $LibAsset->AddTask($Exec);    //$LibAsset->DependsOn($Objects, $Libs);    }    Function CreateParams() { return $this->Create_Object('/Builder/Task/Params'); }  }?>