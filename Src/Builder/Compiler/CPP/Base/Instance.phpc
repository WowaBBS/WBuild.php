<?  $Loader->Parent_Class('/Object');    class C_Builder_Compiler_CPP_Base_Instance extends C_Object  {    Function _Prepare($Exec)    {    }        Function GetObjFile    ($SrcAsset) { return $SrcAsset->GetLocalPathNic().'.object'; }    Function GetExeFile    ($Name, $Path='') { return $Path.$Name.'.executable'; }    Function GetDllFile    ($Name, $Path='') { return $Path.$Name.'.dynamic'; }    Function GetDllLibFile ($Name, $Path='') { return $Path.$Name.'.dynamic.liberary'; }        Function DefineDLLExport() { return 'Export Of DLL'; }    Function DefineDLLImport() { return 'Import Of DLL'; }          //Protected Function _CompileItem (Array $Args) {}    Protected Function _Compile     (Array $Args) {}    Protected Function _BuildExe    (Array $Args) {}    Protected Function _BuildDll    (Array $Args) {}      //Final Function CompileItem(Array $Args)  //{  ////$Defines  =$Args['Defines'  ];  ////$Includes =$Args['Includes' ];  ////$Items    =$Args['Items'    ];  //  //  $this->_CompileItem($Args);  //}        Final Function Compile(Array $Args)    {      $Defines  =$Args['Defines'  ];      $Includes =$Args['Includes' ];      $Items    =$Args['Items'    ];            ForEach($Items As $Item)      {        $SrcAsset=$Item['SrcAsset'];        $ObjAsset=$Item['ObjAsset'];        $ObjAsset->DependsOn($SrcAsset, $Defines, $Includes);      }          $this->_Compile($Args);    }      //$Args['Exec'     ]=$this->CreateExec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['ExeAsset' ]=$this->CreateAsset('Bin/Exe', ['Path'=>$Compiler->GetExeFile($ExeName)]);    Final Function BuildExe(Array $Args)    {      $Exec     =$Args['Exec'     ];      $Objects  =$Args['Objects'  ];      $Libs     =$Args['Libs'     ];      $ExeAsset =$Args['ExeAsset' ];            $Exec->Descr('Build ',$ExeAsset->GetLocalPathNic());      $Exec->CheckFiles($Objects);      $Exec->CheckFiles($Libs);            $this->_BuildExe($Args);      // TODO: Copy depends dlls      $Exec->CheckResultFile($ExeAsset);      $ExeAsset->AddTask($Exec);      $ExeAsset->DependsOn($Objects, $Libs);    }  //$Args['Exec'     ]=$this->CreateExec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['DllAsset' ]=$this->CreateAsset('Bin/Dll', ['Path'=>$Compiler->GetDllFile    ($Name)]);  //$Args['LibAsset' ]=$this->CreateAsset('Bin/Lib', ['Path'=>$Compiler->GetDllLibFile ($Name)]);    Final Function BuildDll(Array $Args)    {      $Exec     =$Args['Exec'     ];      $Objects  =$Args['Objects'  ];      $Libs     =$Args['Libs'     ];      $DllAsset =$Args['DllAsset' ];      $LibAsset =$Args['LibAsset' ];            $Exec->Descr('Build ',$DllAsset->GetLocalPathNic());      $Exec->CheckFiles($Objects);      $Exec->CheckFiles($Libs);            $this->_BuildDll($Args);            $Exec->CheckResultFile($DllAsset);      $Exec->CheckResultFile($LibAsset);            $DllAsset->AddTask($Exec);      $LibAsset->AddTask($Exec);      $DllAsset->DependsOn($Objects, $Libs);      $LibAsset->DependsOn($Objects, $Libs);    }  //$Args['Exec'     ]=$this->CreateExec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['LibAsset' ]=$this->CreateAsset('Bin/Lib', ['Path'=>$Compiler->GetLibFile ($Name)]);    Final Function BuildLib(Array $Args)    {      $Exec     =$Args['Exec'     ];      $Objects  =$Args['Objects'  ];      $Libs     =$Args['Libs'     ];      $LibAsset =$Args['LibAsset' ];            $Exec->Descr('MakeLib ',$LibAsset->GetLocalPathNic());            $Exec->CheckFiles($Objects );      $Exec->CheckFiles($Libs    );       $this->_BuildLib($Args);      $LibAsset->AddTask($Exec);      $Exec->CheckResultFile($LibAsset);      $LibAsset->DependsOn($Objects, $Libs);    }    Function CreateParams()    {      return $this->Create_Object('/Builder/Params');    }        Function CreateExec()    {      return $this->Create_Object('/Builder/Exec');    }  }?>