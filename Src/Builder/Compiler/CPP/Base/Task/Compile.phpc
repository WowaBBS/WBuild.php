<?
  $Loader->Parent_Class('/Builder/Task/Exec');

  Abstract Class C_Builder_Compiler_CPP_Base_Task_Compile extends C_Builder_Task_Exec
  {
    Var $Compiler     = Null    ;
  //Var $Args         = []      ;
    Var $Defines      = []      ;
    Var $Includes     = []      ;
    Var $Using        = []      ;
    Var $UsingPath    = []      ;
    Var $EnumCache    = Null    ;
    Var $OutPath      = False   ;
    Var $Outer        = Null    ;
    Var $Items        = []      ;
    Var $Dir          = False   ; //$ObjAsset->GetDirFullPath()
    Var $PchType      = 'NoUse' ;
    Var $Pch          = False   ;
    Var $PchAsset     = Null    ;
    Var $ForceInclude = []      ;
   #Var $Libs         = []      ; // TODO: Remove
    Var $Disabled     = []      ;
    Var $LazyDepsId   = false   ;

    Protected Function _Init(Array $Args)
    {
      if(!IsSet($Args['Performance']))
        $Args['Performance']='Compile';
      if(!IsSet($Args['OutIsFinished']))
        $Args['OutIsFinished']=!$Args['Task_Asset']->IsExternalModule();
      Parent::_Init($Args);
      
      $this->Compiler     =$Args['Compiler'     ];
      $this->Defines      =$Args['Defines'      ];
      $this->Includes     =$Args['Includes'     ];
      $this->Using        =$Args['Using'        ];
      $this->UsingPath    =$Args['UsingPath'    ];
      $this->DepUsing     =$Args['DepUsing'     ]?? False;
      $this->EnumCache    =$Args['EnumCache'    ];
      $this->OutPath      =$Args['OutPath'      ];
      $this->Outer        =$Args['Outer'        ];
      $this->Items        =$Args['Items'        ];
      $this->Dir          =$Args['Dir'          ]?? False ; //$ObjAsset->GetDirFullPath()
      $this->PchType      =$Args['PchType'      ]??'NoUse';
      $this->Pch          =$Args['Pch'          ]?? False ;
      $this->PchAsset     =$Args['PchAsset'     ]?? Null;
      $this->ForceInclude =$Args['ForceInclude' ]?? [];
    # $this->Libs         =$Args['Libs'         ]?? []; // TODO: Remove?
      $this->Disabled     =$Args['Disabled'     ]?? False;
      $this->LazyDepsId   =$Args['LazyDepsId'   ];
      
      $this->Call_MakeCompile();
    }

    Abstract Protected Function MakeCompile(); // {}
    
    Private Function Call_MakeCompile()
    {
      if(false)
        $this->Log('Debug', 'Call_MakeCompile')->Call(
          Function($Log) //use ($this)
          {
            $Log('>>>>>>>>>');
            $Log('Dir: ',$this->Dir);
          //$Item=$this->GetFirst();
          //$Log($this->CachePath,'     -> ',$Item['ObjAsset']->GetLocalPath());
            ForEach($this->Items As $Item)
              $Log($Item['TaskPath'],'     -> ',$Item['ObjAsset']->GetLocalPath());
            $Log('<<<<<<<<<');
          }
        );
        
      $this->Compiler->PrepareExec($this);
    # $this->AddCheckInputs($this->Includes); // No includes check but check by depends headers
     #$this->AddCheckInputs($this->UsingPath); // TODO:
      $this->AddCheckInputs($this->Using);
      $this->MkDir($this->Task_Asset);
      
      $LazyDeps=[
        'Cpp/Id'       =>$this->LazyDepsId ,
        'Cpp/Includes' =>$this->Includes   ,
      ];
        
      ForEach($this->Items As $Item)
      {
        $SrcAsset =$Item['SrcAsset' ];
        $this->Descr('Compile ', $SrcAsset->GetLocalPathNick());
        $this->AddCheckFile($SrcAsset, ['LazyDeps'=>$LazyDeps]);
        UnSet($SrcAsset );
      } 
      
      ForEach($this->ForceInclude As $Item)
      {
        $this->AddCheckFile($Item, ['LazyDeps'=>$LazyDeps]);
        UnSet($Item );
      } 
    
      if($this->PchAsset)
        $this->AddCheckFile($this->PchAsset);

      $this->MakeCompile();
      
      ForEach($this->Items As $Item)
        $this->AddCheckResultFile($Item['ObjAsset'], ['AddTask'=>!$this->Disabled]);
      
      $this->SaveCallTo();
      $this->Exec_Finish();
    }
    
    Function CleanResult()
    {
      Parent::CleanResult();
    }
    
    Function GetListChanged()
    {
      $_CheckVars=$this->CheckVars;
      if($_CheckVars===1)
      {
        $this->Log('Debug',
          'Recompile all',
          ' because $_CheckVars===1 was changed'
        );
        return true;
      }
      If(!Is_Array($_CheckVars))
      {
        $this->Log('Fatal', 'What is it: ', $_CheckVars);
        return true;
      }

      $Items=$this->Items;
      if(Count($Items)==1)
        return true;
      $IsAll=true;
      ForEach($Items As $k=>$Item)
      {
        if($this->AssetWasChanged($Item['ObjAsset'])) Continue;
        if($this->AssetWasChanged($Item['SrcAsset'])) Continue;
        
        UnSet($Items[$k]);
        $IsAll=false;
      }
      return $IsAll?: $Items;
    }
    
    Protected Function DoExecute()
    {
      if(Count($this->Items)==1)
        return Parent::DoExecute();
      else
      {
        $this->Log('Fatal', 'Unsupported TODO the next');
        return;
      }
      
      // TODO:
      $ListChanged=$this->GetListChanged();
      if($ListChanged===true) // All
        return Parent::DoExecute();
      
      $OldItems     =$this->Items     ;
      $OldCachePath =$this->CachePath ;

      $this->CachePath.='.Part';
    //$this->CachePath.='.Main';
    
      $this->Items=$ListChanged;
    
      ForEach($this->Items As $Item)
        $Item['ObjAsset']->Remove();
      
      $this->Exec_Clear();
      
      $this->Compiler->PrepareExec($this);
      $this->MakeCompile();
      
      $this->SaveCallTo();
      $this->Exec_Finish();

      $this->Items     =$OldItems     ;
      $this->CachePath =$OldCachePath ;
      
      Parent::DoExecute();
    }
  };
?>