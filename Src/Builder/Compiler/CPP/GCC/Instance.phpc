<?
  $Loader->Parent_Class('/Builder/Compiler/CPP/Base/Instance');
  $Loader->Load_Lib('/FS/Utils');
 
  class C_Builder_Compiler_CPP_GCC_Instance extends C_Builder_Compiler_CPP_Base_Instance
  {
    Static $ShortName='GCC';
    Var $DirVersion='V4x6x2';
    Var $Path='C:\MinGW';
    
    Function _Init(Array $Args)
    {
      Parent::_Init($Args);
      $Info=$Args['Info'];
      $this->Info=$Info;
      $this->Path =$Info['Path' ];
    }
    
    Function GetCompilerIdHash() { return $this->Path; }
    
    Function GetPchFile    ($Name) { return       $Name.'.gch' ; }
    Function GetObjFile    ($Name) { return       $Name.'.o'   ; }
    Function GetExeFile    ($Name) { return       $Name.'.exe' ; }
    Function GetDllFile    ($Name) { return       $Name.'.so'  ; } // '.so'
  # Function GetDllFile    ($Name) { return       $Name.'.dll' ; } // '.so'
    Function GetDllLibFile ($Name) { return 'lib'.$Name.'.a'   ; }
    Function GetLibFile    ($Name) { return       $Name.'.a'   ; }

    Function DefineDLLExport () { return '__attribute__((visibility("default")))'; }
    Function DefineDLLImport () { return ''; } // __attribute__((visibility("hidden")))
  //Function DefineDLLProxy  () { return $this->DefineDLLExport(); }
    
    Function Exec_GPP ($Exec, $Params) { $Exec->Exec($this->Path.'/bin/g++',$Params); }
    Function Exec_Ar  ($Exec, $Params) { $Exec->Exec($this->Path.'/bin/ar' ,$Params); }

    Function CMake_GetGenerator($Asset=null)
    {
      return 'Fake MinGW';
    }
    
    Function PrepareExec($Exec)
    {
      $Exec->WorkDirectory=$this->Path.'/bin';
    }
    
    Function IsCompiler($Name) { return static::$ShortName===$Name; }
    Function CompareVersion($Ver)
    {
      $Ver=$this->Manager->NormalizeVersion($Ver);
    # $Current=$this->Info['GccFullVer'];
    # if($Current<$Ver[0]) return -1;
    # if($Current>$Ver[1]) return  1;
                           return  0;
    }
    
    Function GetLibPaths()
    {
      return [$this->Path.'/lib/'];
    }
    
    Function GetIncludes()
    {
      return [$this->Path.'/include/'];
    }
    
    // _BuildRc
    Final Function _BuildRc(Array $Args)
    {
      $Exec      =$Args['Exec'     ];
      $RcAsset   =$Args['RcAsset'  ];
      $ResAsset  =$Args['ResAsset' ];
      $Includes  =$Args['Includes' ];
      // TODO:
    }
   
    Final Function _BuildResX(Array $Args)
    {
      $Exec      =$Args['Exec'      ];
      $ResXAsset =$Args['ResXAsset' ];
      $Resources =$Args['Resources' ];
      $Using     =$Args['Using'     ];
      // TODO:
    }
      
    Protected Function _CreateCompiler(Array $Args)
    {
      return $this->Create_Object('/Builder/Compiler/CPP/GCC/Compiler', $Args);
    }
    
  //$Args['Exec'    ]=$this->Create_Exec();
  //$Args['Objects' ]=$this->ExtractAssets  ('Cpp/Obj');
  //$Args['Libs'    ]=$this->ExtractAssetsR ('Cpp/Lib');
    Protected Function _Build(Array $Args, $Params, $OutAsset)
    {
      $Exec         =$Args['Exec'         ];
    //$OutAsset     =$Args['OutAsset'     ];
    //$Params       =$Args['Params'       ];
      $Objects      =$Args['Objects'      ];
      $Libs         =$Args['Libs'         ];
      $NoEntry      =$Args['NoEntry'      ]??false;
      $NoDefaultLib =$Args['NoDefaultLib' ]??false;
      $Proxy        =$Args['Proxy'        ]??[];
      
      if($Proxy)
        $this->Log('Fatal', 'TODO');
      
    //$Params->Add('/nologo');
      ForEach($Objects As $Obj) // TODO: Reverce
        $Params->Add($Obj->GetFullPath());
 
      ForEach($Libs As $LibFile) // TODO: Reverce
        $Params->Add($LibFile->GetFullPath());
      //$Params->Add(' -Wl,-h ',$LibFile->GetFullPath());
      
      $Params->Add('-o ',$OutAsset->GetFullPath());
      $Params->Add('-static-libgcc -static-libstdc++'); // TODO: Static?

      $this->Exec_GPP($Exec, $Params);
    }
    
  //$Args['Exec'     ]=$this->Create_Exec();
  //$Args['Objects'  ]=$this->ExtractAssets('Cpp/Obj');
  //$Args['Libs'     ]=$this->ExtractAssetsR('Cpp/Lib');
  //$Args['BinAsset' ]=$this->CreateAsset('Bin/Dll', ['Path'=>$Compiler->GetDllFile    ($Name)]);
  //$Args['BinType'  ]='Exe'|'Dll'
  //$Args['LibAsset' ]=$this->CreateAsset('Bin/Lib', ['Path'=>$Compiler->GetDllLibFile ($Name)]);
    Protected Function _BuildBin(Array $Args)
    {
      $Exec     =$Args['Exec'     ];
    //$Objects  =$Args['Objects'  ];
    //$Libs     =$Args['Libs'     ];
      $BinAsset =$Args['BinAsset' ];
      $BinType  =$Args['BinType'  ];
      $LibAsset =$Args['LibAsset' ]??false;
      
      $Params=$this->CreateParams();
      if($BinType==='Dll')
        $Params->Add('-shared');
      if($LibAsset)
        $Params->Add('-Wl,--out-implib,'.$LibAsset->GetFullPath());
      $this->_Build($Args, $Params, $BinAsset); //, $BinType==='Exe');
    }

  //$Args['Exec'     ]=$this->Create_Exec();
  //$Args['Objects'  ]=$this->ExtractAssets  ('Cpp/Obj');
  //$Args['Libs'     ]=$this->ExtractAssetsR ('Cpp/Lib');
  //$Args['LibAsset' ]=$this->CreateAsset    ('Bin/Lib', ['Path'=>$Compiler->GetDllFile($Name)]);
    Protected Function _BuildLib(Array $Args)
    {
      $Exec     =$Args['Exec'     ];
      $Objects  =$Args['Objects'  ];
    //$Libs     =$Args['Libs'     ];
      $LibAsset =$Args['LibAsset' ];
      
      $Params=$this->CreateParams();
    //$Params->Add('/nologo');
      $Params->Add('ruv');
      $Params->Add($LibAsset->GetFullPath());
      
      ForEach($Objects As $Obj)
        $Params->Add($Obj->GetFullPath());
 
      $this->Exec_Ar($Exec, $Params);
    }

  }
?>