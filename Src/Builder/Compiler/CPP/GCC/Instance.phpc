<?  $Loader->Parent_Class('/Builder/Compiler/CPP/Base/Instance');  $Loader->Load_Lib('/FS/Utils');  $Loader->Load_Lib('/FS/My');   class C_Builder_Compiler_CPP_GCC_Instance extends C_Builder_Compiler_CPP_Base_Instance  {    var $Path='C:\MinGW';        Function _Prepare($Exec)    {    }    Function GetObjFile    ($SrcAsset) { return $SrcAsset->GetLocalPathNic().'.o'; }    Function GetExeFile    ($Name, $Path='') { return $Path.$Name.'.exe'; } // TODO:     Function GetDllFile    ($Name, $Path='') { return $Path.$Name.'.dll'; } // '.so'    Function GetDllLibFile ($Name, $Path='') { return $Path.'lib'.$Name.'.a'; }    Function GetLibFile    ($Name, $Path='') { return $Path.      $Name.'.a'; }    Function DefineDLLExport() { return '__attribute__((visibility("default")))'; }    Function DefineDLLImport() { return ''; } // __attribute__((visibility("hidden")))        Function Exec_GPP ($Exec, $Params) { $Exec->Exec($this->Path.'/bin/g++',$Params); }    Function Exec_Ar  ($Exec, $Params) { $Exec->Exec($this->Path.'/bin/ar' ,$Params); }       Function _Compile($Args)    {      $Defines  =$Args['Defines'  ];      $Includes =$Args['Includes' ];      $Items    =$Args['Items'    ];            $Params=$this->CreateParams();    //$Params->Add('/nologo');            ForEach($Defines As $Define)        $Params->Add('-D ',$Define->GetKeyValue());       $Params->CheckObjects($Includes);      ForEach($Includes As $Include)        $Params->Add('-I ',$Include->GetPath());            $BaseParams=$Params;        ForEach($Items As $Item)      {        $SrcAsset =$Item['SrcASset' ];        $ObjAsset =$Item['ObjAsset' ];        $Exec     =$Item['Exec'     ];        $Params=$BaseParams->Clone();      //$Params->Add($ObjAsset->GetFileName());        $Params->Add('-c ', $SrcAsset->GetFileName());        $Params->Add('-o ', $ObjAsset->GetFileName());                $Exec->Descr('Compile ',$ObjAsset->GetLocalPathNic());        $Exec->CheckFile($SrcAsset);        $this->Exec_GPP($Exec, $Params);                $ObjAsset->AddTask($Exec);        $Exec->CheckResultFile($ObjAsset);      }    }  //$Args['Exec'    ]=$this->CreateExec();  //$Args['Objects' ]=$this->RemoveAssets  ('Cpp/Obj');  //$Args['Libs'    ]=$this->RemoveAssetsR ('Cpp/Lib');    Protected Function _Build(Array $Args, $Params, $OutAsset)    {      $Exec     =$Args['Exec'     ];    //$OutAsset =$Args['OutAsset' ];    //$Params   =$Args['Params'   ];      $Objects  =$Args['Objects'  ];      $Libs     =$Args['Libs'     ];          //$Params->Add('/nologo');      ForEach($Objects As $Obj)        $Params->Add($Obj->GetFileName());       ForEach($Libs As $LibFile)        $Params->Add($LibFile->GetFileName());      //$Params->Add(' -Wl,-h ',$LibFile->GetFileName());            $Params->Add('-o ',$OutAsset->GetFileName());      $this->Exec_GPP($Exec, $Params);    }      //$Args['Exec'     ]=$this->CreateExec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['ExeAsset' ]=$this->CreateAsset('Bin/Exe', ['Path'=>$Compiler->GetExeFile($ExeName)]);    Protected Function _BuildExe(Array $Args)    {      $Exec     =$Args['Exec'     ];    //$Objects  =$Args['Objects'  ];    //$Libs     =$Args['Libs'     ];      $ExeAsset =$Args['ExeAsset' ];            $Params=$this->CreateParams();      $this->_Build($Args, $Params, $ExeAsset);    }  //$Args['Exec'     ]=$this->CreateExec();  //$Args['Objects'  ]=$this->RemoveAssets('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR('Cpp/Lib');  //$Args['DllAsset' ]=$this->CreateAsset('Bin/Dll', ['Path'=>$Compiler->GetDllFile    ($Name)]);  //$Args['LibAsset' ]=$this->CreateAsset('Bin/Lib', ['Path'=>$Compiler->GetDllLibFile ($Name)]);    Protected Function _BuildDll(Array $Args)    {      $Exec     =$Args['Exec'     ];    //$Objects  =$Args['Objects'  ];    //$Libs     =$Args['Libs'     ];      $DllAsset =$Args['DllAsset' ];      $LibAsset =$Args['LibAsset' ];            $Params=$this->CreateParams();      $Params->Add('-shared');      $Params->Add('-Wl,--out-implib,'.$LibAsset->GetFileName());      $this->_Build($DllAsset, $Params);    }  //$Args['Exec'     ]=$this->CreateExec();  //$Args['Objects'  ]=$this->RemoveAssets  ('Cpp/Obj');  //$Args['Libs'     ]=$this->RemoveAssetsR ('Cpp/Lib');  //$Args['LibAsset' ]=$this->CreateAsset   ('Bin/Lib', ['Path'=>$Compiler->GetDllFile($Name)]);    Protected Function _BuildLib(Array $Args)    {      $Exec     =$Args['Exec'     ];      $Objects  =$Args['Objects'  ];    //$Libs     =$Args['Libs'     ];      $LibAsset =$Args['LibAsset' ];            $Params=$this->CreateParams();    //$Params->Add('/nologo');      $Params->Add('ruv');      $Params->Add($LibAsset->GetFileName());            ForEach($Objects As $Obj)        $Params->Add($Obj->GetFileName());       $this->Exec_Ar($Exec, $Params);    }  }?>