<?
  $this->Parent_Class('/Builder/Program/VS/Builder/Base');
  $this->Load_Type('/FS/Path');  
  
  class C_Builder_Program_VS_Builder_Module extends C_Builder_Program_VS_Builder_Base
  {
    Var $IsUnused       =false;
    Var $IsBroken       =false;
    Var $IsTools        =false;
    
    Var $BuildModule    =null;
    
    Var $Files          =[];
    Var $Path           ='Undefined';
    Var $Includes       =[];
    Var $SourcePath     =[];
    Var $Using          =[];
    Var $NMakeForcedUsingAssemblies =[];
    Var $NMakeAssemblySearchPath    =[];
    Var $Depends        =[];
    Var $DependsModules =[];
    Var $IsExternal     =false;
    Var $ModuleName     ='';
    Var $Instances      =[];
    Var $ConfigMap      =[];
    Var $VS             =[];
    Var $FrameworkVersion =null;
    
    Function GetInstance($Asset)
    {
      $BuildInstance =$Asset->GetModuleInstance();
      $BuildModule   =$BuildInstance->GetModule();
      if($BuildModule!==$this->BuildModule)
        $this->Log('Fatal', 'Used different module ', $BuildModule->GetName(), ' from ', $this->ModuleName, ' for asset ', Get_Class($Asset));
      $Context       =$BuildInstance->GetContext();
      $Configuration =$Context->Configuration ;
      $Platform      =$Context->Platform      ;
      $Key=$Configuration.'|'.$Platform;
      return $this->Instances[$Key]??=$this->Create_Object('/Builder/Program/VS/Builder/ModuleInstance', [
        'Manager'       =>$this->GetManager(),
      //'Defines'       =>$this->GetManager()->Defines,
      //'IntelliSense'  =>$this->GetManager()->IntelliSense,
        'Module'        =>$this          ,
        'BuildInstance' =>$BuildInstance ,
        'Configuration' =>$Configuration ,
        'Platform'      =>$Platform      ,
        'Key'           =>$Key           ,
      ]);
    }
    
    Function _Init(Array $Args)
    {
      Parent::_Init($Args);
      $this->BuildModule =$Args['Module'];
      $this->VS          =$this->BuildModule->VS;
      $Path              =$this->BuildModule->GetName();
      $this->ModuleName  =$Path;
      $this->Path       = StrTr($Path, '/', '\\');
    }
  
    Function GetPath() { return $this->Path; }
    
    Function Add($Tag ,$Created, $Add=[])
    {
      if($Created->HasKey('External'))
        return;
      if($Created->GetModule()->GetName()!==$this->ModuleName)
        return;
    //if($Tag==='ClCompile')
    //{
    //  $Includes=$Created->GetIncludes();
    //}
      $this->_AddFile($Tag ,$Created, $Add);
    }
    
    Function _AddFile($Tag ,$Created, $Add=[])
    {
    //$this->Files[$Tag][StrToLower($Created)]=$Created;
      $FilePath=$Created->GetFullPath();
      if(!$Created->Parent)
      {
        $this->Log('Error', 'No parent for file ', $FilePath)->Debug($Created);
        return;
      }
      $Parent=$Created->Parent->GetFullPath();

      { // Get forlder
        $BaseDir=TPath::Create(DirName($Parent));
        $File=TPath::Create(DirName($FilePath));
        $File->PathFrom($BaseDir);
        $Folder=$File->ToString();
      }
      
      $Key=StrToLower($FilePath);
      $New=[$Tag, $FilePath, $Add, $Folder];
      if($Old=$this->Files[$Key]??[])
      {
        if($this->Files[$Key][0]==='ClInclude' && $Tag==='ClCompile')
        {
          $New[2]+=$Old[2];
        }
        Else
        {
          $Old[2]+=$New[2];
          $New=$Old;
        }
      }
      $this->Files[$Key]=$New;
    //$this->Log('Debug', '<', $Tag, ' Include="', $FilePath,'"\>');
    }
    
    Function AddCppCompiler($Compiler)
    {
      $Includes=[];
      ForEach($Compiler->GetIncludes() As $v)
        $Includes[$v]=$v;
      $this->SourcePath =$Includes+$this->SourcePath ;
      $this->Includes   =$Includes+$this->Includes   ;
    }
    
    Function AddSourcePath($Created)
    {
      $Key      =$Created->GetKey();
      $FullPath =$Created->GetFullPath();
      $this->SourcePath [$Key]=$FullPath;
    }
    
    Function AddInclude($Created)
    {
      $Key      =$Created->GetKey();
      $FullPath =$Created->GetFullPath();
      $this->Includes   [$Key]=$FullPath;
      $this->SourcePath [$Key]=$FullPath;
      if($Created->HasKey('External'))
        return;
    //$this->Debug([$Created->GetModule()->GetName(), $this->ModuleName, $Created->GetFullPath()]);
      if($Created->GetModule()->GetName()!==$this->ModuleName)
        return;
      ForEach($Created->GetSubAssets('Cpp/Header') As $Asset)
      {
        $Add=[];
        if($Asset->HasForm())
          $Add['FileType']='CppForm';
        $this->_AddFile('ClInclude' ,$Asset, $Add);
      }
    }
    
    Function AddResX($Created)
    {
      $Add=[
        'DependentUpon' =>['File', $Created->GetDependentUpon ()->GetFullPath()],
        'SubType'       =>         $Created->GetSubType       (),
      ];
      $this->Add('EmbeddedResource' ,$Created, $Add);
    }

    Function AddUsingPath  ($Created)
    {
      //TODO???
    }
    
    Function AddUsing      ($Created)
    {
      if($Created->IsSystem())
      {
        $Add=[
          'CopyLocalSatelliteAssemblies' =>true,
          'ReferenceOutputAssembly'      =>true,
        ];
        $this->Using[$Created->GetKey()]=[$Created->GetLocalPathNick(), $Add];
        $this->NMakeForcedUsingAssemblies [$Created->GetKey()]=$Created->GetLocalPath();
        $this->NMakeAssemblySearchPath    [$Created->GetDirFullPath()]=StrTr($Created->GetDirFullPath(), '/', '\\');
      }
      // TODO: only system $this->Log('Debug', '<Using Include="', $Created->GetFileNick(),'"\>');
     #<Reference Include="System.Data">
     #  <CopyLocalSatelliteAssemblies>true</CopyLocalSatelliteAssemblies>
     #  <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
     #</Reference>
    }
    
    Function FrameworkVersion    ($Created)
    {
      $this->FrameworkVersion=$Created->Version;
    }
    
    Function AddDepends    ($Created, $IsPublic)
    {
      $AssetInstance =$Created->Instance;
      if(!$AssetInstance)
        return;
      $BuilderModule =$AssetInstance->GetModule();
      $DependsModlue =$this->GetManager()->GetModule($BuilderModule);
      $Instance      =$this->GetInstance($Created);
      $DepsInstance  =$DependsModlue->GetInstance($AssetInstance);
      $Instance->AddDepends($DepsInstance);
      if($AssetInstance->IsExternalModule())
        $DependsModlue->IsExternal=true;
        
      $Name=$BuilderModule->GetName();
      if($this->Depends[$Name]['Param']['Public']??false)
        $IsPublic=true;
      $this->Depends[$Name]=[
        'Param'=>[
          'Public'                  =>$IsPublic ,
          'LinkLibraryDependencies' =>false     ,
        ]
      ];
      $this->DependsModules[$Name]=$DependsModlue;
    }
    
    Function UpdateConfigMap($Key, $NoConfigMap=false)
    {
      $Instance=$this->Instances[$Key]?? null;
      if(!$Instance)
      {
        $this->Log('Error', 'Target ', $Key, ' not found for module ', $this->ModuleName);
        return;
      }
      $Instance->UpdateConfigMap($Key, '', $NoConfigMap);
    }
    
    Function AddToConfigMap($FromKey, $ToKey, $ProjectsPath, $NoConfigMap)
    {
      $this->ConfigMap[$FromKey][$ProjectsPath]??=[$ToKey, $NoConfigMap];
      if(!$NoConfigMap && $this->ConfigMap[$FromKey][$ProjectsPath][1])
        $this->ConfigMap[$FromKey][$ProjectsPath][1]=$NoConfigMap;
    }
    
    Var $Exists=[];
    
    Function AddExists($Created)
    { // TODO: ?
      $this->Exists=[
        'File'      =>$Created->GetFullPath() ,
        'GUID'      =>$Created->GUID          ,
        'ConfigMap' =>$Created->ConfigMap     ,
        'Type'      =>$Created->ProjectType   ,
      ];
    }
    
    Var $DependsWasUpdated=false;
    
    Function UpdateDepends()
    {
      if($this->DependsWasUpdated)
        return;
      $this->DependsWasUpdated=true;
      ForEach($this->DependsModules As $Module)
      {
         $Module->UpdateDepends();
         $this->SourcePath +=$Module->SourcePath ;
         $this->Includes   +=$Module->Includes   ;
      }
    }
    
    Function UpdateVSProject($Solution)
    {
      if($Exists=$this->Exists)
      {
        $Solution->AddExists($this->ModuleName, $Exists);
        return;
      }
      $Manager=$this->GetManager();
      $VsProject=$Solution->AddProject($this->ModuleName, []);
      
      $VsProject->Using    =$this->Using    ;
      $VsProject->Props['TargetFrameworkVersion' ]=         $this->FrameworkVersion ;
      $VsProject->Props['CLRSupport'             ]=!Is_Null($this->FrameworkVersion);
      
      $VsProject->Props['WBuild_Module' ]=$this->ModuleName ;
      $VsProject->Props['WBuild_Exec'   ]=['SolutionDir', RealPath(__Dir__.'/../../../../Build.bat')];
    //$VsProject->Props['WBuild_Exec'   ]=['SolutionDir', RealPath(__Dir__.'/Test.bat')];
    
      $VsProject->Props+=$this->VS['Props']??[] ;
      $VsProject->AddImports[__Dir__.'\WBuild.vcxproj.compiler']=false;
      
      $VsProject->SourcePath =$this->SourcePath ;
      $VsProject->Includes   =$this->Includes   ;
      $VsProject->Sources    =$this->Files      ;
      $VsProject->NMakeForcedUsingAssemblies =$this->NMakeForcedUsingAssemblies ;
      $VsProject->NMakeAssemblySearchPath    =$this->NMakeAssemblySearchPath    ;
      If(False) // TODO:?
        ForEach($this->Depends As $Name=>$Args)
          $VsProject->AddDepends($Name, $Args);
      if($this->ConfigMap)
      {
        $ConfigMap=[];
        $ConfigInfo=$this->GetManager()->ConfigInfo;
        $IsDifferent=False;
        ForEach($this->ConfigMap As $FromKey=>$List)
        {
          $Key='';
          $NoConfigMap=true;
          ForEach($List As $ProjectsPath=>[$ToKey, $ToNoConfigMap])
          {
            if(!$NoConfigMap && !$ToNoConfigMap && $Key!==$ToKey)
              $IsDifferent=true;
            if($NoConfigMap)
            {
              $Key         =$ToKey         ;
              $NoConfigMap =$ToNoConfigMap ;
            }
          }
          $ConfigMap[$FromKey]=$Key;
        }
        if($IsDifferent)
          $this->Log('Error', 'Keymap has different ToKey values for module ', $this->ModuleName)
            ->Debug($this->ConfigMap);
        $VsProject->DebugConfigMap=$this->ConfigMap;
        $VsProject->ConfigMap['Map']=$ConfigMap;
      }
      
      ForEach($this->Instances As $Instance)
         $Instance->UpdateVSProject($VsProject);
    }
  }
?>