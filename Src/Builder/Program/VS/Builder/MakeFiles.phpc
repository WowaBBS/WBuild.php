<?
  $this->Parent_Class('/Object');
  $this->Load_Type('/FS/Path');
  
  class C_Builder_Program_VS_Builder_MakeFiles extends C_Object
  {
    Var $OnAsset;
    Var $Modules=[];
  
    Function _Init(Array $Args)
    {
      $this->OnAsset=$this->Create_Object('/Builder/Program/VS/Builder/OnAsset', ['Manager'=>$this]);
      Parent::_Init($Args);
    }
    
    Protected Function _CreateFolder($Module)
    {
      return $this->_CreateModule($Module); // TODO: Duplicate
    }
    
    Protected Function _CreateModule($Module)
    {
      return $this->Modules[$Module]=
        $this->Create_Object('/Builder/Program/VS/Builder/Module', [
          'Manager'=>$this, 
          'Module'=>$Module
        ]);
    }
    
    Function MakeFolders()
    {
      ForEach($this->Modules As $Module)
        $Module->MakeParent();
    }
    
    Function GetFolder($Module)
    {
      return $this->Modules[$Module]?? $this->_CreateFolder($Module);
    }
    
    Function GetModule($Module)
    {
      $ModuleName=$Module->GetName();
      return $this->Modules[$ModuleName]?? $this->_CreateModule($ModuleName);
    }
    
    Function _Begin($OutFile)
    {
      $XML=$this->Loader->Create_Object('/XML/Builder', [$OutFile]);
      $XML->XML();
      $XML->Tag('Project')
      //->Attr('DefaultTargets' ,'Build' )
        ->Attr('ToolsVersion'   ,'4.0'   )
        ->Attr('xmlns'          ,'http://schemas.microsoft.com/developer/msbuild/2003');
      return $XML;
    }

    Function _RelPath($BaseDir, $File)
    {
    //echo $BaseDir[1], ';', StrToLower(SubStr($BaseDir, 0, 2)), ';', StrToLower(SubStr($File, 0, 2)), "\n";
      if($BaseDir[1]!==':' || StrToLower(SubStr($BaseDir, 0, 2))===StrToLower(SubStr($File, 0, 2)))
      {
        $BaseDir=TPath::Create($BaseDir);
        $File=TPath::Create($File);
        $File->PathFrom($BaseDir);
        $FileStr=$File->ToString();
      }
      else
        $FileStr=$File;
      return StrTr($FileStr, '/', '\\');
    }
    
    Function Sort()
    {
      KSort($this->Modules);
      ForEach($this->Modules As $Module)
        $Module->Sort();
    }

    Function CreateXmlAdd($XML, $BaseDir, $Add)
    {
      ForEach($Add As $TagName=>[$TagType, $Value])
      {
        switch($TagType)
        {
        Case 'Text': Break;
        Case 'Bool': $Value=$Value?'true':'false'; Break;
        Case 'File': $Value=$this->_RelPath($BaseDir, $Value); Break;
        }
        $XML->Tag($TagName)->Text($Value)->End();
      }
    }
    
    Function CreateFiles($BaseDir, $OutFile)
    {
      $XML=$this->_Begin($OutFile);
      
      $Includes =[];
      $Files    =[];
      $Defines  =[];
      $Using    =[];
      $NMakeForcedUsingAssemblies =[];
      $NMakeAssemblySearchPath    =[];
      ForEach($this->Modules As $Module)
      {
        $Includes +=$Module->Includes ;
        $Files    +=$Module->Files    ;
        $Using    +=$Module->Using    ;
        $NMakeForcedUsingAssemblies +=$Module->NMakeForcedUsingAssemblies ;
        $NMakeAssemblySearchPath    +=$Module->NMakeAssemblySearchPath    ;
        ForEach($Module->Defines As $Condition=>$Defs)
          if(IsSet($Defines[$Condition]))
            $Defines[$Condition]+=$Defs;
          else
            $Defines[$Condition] =$Defs;
      }
      
      if($Using)
      {
        $XML->Tag('ItemGroup');
        ForEach($Using As [$UsingItem, $Add])
        {
          $XML->Tag('Reference')->Attr('Include', $UsingItem);
          $this->CreateXmlAdd($XML, $BaseDir, $Add);
          $XML->End();
        }
        $XML->End();
      }
      if($NMakeForcedUsingAssemblies)
      {
        $NMakeForcedUsingAssemblies='$(NMakeForcedUsingAssemblies);'.Implode(';', $NMakeForcedUsingAssemblies);
      //ForEach($Using As [$UsingItem, $Add])
      //  $NMakeForcedUsingAssemblies.=';'.$UsingItem;
        $XML->Tag('PropertyGroup');
          $XML->Tag('NMakeForcedUsingAssemblies')->Text($NMakeForcedUsingAssemblies)->End();
        $XML->End();
      }
      if($NMakeAssemblySearchPath)
      {
        $NMakeAssemblySearchPath='$(NMakeAssemblySearchPath);'.Implode(';', $NMakeAssemblySearchPath);
      //ForEach($Using As [$UsingItem, $Add])
      //  $NMakeAssemblySearchPath.=';'.$UsingItem;
        $XML->Tag('PropertyGroup');
          $XML->Tag('NMakeAssemblySearchPath')->Text($NMakeAssemblySearchPath)->End();
        $XML->End();
      }
      
      ForEach($Includes As $Key=>$Include)
        $Includes[$Key]=$this->_RelPath($BaseDir, $Include);
      $Includes=Implode(';', $Includes);
      $XML->Tag('PropertyGroup');
        $XML->Tag('SourcePath')->Text($Includes)->End();
      $XML->End();
      $XML->Tag('PropertyGroup');
        $XML->Tag('NMakeIncludeSearchPath')->Text('$(NMakeIncludeSearchPath);'.$Includes)->End();
      $XML->End();
      

      ForEach($Defines As $Condition=>$Defs)
      {
        $Defs=Implode(';', $Defs);
      //$Defines[$Condition]=$Defs;
        $XML->Tag('PropertyGroup')->Attr('Condition', $Condition);
          $XML->Tag('NMakePreprocessorDefinitions')->Text('$(NMakePreprocessorDefinitions);'.$Defs)->End();
        $XML->End();
      }
      
      $XML->Tag('ItemGroup');
      
      ForEach($Files As $k=>[$Tag, $File, $Add])
      {
        $XML->Tag($Tag)->Attr('Include', $this->_RelPath($BaseDir, $File));
        $this->CreateXmlAdd($XML, $BaseDir, $Add);
        $XML->End();
      }
        
      $XML->End();
      $XML->End();
      $XML->Done();
    }
    
    Function Generate_GUID($Str) // TODO: \Builder\VS_Proj\Lib\GUIDs.php
    {
      $Str=StrToUpper(md5($Str));
      $Str=
        '{'.SubStr($Str,  0,  8).
        '-'.SubStr($Str,  8,  4).
        '-'.SubStr($Str, 12,  4).
        '-'.SubStr($Str, 16,  4).
        '-'.SubStr($Str, 20, 12).
        '}';
      return $Str;
    }
    
    Function BeginConditions(... $Conditions)
    {
      ForEach($this->Modules As $Module)
        $Module->BeginConditions(... $Conditions);
    }
    
    Function EndConditions(... $Conditions)
    {
      ForEach($this->Modules As $Module)
        $Module->EndConditions(... $Conditions);
    }
    
    Function CreateFilters($BaseDir, $OutFile)
    {
      $XML=$this->_Begin($OutFile);
      $XML->Tag('ItemGroup');
      $Files=[];
      ForEach($this->Modules As $Module)
        ForEach($Module->Files As $k=>[$Tag, $File])
          $Files[$k][$Module->GetPath()]=[$Tag, $File, $Module->GetPath()];
      
      ForEach($Files As $k=>$List)
      {
        [$Tag, $File, $Module]=End($List);
        $File=$this->_RelPath($BaseDir, $File);
        if(Count($List)!=1)
        {
          echo '[Error] File contains in several modules, ', $File, "\n";
          ForEach($List As [$Tag, $_File, $Module])
            echo '  ', $Tag, ' ', $Module, "\n";
        }
        $XML
          ->Tag($Tag) 
            ->Attr('Include', $File)
            ->Tag('Filter')
              ->Text($Module)
            ->End()
          ->End(); 
      }
      $XML->End();
      
      $XML->Tag('ItemGroup');
      ForEach($this->Modules As $Module)
        $XML
          ->Tag('Filter') 
            ->Attr('Include', $Module->GetPath())
            ->Tag('UniqueIdentifier')
              ->Text($this->Generate_GUID('ModulePath'.$Module->GetPath()))
            ->End()
          ->End(); 
      $XML->End();
      
      $XML->End();
      $XML->Done();
    }
  }
?>