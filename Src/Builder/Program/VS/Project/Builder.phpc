<?
  $Loader->Parent_Class('/XML/Builder');
  
  class C_Builder_Program_VS_Project_Builder extends C_XML_Builder  //implements ArrayAccess
  {
    Var $BaseDir     ;
    Var $SolutionDir ;
  
    Function _Init(Array $Args)
    {
      $Project=$Args['Project'];
      
      $this->BaseDir     =$Project? $Project->AbsPath     ():$Args['BaseDir'     ];
      $this->SolutionDir =$Project? $Project->SolutionDir ():$Args['SolutionDir' ];
      
    //$Args[0]=$this->Create_Object('/Stream/Fifo');
      $this->SelfCloseTag =' />';
      $this->EndLine      ="\r\n";
      Parent::_Init($Args);
      if($Project)
      {
        if($Args['Filters']?? false)
          $Project->MakeFilters($this);
        else
          $Project->Make($this);
      }
    }
    
    Function ItemGroup($Label=null)
    {
      return $this->Tag('ItemGroup')->AttrMap(['Label'=>$Label]);
    }
    
    Function WriteLnEmpty()
    {
      return $this->Text($this->EndLine.'  ');
    }

    Function _SolutionDirRelPath ($File) { return Static::__RelPath($File, $this->SolutionDir , '$(SolutionDir)'); }
    Function _RelPath            ($File) { return Static::__RelPath($File, $this->BaseDir                       ); } 
    
    Static Function __RelPath($File, $FromDir, $AddMacro='')
    {
      $FromDisk    =$FromDir[1]===':'? StrToLower(SubStr($FromDir, 0, 2)):'';
    //$this->log('Debug', $BaseDir[1], ';', StrToLower(SubStr($BaseDir, 0, 2)), ';', StrToLower(SubStr($File, 0, 2)));
      $IsMacro     =StrLen($File) && $File[0]==='$';
      $IsOtherDisc =$FromDisk!=='' && $FromDisk!==StrToLower(SubStr($File, 0, StrLen($FromDisk)));
      if(!$IsMacro && !$IsOtherDisc)
      {
        $BaseDir=TPath::Create($FromDir);
        $File=TPath::Create($File);
        $File->PathFrom($BaseDir);
        $FileStr=$AddMacro.$File->ToString();
      }
      else
        $FileStr=$File;
      return StrTr($FileStr, '/', '\\');
    }
    
    Function PropertyGroup($Label=null, $Condition=null, $Vars=null)
    {
      $this->Tag('PropertyGroup')->AttrMap(['Condition'=>$Condition, 'Label'=>$Label]);
      if(!Is_Null($Vars))
      {
        $this->AddVars($Vars);
        if(!$Vars)
          $this->WriteLnEmpty();
        $this->End();
      }
      return $this;
    }
    
    Function Import($File, $Condition=null, $Label=null)
    {
      $File=$this->_RelPath($File);
      if(Is_Bool($Condition))
        if($Condition===true)
          $Condition='exists(\''.$File.'\')';
        Else
          $Condition=null;
      return $this->Tag('Import')->AttrMap([
        'Project'   =>$File      ,
        'Condition' =>$Condition ,
        'Label'     =>$Label     ,
      ])->End();
    }
    
    Function Imports($Files)
    {
      ForEach($Files As $k=>$v)
      {
        if(!Is_String($k))
        {
          $k=$v;
          $v=[];
        }
        if(!Is_Array($v))
          $v=['Condition'=>$v];
        $this->Import($k, $v['Condition']?? null, $v['Label']?? null);
      }
    }
    
    Function AddVars($Vars)
    {
      ForEach($Vars As $k=>$v)
      {
        if(Is_Null($v)) continue;
        if(Is_Bool($v)) $v=$v? 'true':'false'; else
        if(Is_Array($v))
        {
          switch($v[0]?? '')
          {
          Case 'Text'        : $v=$v[1]; Break;
          Case 'Bool'        : $v=$v[1]?'true':'false'; Break;
          Case 'SolutionDir' : $v=$this->_SolutionDirRelPath($v[1]); Break;
          Case 'File'        : $v=$this->_RelPath($v[1]); Break;
          Case '':
            $this->Tag($k);
            $this->AddVars($v);
            $this->End();
            continue 2;
          Default:
            $this->Log('Error', 'Unknown type ', $v[0]);
            continue 2;
          }
        }
        $this->TagTree([$k ,$v]);
      }
      return $this;
    }
    
    Function GetMacroCurrentTag() { return '$('.$this->GetLastTagName().')'; }
    
    Function _StrList(Array $List, Int $Overload=1, String $Macro='')
    {
      if(StrLen($Macro))
      {
        if($Overload>0)
          Array_UnShift($List, $Macro);
        else
          $List[]=$Macro;
      }
      return Implode(';', $List);
    }
    
    Function _Defines(Array $List, Int $Overload=1, String $Macro='')
    {
      ForEach($List As $k=>&$v)
        if(Is_String($k) && $v!==false)
          $v=$k.'='.($v===true? '':$v);
      return $this->_StrList($List, $Overload, $Macro);
    }
    
    Function StrList(Array $List, Int $Overload)
    {
      $this->Text($this->_StrList($List, $Overload, $Overload? $this->GetMacroCurrentTag(): ''));
      return $this;
    }
    
    Function _RelPaths(Array $List)
    {
      ForEach($List As $Key=>$Path)
        $List[$Key]=$this->_RelPath($Path);
      return $List;
    }
    
    Function _PathList(Array $List, Int $Overload, String $Macro='')
    {
      return $this->_StrList($this->_RelPaths($List), $Overload, $Macro);
    }
    
    Function PathList(Array $List, Int $Overload)
    {
      return $this->StrList($this->_RelPaths($List), $Overload);
    }
    
  //****************************************************************
  // Magic

    Function __toString()
    {
      return $this->GetStream()->Get_Content();
    }
    
  //****************************************************************
  }
?>