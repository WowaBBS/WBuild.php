<?
  $Loader->Parent_Class('/XML/Builder');
  
  class C_Builder_Program_VS_Project_Builder extends C_XML_Builder  //implements ArrayAccess
  {
    Var $Result;
  
    Function _Init(Array $Args)
    {
      $Args[0]=$this->Result=$this->Create_Object('/Stream/Fifo');
      $this->SelfCloseTag=' />';
      Parent::_Init($Args);
      if(IsSet($Args['Info']))
        $this->Make($Args['Info'], $Args['Project']?? []);
    }
    
    Function ItemGroup($Label=null)
    {
      return $this->Tag('ItemGroup')->AttrMap(['Label'=>$Label]);
    }

    Function PropertyGroup($Label=null, $Condition=null, $Vars=null)
    {
      $this->Tag('PropertyGroup')->AttrMap(['Condition'=>$Condition, 'Label'=>$Label]);
      if(!Is_Null($Vars))
      {
        ForEach($Vars As $k=>$v)
          $this->Tag($k)->Text($v)->End();
        if(!$Vars)
          $this->Text("\n  ");
        $this->End();
      }
      return $this;
    }
    
    Function Import($File)
    {
      return $this->Tag('Import')->AttrMap(['Project'=>$File])->End();
    }
    
  //****************************************************************
  
    Function Make(C_Builder_Program_VS_Solution $Info, $Proj)
    {
      $Res=$this;
      $Solutions=$Proj->GetSolutions();
      $Res->XML();
      $Res->Tag('Project')->AttrMap([
        'DefaultTargets' =>'Build' ,
        'ToolsVersion'   =>'4.0'   ,
        'xmlns'          =>'http://schemas.microsoft.com/developer/msbuild/2003',
      ]);
      
      $Res->ItemGroup('ProjectConfigurations');
      ForEach($Solutions As $Solution) 
      {
        $Res->Tag('ProjectConfiguration')->AttrMap(['Include'=>$Solution['Solution']]);
        $Res->Tag('Configuration' )->Text($Solution['Config'   ])->End();
        $Res->Tag('Platform'      )->Text($Solution['Platform' ])->End();
        $Res->End();
      } 
      $Res->End();
      
      $Res->PropertyGroup('Globals',null,[
        'ProjectGuid' =>$Proj->GUID    ,
        'Keyword'     =>'MakeFileProj' ,
        'ProjectName' =>$Proj->Name    ,
      ]);
      
      $Res->Import('$(VCTargetsPath)\Microsoft.Cpp.Default.props');
      
      ForEach($Solutions As $Solution)
        $Res->PropertyGroup('Configuration', $Solution['Condition'], [
          'ConfigurationType'=>'Makefile',
          'UseDebugLibraries'=>'true',
        ]+$Solution['Props']);
      
      $Res->TagTree($Proj->CustomProps);
      $Res->Import('$(VCTargetsPath)\Microsoft.Cpp.props');
      $Res->Tag('ImportGroup')->Attr('Label', 'ExtensionSettings')->Text("\n  ")->End();
      
      ForEach($Solutions As $Solution)
        $Res->Tag('ImportGroup')
          ->Attr('Label'     ,'PropertySheets')
          ->Attr('Condition' ,$Solution['Condition'])
          ->Tag('Import')->AttrMap([
            'Project'   =>         '$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props',
            'Condition' =>'exists(\'$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props\')',
            'Label'     =>'LocalAppDataPlatform',
          ])
          ->End()
        ->End();
      
      $Res->PropertyGroup('UserMacros',null,[]);
      $Res->TagTree($Proj->NMakeCompiler);

      ForEach($Solutions As $Solution)
        $Res->PropertyGroup(null, $Solution['Condition'], [
          'NMakeBuildCommandLine'        =>'$(NMakeBuildCommandLine)'        ,
          'NMakeOutput'                  =>'$(NMakeOutput)'                  ,
          'NMakeCleanCommandLine'        =>'$(NMakeCleanCommandLine)'        ,
          'NMakeReBuildCommandLine'      =>'$(NMakeReBuildCommandLine)'      ,
        # 'NMakePreprocessorDefinitions' =>'$(NMakePreprocessorDefinitions)' ,
        ]);
        
      $Res->Tag('ItemDefinitionGroup')->Text("\n  ")->End();
      
      If(False) // Files
        $Res->Tag('ItemGroup')
          ->Tag('None')->AttrMap(['Include'=>'readme.txt'])->End()
          ->End();
      
      if($DependsList=$Proj->GetDepends())
      {
        $Res->Tag('ItemGroup');
        $AbsPath=$Proj->AbsPath();
        ForEach($DependsList As $Depends)
        {
          $DepProj=$Depends['Proj'];
          $Res->Tag('ProjectReference')->Attr('Include', $DepProj->RelFilePath($AbsPath));
            $Res->TagTree(['Project'                      ,$DepProj->GUID  ]);
            ForEach($Depends['Param'] As $k=>$v)
              $Res->TagTree([$k ,$v]);
          #?$Res->TagTree(['Name'                         ,'ProjectA'      ]);
          # $Res->TagTree(['Private'                      ,'false'         ]);
          # $Res->TagTree(['CopyLocalSatelliteAssemblies' ,'true'          ]);
          # $Res->TagTree(['ReferenceOutputAssembly'      ,'true'          ]);
          #?$Res->TagTree(['LinkLibraryDependencies'      ,'true'          ]);
          #?$Res->TagTree(['UseLibraryDependencyInputs'   ,'false'         ]);
          #?$Res->TagTree(['OutputItemType'               ,'Content'       ]);
          #?$Res->TagTree(['CopyToOutputDirectory'        ,'PreserveNewest']);
          $Res->End('ProjectReference');
        }
        $Res->End('ItemGroup');
      }
          
/* TODO:
  <ItemGroup>
    <Reference Include="System">
      <CopyLocalSatelliteAssemblies>true</CopyLocalSatelliteAssemblies>
      <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
    </Reference>
    <Reference Include="System.Core" />
    <Reference Include="System.Data">
      <CopyLocalSatelliteAssemblies>true</CopyLocalSatelliteAssemblies>
      <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
    </Reference>
    <Reference Include="System.Data.Linq" />
    <Reference Include="System.Drawing">
      <CopyLocalSatelliteAssemblies>true</CopyLocalSatelliteAssemblies>
      <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
    </Reference>
    <Reference Include="System.Management" />
    <Reference Include="System.Windows.Forms">
      <CopyLocalSatelliteAssemblies>true</CopyLocalSatelliteAssemblies>
      <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
    </Reference>
    <Reference Include="System.Xml">
      <CopyLocalSatelliteAssemblies>true</CopyLocalSatelliteAssemblies>
      <ReferenceOutputAssembly>true</ReferenceOutputAssembly>
    </Reference>
  </ItemGroup>
*/

      $Res->Import('$(VCTargetsPath)\Microsoft.Cpp.targets');
      $Res->Tag('ImportGroup')
        ->Attr('Label', 'ExtensionTargets')
        ->Text("\n  ")
        ->End();
      
      $Res->End('Project');
    }
    
  //****************************************************************
  // Magic

    Function __toString()
    {
      return $this->Result->Get_Content();
    }
    
  //****************************************************************
  }
?>