<?
  $Loader->Parent_Class('/Object');
  
  class C_Builder_Program_VS_Solution_Builder extends C_Object implements ArrayAccess  //ArrayIterator
  {
    Var $Lines=["\xEF\xBB\xBF"]; // TODO: Stream
    Var $Tab='';
    Var $Sections=[];
  
    Function _Init(Array $Args)
    {
      Parent::_Init($Args);
      if(IsSet($Args['Info']))
        $this->Make($Args['Info']);
    }
    
    Function WriteLn(... $List)
    {
      $this->Lines[]=$this->Tab.Implode($List);
    }
    
    Function Section($Name, $Arg=null, $Value=null)
    {
      $Value =Is_Null($Value )? []:[' = ', $Value];
      $Arg   =Is_Null($Arg   )? []:['(', $Arg, ')'];
      $this($Name, ...$Arg, ...$Value);
      $this->Sections[]=$Name;
      $this->Tab.="\t";
    }
    
    Function GlobalSection($Arg, $Value)
    {
      $this->Section('GlobalSection', $Arg, $Value);
    }
    
    Function EndSection(?String $CheckName=null)
    {
      $this->Tab=SubStr($this->Tab, 0, -1);
      $Name=Array_Pop($this->Sections);
      if(!Is_Null($CheckName))
        if($Name!==$CheckName)
          $this->Log('Error', 'Section ', $Name, ' is different from ', $CheckName);
      $this('End', $Name);
    }

  //****************************************************************
  // Magic

    Function __invoke(... $Args)
    {
      return $this->WriteLn(...$Args);
    }
    
    Function __toString()
    {
      return Implode("\r\n", $this->Lines)."\r\n";
    }
    
  //****************************************************************
  // ArrayAccess interface
    Function Error()
    {
      $this->Log('Fatal', 'Unaceptable behavior');
    }

    Public Function offsetExists     ($k):bool { return Error(); } 
    Public Function offsetGet        ($k)      { return Error(); }
    Public Function offsetSet        ($k ,$v)
    {
      if(!Is_Array($v))
        $v=[$v];
      if(Is_Null($k))
      {
        $this->WriteLn(...$v);
      }
      else
      {
        if(Is_Array($k))
          $k=Implode('.', $k);
        $this->WriteLn($k, ' = ', ...$v);
      }
    }
    Public Function offsetUnset      ($k)      { Error(); }
    
  //****************************************************************
  
    Function Make(C_Builder_Program_VS_Solution $Info)
    {
      $Res=$this;
      $Projects=$Info->GetProjects();
      $Is12=$Info->Version>=12.0;
      $HasFolders=false;
      
      $Res('Microsoft Visual Studio Solution File, Format Version ', $Info->GetVersionStr());
      $Res('# ', $Info->Compiler);
      if($Is12)
      {
        $Res['VisualStudioVersion'        ]=$Info->VisualStudioVersion        ;
        $Res['MinimumVisualStudioVersion' ]=$Info->MinimumVisualStudioVersion ;
      }
      
      $AbsPath=$Info->AbsPath();
      ForEach($Projects As $Project)
      {
        $Name=$Project->GetName($Is12? null:'-');
        if($Project->IsFolder())
        {
          if($Is12)
          {
            $Path=$Name;
            $HasFolders=true;
          }
          else
            continue;
        }
        else
          $Path=$Project->RelFilePath($AbsPath);
        
        $Res->Section('Project',
          '"'.$Project->TypeGUID.'"',
          '"'.$Name.'", "'.$Path.'", "'.$Project->GUID.'"'
        );
        if($Is12 && $Project->IsFile() && ($DependsList=$Project->GetDepends()))
        {
          $Res->Section('ProjectSection', 'ProjectDependencies', 'postProject');
          ForEach($DependsList As $Depends)
          {
            $DepProj=$Depends['Proj'];
            $GUID=$DepProj->GUID;
            $Res[$GUID]=$GUID;
          }
          $Res->EndSection();
        }
        $Res->EndSection();
      }
      
      $Res->Section('Global');
      
      $Res->GlobalSection('SolutionConfigurationPlatforms', 'preSolution');
      ForEach($Info->GetSortSolutions() As $Solution)
        if(!$Solution['Hidden'])
          $Res[$Solution['SlnSolution']]=$Solution['SlnSolution'];
      $Res->EndSection();
      
      $Res->GlobalSection('ProjectConfigurationPlatforms', 'postSolution');
      ForEach($Projects As $Project)
        if($Project->IsFile())
          ForEach($Project->GetSortSolutions() As $Item)
            if(!$Item['Hidden'])
            {
              $Key=$Project->GUID.'.'.$Item['SlnSolution'];
              $Res[$Key.'.ActiveCfg']=$Item['Solution'];
              If($Item['HasBuild'])
                $Res[$Key.'.Build.0']=$Item['Solution'];
            }
      $Res->EndSection();
      
      $Res->GlobalSection('SolutionProperties', 'preSolution');
      $Res['HideSolutionNode']='FALSE';
      $Res->EndSection();

      if($HasFolders)
      {
        $Res->GlobalSection('NestedProjects', 'preSolution');
        ForEach($Projects As $Project)
          if($Folder=$Project->GetFolder())
            $Res[$Project->GUID]=$Folder->GUID;
        $Res->EndSection();
      }

      $Res->GlobalSection('ExtensibilityGlobals', 'postSolution');
      $Res['SolutionGuid']=$Info->GUID;
      $Res->EndSection();
      
      $Res->EndSection();
    }
    
  //****************************************************************
  }
?>