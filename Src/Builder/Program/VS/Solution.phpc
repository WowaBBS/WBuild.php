<?
  $Loader->Parent_Class('/Object');
  
  class C_Builder_Program_VS_Solution extends C_Object
  {
  //Var $Version                    = 11.0;
    Var $Version                    = 12.0;
    Var $PlatformToolset            = 'v141';
    Var $ToolsVersion               = '15.0';
  //Var $Compiler                   = 'Visual C++ Express 2010';
    Var $Compiler                   = 'Visual Studio 15';
    Var $VisualStudioVersion        = '15.0.27130.2036';
    Var $MinimumVisualStudioVersion = '10.0.40219.1';
    
    Static $Studios=[
    //        [Version ,Compiler           ,PlatformToolset,ToolsVersion ,VisualStudioVersion ,MinimumVisualStudioVersion
      '2010'=>[11.0    ,'Visual C++ Express 2010'  ,null   ,  '4.0'      ,''                  ,''             ],
      '2017'=>[12.0    ,'Visual Studio 15'         ,'v141' , '15.0'      ,'15.0.27130.2036'   ,'10.0.40219.1' ],
      '2019'=>[12.0    ,'Visual Studio Version 16' ,'v142' , '15.0'      ,'16.0.30503.244'    ,'10.0.40219.1' ],
      '2022'=>[12.0    ,'Visual Studio Version 17' ,'v143' , '15.0'      ,'17.6.33801.468'    ,'10.0.40219.1' ],
    ];
    
    Var C_Builder_Program_VS_GUIDs $GUIDs;
    Var                            $GUID ;
    Var C_Tmpl_Loader              $Template_Loader;

    Var $Platforms =[];
    Var $Configs   =[];
    Var $Projects  =[];
    Protected ?Array $Solutions     =null;
    Protected ?Array $SortSolutions =null;
    Protected ?Array $DefConfigMap  =null;
    
    Var $DefaultProjectType='C++';
    
    Var       String $Name     ='';
    Var       String $GUID_Key ='';
    
    Var       Array  $DefArgs=[];
    
    Protected String $AbsPath       ='';
    Protected String $VcxAbsPath    ='';
    
    Function _Init(Array $Args)
    {
      $StudioVer=$Args['Studio']?? '2022'; //TODO: 2022?
      $Studio=Static::$Studios[$StudioVer];
      if(!$Studio)
        $this->Log('Error', 'Studio version ',$StudioVer, ' is not supported:')->Debug(Array_Keys(Static::$Studios));
      else
      {
        $this->Version                    = $Studio[0];
        $this->Compiler                   = $Studio[1];
        $this->PlatformToolset            = $Studio[2];
        $this->ToolsVersion               = $Studio[3];
        $this->VisualStudioVersion        = $Studio[4];
        $this->MinimumVisualStudioVersion = $Studio[5];
      }
      
      $this->GUIDs=$this->Get_Singleton('/Builder/Program/VS/GUIDs');
      $TLoader=$this->Create_Object('/Tmpl/Loader');
      $Manager_Args=[
        'Parser'=>[
          'Tag_First' =>'{',
          'Tag_Last'  =>'}',
        ],
      ];
      $TLoader->Types['w2_cpp']=$this->Create_Object('/Tmpl/W2/Manager', $Manager_Args);
      $TLoader->Types['w2_cpp']->Cache=$Args['Template_Cache']?? ''; // Disable Cache
      $TLoader->DefType='w2_cpp';
      $this->Template_Loader=$TLoader;
      
      $this->Name          =$Args['Name'          ]?? 'NoName';
      $this->GUID_Key      =$Args['GUID_Key'      ]?? $this->Name;
      $this->DefArgs       =$Args['DefArgs'       ]?? [];
      $this->AbsPath       =NormPath($Args['AbsPath'    ]?? './', true);
      $this->VcxAbsPath    =NormPath($Args['VcxAbsPath' ]?? './', true);
      $this->GUID          =$this->GUIDs->Generate('SolutionGuid'.$this->GUID_Key);
      $this->SetPlatforms  ($Args['Platforms'     ]?? []);
      $this->SetConfigs    ($Args['Configs'       ]?? []);
      $this->AddProjects   ($Args['Projects'      ]?? []);

      Parent::_Init($Args);
    }
    
    Function GetVersionStr():String
    {
      $Res=(String)($this->Version*100);
      return SubStr($Res, 0, -2).'.'.SubStr($Res, -2);
    }
    
    Function AbsPath():String { return $this->AbsPath; }
    
    Function CalcRelPath($BaseDir, $File)
    {
    //echo $BaseDir[1], ';', StrToLower(SubStr($BaseDir, 0, 2)), ';', StrToLower(SubStr($File, 0, 2)), "\n";
      if(StrLen($BaseDir)!==0 && $BaseDir[1]!==':' || StrToLower(SubStr($BaseDir, 0, 2))===StrToLower(SubStr($File, 0, 2)))
      {
        $BaseDir=TPath::Create($BaseDir);
        $File=TPath::Create($File);
        $File->PathFrom($BaseDir);
        $FileStr=$File->ToString();
      }
      else
        $FileStr=$File;
      return StrTr($FileStr, '/', '\\');
    }
    
    Function AddProjects($List)
    {
      $Res=[];
      ForEach($List As $Id=>$Project)
      {
        Switch(Is_String($Id) && StrLen($Id)>1? $Id[0]:'')
        {
        Case '/': $Item=$this->AddFolder  (SubStr($Id, 1) ,$Project); break;
        Case ':': $Item=$this->AddExists  (SubStr($Id, 1) ,$Project); break;
        Default : $Item=$this->AddProject (       $Id     ,$Project); break;
        }
        $Res[$Id]=$Item;
      }
      return $Res;
    }
    
    Function AddExists($Id, $Args=[])
    {
      $Args['Solution'      ]   = $this ;
      $Args['Id'            ] ??= $Id;
      $Res=$this->Create_Object('/Builder/Program/VS/Project/ExistsFile', $Args);
    # If(IsSet($this->Projects[$Id]))
    #   $this->Log('Error', 'Project ', $Id, ' already exists');
      $this->Projects[$Id]=$Res;
      return $Res;
    }
    
    Function AddProject($Id, $Args=[])
    {
      $Args['Solution'      ]   = $this ;
      $Args['Id'            ] ??= $Id;
      $Args['Type'          ] ??= $this->DefaultProjectType ;
      $Args['AbsPath'       ] ??= $this->VcxAbsPath    ;
      $Args['SolutionDir'   ] ??= $this->AbsPath       ;

      $Args+=$this->DefArgs[$Args['Type']]??[];
      $Args+=$this->DefArgs['']??[];
      
      $Res=$this->Create_Object('/Builder/Program/VS/Project/File', $Args);
      If(IsSet($this->Projects[$Id]))
        $this->Log('Error', 'Project ', $Id, ' already exists');
      $this->Projects[$Id]=$Res;
      return $Res;
    }
    
    Function AddFolder($Id, $Args=[])
    {
      $Args['Solution'      ]   = $this ;
      $Args['Id'            ] ??= $Id;
    # $Args['AbsPath'       ] ??= $this->VcxAbsPath    ;
      $Res=$this->Create_Object('/Builder/Program/VS/Project/Folder', $Args);
      If(IsSet($this->Projects[$Id]))
        $this->Log('Error', 'Project ', $Id, ' already exists');
      $this->Projects[$Id]=$Res;
      return $Res;
    }
    
    Function GetProject($Id)
    {
      if(!IsSet($this->Projects[$Id]))
        $this->Log('Error', 'Project ', $Id, ' not found in ',Array_Keys($this->Projects));
      return $this->Projects[$Id];
    }
    
    Function Collisions_FixNames()
    {
      $Collisions=[];
      ForEach($this->GetProjects() As $Project)
        $Project->Collisions_Add($Collisions);
      
      $z=True;
      While($z)
      {
        $z=False;
        ForEach($Collisions As $Id=>$List)
        {
          If(Count($List)<2) Continue;
          $z=True;

          $this->Log('Debug', 'Collizion ', $Id);
          
          // Remove lowlevel project
          $Min=[];
          ForEach($List As $Project)
            $Min[]=$Project->GetFolderLevel();
          $Min=Min($Min);
          $Count=0;
          ForEach($List As $Project)
            If($Project->GetFolderLevel()===$Min)
              $Count++;
          If($Count===1)
            ForEach($List As $Project)
              If($Project->GetFolderLevel()===$Min)
                UnSet($List[$Project->Object_Id]);
          
          ForEach($List As $Project)
            $Project->Collisions_UpdateName($Collisions);
        //Break;
        }
      }
    }
    
    Function SaveToFiles(String $SlnOutDir, ?String $ProjDir=null)
    {
      $this->Collisions_FixNames();
      $ProjDir ??=$SlnOutDir;
      $Output=$SlnOutDir.$this->Name.'.sln';
      CreatePath(ExtractFilePath($Output));
      File_Put_Contents($Output, $this->Create_Object('/Builder/Program/VS/Solution/Builder', ['Info'=>$this]));
      
      ForEach($this->GetProjects() As $Project)
        $Project->Generate($ProjDir);
    }
    
    Function InvalidateSolutions()
    {
      $this->Solutions     =null;
      $this->SortSolutions =null;
      $this->DefConfigMap  =null;
    }

    Private Function _GetSortSolutions() { $Res=$this->GetSolutions(); KSort($Res); return $Res; }
    Function GetSolutions     () { return $this->Solutions     ??=$this->_GetSolutions     (); }
    Function GetSortSolutions () { return $this->SortSolutions ??=$this->_GetSortSolutions (); }
    Function GetDefConfigMap  () { return $this->DefConfigMap  ??=$this->_GetDefConfigMap  (); }
    Function GetProjects() { return $this->Projects; }
    
    Function SetConfigs($Configs)
    {
      $Res=[];
      ForEach($Configs As $Name=>$Item)
      {
        if(Is_Int($Name))
          $Name=$Item;
  
        if(Is_String($Item))
          $Item=['Config'=>$Item];
        
        $Hidden =$Item['Hidden' ]??False ; UnSet($Item['Hidden' ]);
        $Name   =$Item['Name'   ]??$Name ; UnSet($Item['Name'   ]);
        $Real   =$Item['Real'   ]??$Name ; UnSet($Item['Real'   ]);
        $Props  =$Item['Props'  ]??[]    ; UnSet($Item['Props'  ]);

        $Res[$Name]=[
          'Hidden' =>$Hidden ,
          'Name'   =>$Name   ,
          'Real'   =>$Real   ,
          'Props'  =>$Props  ,
        ];
        
        if($Item)
          $this->Log('Error', 'Unknown parameters of config: ', Implode(', ', Array_Keys($Item)));
      }
      $this->Configs=$Res;
      $this->InvalidateSolutions();
    }
    
    Function SetPlatforms($Platforms)
    {
      //Platforms
      $AllowPlatforms=[
        'Win32'         =>1,
        'x64'           =>1,
        'arm'           =>1,
        'Tegra-Android' =>1,
      ];
      
      $Res=[];
      ForEach($Platforms As $Name=>$Item)
      {
        if(Is_Int($Name))
          $Name=$Item;
  
        if(Is_String($Item))
          $v=['Platform'=>$Item];
        
        $Hidden =$Item['Hidden' ]??False       ; UnSet($Item['Hidden' ]);
        $Name   =$Item['Name'   ]??$Name       ; UnSet($Item['Name'   ]);
        $Real   =$Item['Real'   ]??$Name       ; UnSet($Item['Real'   ]);
        $Config =$Item['Config' ]??'{Var:Real}'; UnSet($Item['Config' ]);
        $Props  =$Item['Props'  ]??[]          ; UnSet($Item['Props'  ]);
        
        if(!$Hidden && !IsSet($AllowPlatforms[$Real]))
          $this->Log('Error', 'Platform ', $Real, ' is not allowed in solution');
        if($Item)
          $this->Log('Error', 'Unknown parameters of platform: ', Implode(', ', Array_Keys($Item)));
        $Res[$Name]=[
          'Hidden'  =>$Hidden  ,
          'Name'    =>$Name    ,
          'Real'    =>$Real    ,
          'Config'  =>$Config  ,
          'Props'   =>$Props   ,
        ];
      }
      $this->Platforms=$Res;
      $this->InvalidateSolutions();
    }
    
    Private Static Function _DoConfigMap($List)
    {
      $Res=[];
      ForEach($List As $Item)
        if(!$Item['Hidden'])
          $Res[$Name=$Item['Name']]=$Name;
      return $Res;
    }
    
    Private Function _GetDefConfigMap()
    {
      return [
        'Configs'   =>Static::_DoConfigMap($this->Configs   ),
        'Platforms' =>Static::_DoConfigMap($this->Platforms ),
      ];
    }
    
    Private Function _GetSolutions()
    {
      $TLoader=$this->Template_Loader;
      $Res=[];
      ForEach($this->Configs As $Config)
        ForEach($this->Platforms As $Platform)
        {
          $ConfigName     =$Config   ['Name'];
          $PlatformName   =$Platform ['Name'];
          $SlnSolution    =$ConfigName.'|'.$PlatformName;
          if(IsSet($Res[$SlnSolution]))
            $this->Log('Error', 'Key ', $SlnSolution, ' already exists');
          $SolutionConfig =$TLoader->String_Template($Config, $Platform['Config'])->Exec_To_Str($Config);
//        $SolutionConfig =$Platform['Prefix'].$Config['Real'].$Platform['Postfix'];
          $SolutionConfig =StrTr($SolutionConfig, ' /\\', '___');
          $SolutionName   =$SolutionConfig.'|'.$Platform['Real'];
          $SolutionProps=[
            'RealConfig'   => $Config   ['Name'],
            'RealPlatform' => $Platform ['Name'],
          ];
          $Res[$SlnSolution]=[
            'Hidden'       =>$Config['Hidden'] || $Platform['Hidden'],
            'ConfigName'   =>$Config   ['Name'],
            'PlatformName' =>$Platform ['Name'],
            'SlnSolution'  =>$SlnSolution,
            'KeySolution'  =>$SlnSolution,
            'Solution'     =>$SolutionName,
            'Config'       =>$SolutionConfig,
            'Platform'     =>$Platform['Real'],
            'Condition'    =>'\'$(Configuration)|$(Platform)\'==\''.$SolutionName.'\'',
            'Props'        =>$this->ProcessProps( 
              $SolutionProps,
              $Config   ['Props'],
              $Platform ['Props']
            ),
            'HasBuild'     =>true,
          ];
        }
      return $Res;
    }
    
    Function ProcessProps(...$PropsList)
    {
      $Res=[];
      $TLoader=$this->Template_Loader;
      ForEach($PropsList As $Props)
        ForEach($Props As $k=>$v)
        {
          if(Is_Bool($v)) $v=$v? 'true':'false'; else
          if(StrPos($v, '{')!==false)
            $v=$TLoader->String_Template($Res, $v)->Exec_To_Str($Res);
          $Res[$k]=$v;
        }
      return $Res;
    }
  }
?>