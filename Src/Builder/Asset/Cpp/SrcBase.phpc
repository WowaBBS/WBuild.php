<?
  $Loader->Parent_Class('/Builder/Asset/FS/File');

  class C_Builder_Asset_Cpp_SrcBase extends C_Builder_Asset_FS_File
  {
    Var $Info=null;
    Var $NotFound=[];
  
    Function GetInfo()
    {
      $NoLog=$this->IsExternalModule();
      $Hash=$this->GetHash();
      if($this->Info && $this->Info['Hash']===$Hash)
        return $this->Info;
      $Src=$this->Loader->Load_Class('/Builder/Compiler/CPP/Analyzer/Cpp');
      $Version=C_Builder_Compiler_CPP_Analyzer_Cpp::$Version;

      if($this->Parent)
      {
        $Key=$this->Parent->GetFullPath();
        $Cache=$this->GetModule()->EnumCache->AllocEnumDir($Key, 'Cpp', ['NoZero'=>true, 'Pad'=>1]);
        $Storage=$Cache->GetStorage($this->GetLocalPath().'.Info');
      }
      else
      {
        $Parent=$this->GetLocalPath();
        $Key=$Parent;
        $Cache=$this->GetModule()->EnumCache->AllocEnumDir($Key, 'CppO/', ['NoZero'=>true, 'Pad'=>1]);
        $Storage=$Cache->GetStorage('.Info');
      }
      
      $Vars=$Storage->GetVars();
    //$this->Log('Debug', 'Header: ', $this->GetLocalPath(), ' => ', $Storage->RelPath, ' :', Count($Vars));
      if($Vars &&
         $Vars['Version' ]===$Version &&
         $Vars['Hash'    ]===$Hash    )
      {
        $this->Info=$Vars;
        if(!$NoLog)
          ForEach($Vars['Warnings']As $Warning)
            $this->Log('Warning', ...$Warning[1])->File($this->GetFullPath(), $Warning[0]);
        return $this->Info;
      }
      
      $Src=$this->Create_Object('/Builder/Compiler/CPP/Analyzer/Cpp');
      $Src->NoLog=$NoLog;
      $Src->Process_FilePath($this->GetFullPath());
    //$Src->Debug([
    //  'Warnings'=>$Src->Warnings,
    //  'Includes'=>$Src->Includes,
    //]);
      $Vars=[
        'Version'  =>$Version       ,
        'Hash'     =>$Hash          ,
        'Warnings' =>$Src->Warnings ,
        'Includes' =>$Src->Includes ,
        'HasForm'  =>$Src->HasForm  ,
      ];
      $this->Info=$Vars;
      $Storage->SetVars($Vars);
      $Storage->Done();
      return $Vars;
    }
    
    Function HasForm() { return $this->GetInfo()['HasForm']; }
    Function GetIncludes() { return $this->GetInfo()['Includes']; }
    
    Var $CacheHeader=[];
    Var $RecursiveIncluding=false;
  
    Function _GetHeaders(Int $Id, $Includes, $Logger, $Stack):Array
    {
      $NoLog=$this->IsExternalModule();
      if($this->RecursiveIncluding)
      {
        if(!$NoLog)
        {
          $Stack2=Array_Reverse($Stack); //, true);
          $Logger->Log('Error', 'Recursive including header ', $this->GetLocalPath());
          $File=$this->GetFullPath();
          ForEach($Stack2 As $k=>$Item)
          {
            $Logger->Log('Note', $k)->File($Item);
            if($Item['File']===$File)
              break;
          }
        }
        return [];
      }
      if(IsSet($this->CacheHeader[$Id]))
        return $this->CacheHeader[$Id];
      $SearchArgs=[
        'InFile'=>[
          'File'=>$this->GetFullPath(),
          'Line'=>false,
        ],
      ];
      $this->RecursiveIncluding=true;
      $Res=[];
     #ForEach($Force As $Item)
     #  $Res+=$Item->_GetHeaders($Id, $Includes, $Logger, $Stack);
      $Dir=DirName($this->GetLocalPath());
      $Dir=$Dir==='.'? '':$Dir.'/';
      $Parent=$this->Parent;
      ForEach($this->GetIncludes() As $I=>$Line)
      {
        $SearchArgs['InFile']['Line']=(int)$Line;
        $Asset=null;
        If($Parent)
          $Asset=$Parent->SearchAsset($Dir.$I, 'Cpp/Header', $SearchArgs);
        If(!$Asset)
          ForEach($Includes As $Path)
            If($Asset=$Path->SearchAsset($I, 'Cpp/Header', $SearchArgs))
              Break;
        If($Asset)
        {
          If(!IsSet($Res[$Asset->GetKey()]))
          {
            $Res[$Asset->GetKey()]=$Asset;
            $Stack2=$Stack;
            $Stack2[]=$SearchArgs['InFile'];
            $Res+=$Asset->_GetHeaders($Id, $Includes, $Logger, $Stack2);
          }
        //Else
        //  $Logger->Log('Error', 'Recur');
        }
        ElseIf(IsSet($this->NotFound[$I]))
        {
          $this->NotFound[$I]=true;
          if(!$NoLog)
            $Logger->Log('Warning', 'Include ',$I, ' not found from ', $this->GetLocalPath());
        }
      }
      $this->CacheHeader[$Id]=$Res;
      $this->RecursiveIncluding=False;
      return $Res;
    }
    
    Function GetHeaders($Id, $Includes, $Logger)
    {
      if(!$Logger) $Logger=$this;
      return $this->_GetHeaders($Id, $Includes, $Logger, []);
    }

    Protected Function _CheckLazyDepsArgs(Array &$Res, Array $Args)
    {
      $Id       =$Args['Cpp/Id'       ]?? False; // TODO: Move into parent class
      $Includes =$Args['Cpp/Includes' ]?? False;
      
      if(!Is_Integer ($Id       )) $Res[]='Cpp/Id'       ;
      if(!Is_Array   ($Includes )) $Res[]='Cpp/Includes' ;
    }
    
    Protected Function _GetLazyDeps(Array &$Res, Array $Args)
    {
      $Id       =$Args['Cpp/Id'       ]?? False; // TODO: Move into parent class
      $Includes =$Args['Cpp/Includes' ]?? False;
      $Logger   =$Args['Logger'       ]?? null;
      
      $Res+=$this->GetHeaders($Id, $Includes, $Logger);
    }

  //****************************************************************
  // Debug

    Protected Function _Debug_Info(Array &$Res)
    {
      Parent::_Debug_Info($Res);
      UnSet($Res['CacheHeader']);
    }
    
  //****************************************************************
  };
?>