<?
  $Loader->Parent_Class('/Builder/Asset/Base');

  class C_Builder_Asset_Cpp_Compile extends C_Builder_Asset_Base
  {
    // Input assets
  
    Var $Compiler     ;
    Var $Sources      ;
    Var $Objects      ;
    Var $Defines      ;
    Var $ForceInclude ;
    Var $Includes     ;
    Var $Using        ;
    Var $UsingPath    ;
    Var $OutPath      ;

    Var $Items        ;
    
    Function CollectUsingAssets($WithHeaders=!false)
    {
      $Res=[
        $this->Compiler     ,
        $this->Sources      ,
        $this->Objects      ,
        $this->Defines      ,
        $this->ForceInclude ,
        $this->Includes     ,
        $this->Using        ,
        $this->UsingPath    ,
      ];
      if($WithHeaders)
      {
        $Includes=$this->Includes;
        ForEach($this->Sources As $Source)
        {
          $R=$Source->GetHeaders($this->Object_GetId(), $Includes, null);
          if(false) //TODO: Remove
          {
            $L=[$Source->GetModule()->GetName()];
            ForEach($R As $i)
              $L[]=$i->GetFullPath().' -> '.$i->GetModule()->GetName();
            $this->Debug([$Source->GetFullPath()=>$L]);
          }
          $Res[]=$R;
        }
      }
      return $Res;
    }
  
    Function _InitParam(Array &$Param)
    {
      $Outer=$this;
      parent::_InitParam($Param);
      
      $this->Compiler=$Outer->RequireAsset('Cpp/Compiler');
      $Compiler=$this->Compiler->Instance;
      
      if(!$Compiler)
      {
      //Var_Dump($Outer);
        throw new Exception('Haven`t any compiler');
      }
      $this->OutPath=$Compiler->CreateOutPath($Outer);
     #$Outer->Log('Debug', 'OutPath: ',$this->OutPath);
    
      $PathObjAsset=$Outer->CreateAsset('Cpp/ObjPath', $this->OutPath.'Obj');

      $ITypeCppObj       = 'Cpp/Obj'       ;
      $ITypeCppLib       = 'Cpp/Lib'       ;
      
      $DepUsing=$Param['DepUsing']??false; UnSet($Param['DepUsing']);
      if(!$DepUsing)
      {
        $ITypeCppObj='';
        $ITypeCppLib='';
      }
      
      $this->Sources=$Outer->ExtractAssets('Cpp/Src');

      $EnumCache=$Outer->GetModuleInstance()->EnumCache;

      $Items=[];
      ForEach($this->Sources As $SrcAsset)
      {
        [$Dir, $Name]=$SrcAsset->GetDirAndNick();
        $Num=$EnumCache->AllocNum($Dir, 'Obj', ['Pad'=>1]);
        $ObjNick=$Num.'/'.$Name;
        $ObjAsset=$Outer->CreateAsset('Cpp/Obj', ['Path'=>$Compiler->GetObjFile($ObjNick), '>Create'=>1]);
       #$Outer->Log('Debug', '  ObjNick: ',$ObjNick);
       #$Outer->Log('Debug', '  ObjAsset: ',$ObjAsset->GetFullPath());
        
        $Items[]=[
          'TaskPath'  =>$this->OutPath.'Task/Obj/'.$ObjNick,
          'SrcAsset' =>$SrcAsset,
          'ObjAsset' =>$ObjAsset,
        ];
      }
      
      $this->Items        =$Items ;
      $this->Objects      =$Outer->GetAssets  ($ITypeCppObj       );
      $this->Defines      =$Outer->GetAssets  ('Cpp/Define'       );
      $this->ForceInclude =$Outer->GetAssets  ('Cpp/ForceInclude' );
      $this->Includes     =$Outer->GetAssetsR ('Cpp/Include'      );
      $this->Using        =$Outer->GetAssets  ('Net/Using'        );
      $this->UsingPath    =$Outer->GetAssets  ('Net/UsingPath'    );

      $Tasks=$Compiler->Compile([
        'Items'        =>$this->Items        ,
        'Objects'      =>$this->Objects      ,
        'Defines'      =>$this->Defines      ,
        'ForceInclude' =>$this->ForceInclude ,
        'Includes'     =>$this->Includes     ,
        'Using'        =>$this->Using        ,
        'UsingPath'    =>$this->UsingPath    ,
        'Libs'         =>[], //$Outer->GetAssets  ($ITypeCppLib    ),
        'DepUsing'     =>$DepUsing  ,
        'Outer'        =>$Outer     ,
        'EnumCache'    =>$EnumCache ,
        'OutPath'      =>$this->OutPath   ,
        'LazyDepsId'   =>$this->Object_GetId() , //$PathObjAsset->Object_GetId(),
      ]);

      $PathObjAsset->RemoveFromOuter();
    }
  };
?>