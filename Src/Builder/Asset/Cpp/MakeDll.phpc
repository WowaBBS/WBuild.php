<?  $Loader->Parent_Class('/Builder/Asset/Cpp/Compile');  class C_Builder_Asset_Cpp_MakeDll extends C_Builder_Asset_Cpp_Compile  {    Static Function Make($Outer, $Compiler, $Param)    {      $bDebug=false && $Outer->IsDebug();      $OutPath=$Param['OutPath'];      $bUsing=$Param['Using']??false;            $LibName=Static::_GetName($Param, $Outer);            Static::Compile($Outer, $Compiler, $Param);            $PathDll=$OutPath.'Bin';      $PathDllType='Bin/Path'    ;      $PathDllAsset=$Outer->CreateAsset($PathDllType, $PathDll);            $Libs=$Outer->GetAssetsR    ('Cpp/Lib');            $DllAsset=$Outer->CreateAsset   ('Bin/Dll', [        'Path'=>$Compiler->GetDllFile    ($LibName, $bDebug),        '>FileDepends'=>$Param['>FileDepends']??[],        '>Create'=>1      ]);            $Compiler->BuildDll([        'Outer'     =>$Outer,        'Exec'      =>$Outer->CreateExec(),        'Objects'   =>$Outer->RemoveAssets ('Cpp/Obj'       ),        'Using'     =>$Outer->GetAssets    ('Cpp/Using'     ),        'ResAsset'  =>$Outer->RemoveAssets ('Cpp/Res'       ),        'Resources' =>$Outer->RemoveAssets ('Cpp/Resources' ),        'Libs'      =>$Libs,        'DllAsset'  =>$DllAsset,        'OutPath'   =>[$OutPath, $LibName],      ]);      $PathDllAsset->Remove();            if($bUsing)      {        $Using=$Outer->CreateAsset('Cpp/Using', ['Path'=>$DllAsset->GetFullPath(), '>Create'=>1]);        $Using->AddFileDepends($DllAsset->GetFileDepends());        if(IsSet($DllAsset->Tasks))          ForEach($DllAsset->Tasks As $Task)            $Using->AddTask($Task);      //TODO: $DllAsset->Remove();      }    }  };?>