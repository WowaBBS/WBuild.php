<?  $Loader->Parent_Class('/Builder/Asset/Cpp/Compile');  class C_Builder_Asset_Cpp_MakeDll extends C_Builder_Asset_Cpp_Compile  {    Static Function Make($Outer, $Compiler, $Param)    {      $bDebug=false && $Outer->IsDebug();      $OutPath=$Param['OutPath'];      $bUsing=$Param['Using']??false;            $LibName=Static::_GetName($Param, $Outer);            Static::Compile($Outer, $Compiler, $Param);            $PathDll=$OutPath.'Bin';      $PathDllType='Bin/Path'    ;      $PathDllAsset=$Outer->CreateAsset($PathDllType, $PathDll);            $Libs=$Outer->GetAssetsR    ('Cpp/Lib');      $DllAsset=$Outer->CreateAsset   ('Bin/Dll', ['Path'=>$Compiler->GetDllFile    ($LibName, $bDebug), '>Create'=>1]);      $FileDepends=[$DllAsset];      if(IsSet($Param['>FileDepends']))        $FileDepends[]=$Param['>FileDepends'];      ForEach($Libs As $Lib)        $FileDepends[]=$Lib->FileDepends;            $Compiler->BuildDll([        'Outer'    =>$Outer,        'Exec'     =>$Outer->CreateExec(),        'Objects'  =>$Outer->RemoveAssets  ('Cpp/Obj'),        'Libs'     =>$Libs,        'DllAsset' =>$DllAsset,        'OutPath'  =>[$OutPath, $LibName],      ]);     $PathDllAsset->Remove();          if($bUsing)     {       $Using=$Outer->CreateAsset('Cpp/Using', ['Path'=>$DllAsset->GetFullPath(), '>Create'=>1]);       if(IsSet($DllAsset->Tasks))        ForEach($DllAsset->Tasks As $Task)           $Using->AddTask($Task);     }    }  };?>