<?
  $Loader->Parent_Class('/Builder/Asset/Cpp/Compile');

  class C_Builder_Asset_Cpp_MakeDll extends C_Builder_Asset_Cpp_Compile
  {
    Static Function Make($Outer, $Compiler, $Param)
    {
      $OutPath      =$Param['OutPath'      ];
      $bManaged     =$Param['Managed'      ]??false;
      $DebugPostfix =$Param['DebugPostfix' ]??$bManaged;
      $Proxy        =$Param['Proxy'        ]??[];
      $NoEntry      =$Param['NoEntry'      ]??null;
      $NoDefaultLib =$Param['NoDefaultLib' ]??null;
      
      $bDebug=$DebugPostfix && $Outer->IsDebug();
      $_d=$bDebug? (Is_String($DebugPostfix)? $DebugPostfix:'_d'):'';
      
      $LibName=Static::_GetName($Param, $Outer);
      
      Static::Compile($Outer, $Compiler, $Param);
      
      $PathDllAsset=$Outer->CreateAsset('Bin/Path', $OutPath.'Bin');
      
      $Libs=$Outer->GetAssets     ('Cpp/Lib');
      
      $DllAsset=$Outer->CreateAsset   ('Bin/Dll', [
        'Path'=>$Compiler->GetDllFile    ($LibName.$_d),
        '>FileDepends'=>$Param['>FileDepends']??[],
        '>Create'=>1
      ]);
      
      $Compiler->BuildDll([
        'Outer'        =>$Outer,
        'Name'         =>$LibName,
        'Exec'         =>$Outer->CreateExec($OutPath.'Task/Dll/'.$LibName),
        'Objects'      =>$Outer->ExtractAssets ('Cpp/Obj'       ),
        'Using'        =>$Outer->GetAssets     ('Cpp/Using'     ),
        'ResAsset'     =>$Outer->ExtractAssets ('Cpp/Res'       ),
        'Resources'    =>$Outer->ExtractAssets ('Cpp/Resources' ),
        'Manifests'    =>$Outer->ExtractAssets ('Cpp/Manifest'  ),
        'Libs'         =>$Libs         ,
        'DllAsset'     =>$DllAsset     ,
        'NoEntry'      =>$NoEntry      ,
        'NoDefaultLib' =>$NoDefaultLib ,
        'Proxy'        =>$Proxy        ,
      ]);

      $PathDllAsset->RemoveFromOuter();
      
      if($bManaged)
      {
        $Using=$Outer->CreateAsset('Cpp/Using', ['Path'=>$DllAsset->GetFullPath(), '>Create'=>1]);
        $Using->AddFileDepends($DllAsset->GetFileDepends());
        if(IsSet($DllAsset->Tasks))
          ForEach($DllAsset->Tasks As $Task)
            $Using->AddTask($Task);
      //TODO: $DllAsset->RemoveFromOuter();
      }
    }
  };
?>