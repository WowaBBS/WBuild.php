<?
  $Loader->Parent_Class('/Builder/Asset/Base');

  class C_Builder_Asset_Cpp_Compiler extends C_Builder_Asset_Base
  {
    Var $Instance;

    Function GetKey() { return 0; }
  
    Protected Function _Init(Array $Args)
    {
      Parent::_Init($Args);
      $Compiler=$this->GetManager()->GetCompiler('CPP');
      $Args['Context']=$this->GetManager();

      $Config=$this->GetConfig();
      if($Args['Search'])
      {
        $Config=$Config->Clone();
        $Config->Set($Args['Search']);
      }
      if($Args['Compiler' ] && $Args['Compiler' ]->CheckConfig($Config))
        $this->Instance=$Args['Compiler' ];
      else
        $this->Instance=$Compiler->Find($Config);
    //$this->Instance=$this->Create_Object('/Builder/Compiler/CPP/VC/Instance');
    }
    
    Static Function _ParseParams($Args)
    {
      $Outer=$Args['Outer'];
      $Compiler=$Outer->GetLastAsset('Cpp/Compiler');
      $Param=$Args['Param'];
      unset($Args['Param']);
      $Args['Compiler' ]=$Compiler;
      $Args['Search'   ]=$Param;
      // TODO Check exists compiler 
      return [$Args];
    }

  //****************************************************************
    Function GetIncludes()
    {
      return $this->Instance->GetIncludes();
    }
    
    Function GetLibPaths()
    {
      return $this->Instance->GetLibPaths();
    }
  
  //****************************************************************
  // Debug
  
    Function _ToDebugInfo() { return $this->Compiler->ToDebugInfo(); }
  
    Protected Function _Debug_Info(Array &$Res)
    {
      Parent::_Debug_Info($Res);
      $Res['Instance']=$this->Instance->ToDebugInfo();
    }
    
  //****************************************************************
  };
?>