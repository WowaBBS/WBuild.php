<?
  $Loader->Parent_Class('/Builder/Asset/Cpp/MakeBase');

  class C_Builder_Asset_Cpp_MakeLib extends C_Builder_Asset_Cpp_MakeBase
  {
    Static Function Make($Outer, $Compiler, $Param)
    {
      // $Mode==0 -- No compile, only source
      // $Mode==1 -- Compile but only object files
      // $Mode==2 -- Compile but one liberary file
      // $Mode==3 -- Compile and generate DLL if avalible
      $Mode=$Outer->IsStatic()? 2:3; // TODO: Customization

      $DLL          =$Param['DLL'          ]?? '';
      $Def          =$Param['Def'          ]?? [];
      $DllCondition =$Param['DllCondition' ]?? [];
      if($DllCondition && $Mode===3)
        if(!$Outer->CheckCondition($DllCondition))
          $Mode=2;

      if(!Is_Array($Def))
        $Def=[$Def];
      $IsDll = $Mode>=3 &&($DLL!==''||Count($Def)>0);
      $IsLib = $Mode>=2 && !$IsDll;
      $IsObj = $Mode>=1;

      // Begin defines
      $DLL=Static::MakeDllDefines($Compiler, $DLL);
      $DefineAssets=$Outer->CreateAssets('Cpp/Define', $IsDll? $DLL['Export']:$DLL['Zero']);
      
      if($IsObj)
      {
        $_Param=$Param;
        $_Param['DepUsing']=!$IsDll && !$IsLib;
        UnSet($_Param['OutPath'      ]);
        UnSet($_Param['Name'         ]);
        UnSet($_Param['Def'          ]);
        UnSet($_Param['DLL'          ]);
        UnSet($_Param['Managed'      ]);
        UnSet($_Param['DebugPostfix' ]);
        UnSet($_Param['Proxy'        ]);
        UnSet($_Param['DllCondition' ]);
        $CompileAsset=$Outer->CreateAsset('Cpp/Compile', $_Param);
      }
      
      ForEach($DefineAssets As $DefineAsset)
        $DefineAsset->RemoveFromOuter();
      // End defines
      
      $bDebug=$Outer->IsDebug();
      $DebugPostfix =$Param['DebugPostfix' ]??True;
      $_d=$bDebug? (Is_String($DebugPostfix)? $DebugPostfix:'_d'):'';
      
      $OutPath=$Param['OutPath'];
      
      $LibName=Static::_GetName($Param, $Outer);
      
      
      if($IsDll || $IsLib)
      {
        $PathLibAsset=$Outer->CreateAsset('Cpp/LibPath', $OutPath.'Lib');
        
        if($IsDll)
        {
          $_Param=$Param+['LibAsset'=>True, 'BinType'=>'Dll'];
          UnSet($_Param['DllCondition' ]);
          UnSet($_Param['OutPath'      ]);
          $MakeAsset=$Outer->CreateAsset('Cpp/MakeBin', $_Param);
          $Outer->CreateAsset('Cpp/Define', $DLL['Import']);
        }
        if($IsLib)
        {
          $LibAsset= $Outer->CreateAsset   ('Cpp/Lib'  ,[
            'Path'     =>$Compiler->GetLibFile ($LibName.$_d),
            '>Create'=>1,
          ]);
          $Compiler->BuildLib([
            'Outer'    =>$Outer,
            'Exec'     =>$LibAsset->CreateExec(['CachePath'=>$OutPath.'Task/Lib/'.$LibName, 'Performance'=>'LinkLib']),
            'Objects'  =>$Outer->ExtractAssets ('Cpp/Obj'   ),
            'Using'    =>$Outer->GetAssets     ('Net/Using' ),
            'Libs'     =>$Outer->GetAssets     ('Cpp/Lib'   ),
            'LibAsset' =>$LibAsset,
          ]);
          $Outer->CreateAsset('Cpp/Define', $DLL['Include']);
        }
        $PathLibAsset->RemoveFromOuter();
      }
    //$Outer->CreateAsset('CPP/Define', ['TestBadObject']); // Check generate error
    }
    
    Static Function MakeDllDefines($Compiler, $DLL)
    {
      $DLL_Export  =[];
      $DLL_Import  =[];
      $DLL_Zero    =[];
      $DLL_Include =[];
      if($DLL!=='')
      {
        if(Is_String($DLL))
          $DLL=[$DLL=>'Extern'];
      //if(IsSet($DLL['>Proxy']))
      //{
      //  $DLL_Proxy=$DLL['>Proxy'];
      //  UnSet($DLL['>Proxy']);
      //}
      //else
      //  $DLL_Proxy=[];
        ForEach($DLL As $DLLi=>$DllType)
        {
          if(Is_Integer($DLLi))
          {
            $DLLi    =$DllType;
            $DllType ='Extern';
          }
          switch($DllType)
          {
          case 'Extern':
            $DLL_Export  [$DLLi]=$Compiler->DefineDLLExport();
            $DLL_Import  [$DLLi]=$Compiler->DefineDLLImport();
            $DLL_Zero    [$DLLi]='';
            $DLL_Include [$DLLi]='';
            break;
          default:
            // TODO: static 
            Static $DefTypes=[                        // Zero  ,TODO:   
              //                   Export ,Import ,Lib   ,Include ,bool
            //'Define'         => [true   ,false  ,false ,false   ,false ], //< TODO: Deprecated
            //'Liberary'       => [false  ,true   ,true  ,true    ,false ],
              'IsStatic'       => [false  ,false  ,true  ,true    ,false ],
              'IsDll'          => [true   ,true   ,false ,false   ,false ],
              'IsBuild'        => [true   ,false  ,true  ,false   ,false ],
              'IsBuildStatic'  => [false  ,false  ,true  ,false   ,false ],
              'IsBuildDll'     => [true   ,false  ,false ,false   ,false ],
              'IsUseDll'       => [false  ,true   ,false ,false   ,false ],
              'IsHeader'       => [false  ,true   ,false ,true    ,false ],
              'bIsStatic'      => [false  ,false  ,true  ,true    ,true  ],
              'bIsDll'         => [true   ,true   ,false ,false   ,true  ],
              'bIsBuild'       => [true   ,false  ,true  ,false   ,true  ],
              'bIsBuildStatic' => [false  ,false  ,true  ,false   ,true  ],
              'bIsBuildDll'    => [true   ,false  ,false ,false   ,true  ],
              'bIsUseDll'      => [false  ,true   ,false ,false   ,true  ],
              'bIsHeader'      => [false  ,true   ,false ,true    ,true  ],
            ];
            if(IsSet($DefTypes[$DllType]))
            {
              $DT=$DefTypes[$DllType];
              if($DT[4])
              {
                $DLL_Export  [$DLLi]=$DT[0]?'1':'0';
                $DLL_Import  [$DLLi]=$DT[1]?'1':'0';
                $DLL_Zero    [$DLLi]=$DT[2]?'1':'0';
                $DLL_Include [$DLLi]=$DT[3]?'1':'0';
              }
              else
              {
                if($DT[0]) $DLL_Export  [$DLLi]='';
                if($DT[1]) $DLL_Import  [$DLLi]='';
                if($DT[2]) $DLL_Zero    [$DLLi]='';
                if($DT[3]) $DLL_Include [$DLLi]='';
              }
            }
            else
              $this->Fatal('Unknown DllType ',$DllType);
          }
        }
      }
      return [
        'Export'  =>$DLL_Export  ,
        'Import'  =>$DLL_Import  ,
        'Zero'    =>$DLL_Zero    ,
        'Include' =>$DLL_Include ,
      ];
    }
  };
?>