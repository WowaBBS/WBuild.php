<?  $Loader->Parent_Class('/Builder/Asset/Cpp/Compile');  class C_Builder_Asset_Cpp_MakeLib extends C_Builder_Asset_Cpp_Compile  {    Static Function Make($Outer, $Compiler, $Param)    {      // $Mode==0 -- No compile, only source      // $Mode==1 -- Compile but only object files      // $Mode==2 -- Compile but one liberary file      // $Mode==3 -- Compile and generate DLL if avalible      $Mode=$Outer->IsStatic()? 2:3; // TODO: Customization      $bDebug=$Outer->IsDebug();      $OutPath=$Param['OutPath'];            $DLL=IsSet($Param['DLL'])? $Param['DLL']:'';      $IsDll = $Mode>=3 && $DLL!=='';      $IsLib = $Mode>=2 && !$IsDll;      $IsObj = $Mode>=1;      $LibName=Static::_GetName($Param, $Outer);            if($DLL!=='')      {        if(Is_String($DLL))          $DLL=[$DLL];      //if(IsSet($DLL['>Proxy']))      //{      //  $DLL_Proxy=$DLL['>Proxy'];      //  UnSet($DLL['>Proxy']);      //}      //else      //  $DLL_Proxy=[];        $DLL_Export =[];        $DLL_Import =[];        $DLL_Zero   =[];        ForEach($DLL As $DLLi)        {          $DLL_Export [$DLLi]=$Compiler->DefineDLLExport();          $DLL_Import [$DLLi]=$Compiler->DefineDLLImport();          $DLL_Zero   [$DLLi]='';        }      //ForEach($DLL_Proxy As $DLLi)      //{      //  $DLL_Export [$DLLi]=$Compiler->DefineDLLProxy ();      //  $DLL_Import [$DLLi]=$Compiler->DefineDLLImport();      //  $DLL_Zero   [$DLLi]='';      //}        if($IsDll)          $Outer->CreateAsset('Cpp/Define', $DLL_Export);        else          $Outer->CreateAsset('Cpp/Define', $DLL_Zero);      }            if($IsObj)      {        $_Param=$Param;        $_Param['_DS']=!$IsDll && !$IsLib;        Static::Compile($Outer, $Compiler, $_Param);      }            if($IsDll || $IsLib)      {        $PathLibAsset=$Outer->CreateAsset('Cpp/LibPath', $OutPath.'Lib');                if($IsDll)        {          $PathDllAsset=$Outer->CreateAsset('Bin/Path', $OutPath.'Bin');                    $Compiler->BuildDll([            'Outer'     =>$Outer,            'Name'      =>$LibName,            'Exec'      =>$Outer->CreateExec([$OutPath, $LibName]),            'Objects'   =>$Outer->ExtractAssets ('Cpp/Obj'   ),            'Libs'      =>$Outer->GetAssets     ('Cpp/Lib'   ),            'Using'     =>$Outer->GetAssets     ('Cpp/Using' ),            'DllAsset'  =>$Outer->CreateAsset   ('Bin/Dll'   ,['Path'=>$Compiler->GetDllFile    ($LibName, $bDebug), '>Create'=>1]),            'LibAsset'  =>$Outer->CreateAsset   ('Cpp/Lib'   ,['Path'=>$Compiler->GetDllLibFile ($LibName, $bDebug), '>Create'=>1,              '>FileDepends'=>$Param['>FileDepends']??[],            ]),            'ResAsset'  =>$Outer->ExtractAssets ('Cpp/Res'       ),            'Resources' =>$Outer->ExtractAssets ('Cpp/Resources' ),            'Manifests' =>$Outer->ExtractAssets ('Cpp/Manifest'  ),            'OutPath'   =>[$OutPath, $LibName],          ]);          $Outer->CreateAsset('Cpp/Define', $DLL_Import);            $PathDllAsset->RemoveFromOuter();        //TODO: $DllAsset->RemoveFromOuter();        }        if($IsLib)        {          $Compiler->BuildLib([            'Outer'    =>$Outer,            'Exec'     =>$Outer->CreateExec([$OutPath, $LibName]),            'Objects'  =>$Outer->ExtractAssets ('Cpp/Obj'   ),            'Using'    =>$Outer->GetAssets     ('Cpp/Using' ),            'Libs'     =>$Outer->GetAssets     ('Cpp/Lib'   ),            'LibAsset' =>$Outer->CreateAsset   ('Cpp/Lib'  ,[              'Path'     =>$Compiler->GetLibFile ($LibName, $bDebug),               '>Create'=>1,            ]),            'OutPath'  =>[$OutPath, $LibName],          ]);        }        $PathLibAsset->RemoveFromOuter();      }    //$Outer->CreateAsset('CPP/Define', ['TestBadObject']); // Check generate error    }  };?>