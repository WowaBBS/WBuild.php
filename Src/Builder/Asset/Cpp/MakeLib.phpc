<?  $Loader->Parent_Class('/Builder/Asset/Cpp/Compile');  class C_Builder_Asset_Cpp_MakeLib extends C_Builder_Asset_Cpp_Compile  {    Static Function Make($Outer, $Compiler, $Param)    {      // $Mode==0 -- No compile, only source      // $Mode==1 -- Compile but only object files      // $Mode==2 -- Compile but one liberary file      // $Mode==3 -- Compile and generate DLL if avalible      $Mode=3; // TODO: Customization      $bDebug=false;      $OutPath=$Param['OutPath'];            $DLL=IsSet($Param['DLL'])? $Param['DLL']:'';      $IsDll = $Mode>=3 && $DLL!=='';      $IsLib = $Mode>=2 && !$IsDll;      $IsObj = $Mode>=1;      $LibName=Static::_GetName($Outer);            if($DLL!=='')      {        if($IsDll)          $Outer->CreateAsset('Cpp/Define', [$DLL=>$Compiler->DefineDLLExport()]);        else          $Outer->CreateAsset('Cpp/Define', [$DLL=>'']);      }            if($IsObj)        Static::Compile($Outer, $Compiler, $Param);            if($IsDll || $IsLib)      {        $PathLib=$OutPath.'Lib';        $PathLibType='Cpp/LibPath' ;        $PathLibAsset=$Outer->CreateAsset($PathLibType, $PathLib);                if($IsDll)        {          $PathDll=$OutPath.'Bin';          $PathDllType='Bin/Path'    ;          $PathDllAsset=$Outer->CreateAsset($PathDllType, $PathDll);                    $Libs=$Outer->GetAssetsR    ('Cpp/Lib');          $DllAsset=$Outer->CreateAsset   ('Bin/Dll', ['Path'=>$Compiler->GetDllFile    ($LibName, $bDebug), '>Create'=>1]);          $FileDepends=[$DllAsset];          if(IsSet($Param['>FileDepends']))            $FileDepends[]=$Param['>FileDepends'];          ForEach($Libs As $Lib)            $FileDepends[]=$Lib->FileDepends;          $LibAsset=$Outer->CreateAsset   ('Cpp/Lib', ['Path'=>$Compiler->GetDllLibFile ($LibName, $bDebug), '>Create'=>1, '>FileDepends'=>$FileDepends]);                    $Compiler->BuildDll([            'Exec'     =>$Outer->CreateExec(),            'Objects'  =>$Outer->RemoveAssets  ('Cpp/Obj'),            'Libs'     =>$Libs,            'DllAsset' =>$DllAsset,            'LibAsset' =>$LibAsset,          ]);          $Outer->CreateAsset('Cpp/Define', [$DLL=>$Compiler->DefineDLLImport()]);           $PathDllAsset->Remove();        }        if($IsLib)        {          $Compiler->BuildLib([            'Exec'     =>$Outer->CreateExec(),            'Objects'  =>$Outer->RemoveAssets  ('Cpp/Obj'),            'Libs'     =>[], //$Outer->GetAssetsR    ('Cpp/Lib'),            'LibAsset' =>$Outer->CreateAsset   ('Cpp/Lib', [              'Path'=>$Compiler->GetLibFile ($LibName, $bDebug),               '>Create'=>1            ]),          ]);        }        $PathLibAsset->Remove();      }    //$Outer->CreateAsset('CPP/Define', ['TestBadObject']); // Check generate error    }  };?>