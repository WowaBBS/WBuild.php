<?
  $Loader->Load_Lib('/FS/Utils');
  $Loader->Parent_Class('/Builder/Asset/FS/PathBase');

# Function DebugFiles()
# {
#   Global $Loader;
#   ForEach(C_Builder_Asset_FS_File::$AllFilesList As $i)
#     $Loader->Log('Debug', 'Path: ', $i->GetFullPath(), ' ', $i->GetModule()->GetName());
#   $Loader->Log('Debug', 'Total: ', Count(C_Builder_Asset_FS_File::$AllFilesList));
# }
# Register_Shutdown_Function('DebugFiles');
  
  class C_Builder_Asset_FS_File extends C_Builder_Asset_FS_PathBase
  {
  # Static $AllFilesList=[];
    
    Protected Function _Init(Array $Args)
    {
    # Static::$AllFilesList[]=$this;
      Parent::_Init($Args);
    }
    
    Protected Function _Remove():bool
    {
      return Unlink($this->GetFullPath());
    }
    
    Function InvalidateCache()
    {
      $this->Cached_Hash=null;
      Parent::InvalidateCache();
    }

    Final Function GetFileName()
    {
      return BaseName($this->GetFullPath());
    }
    
    Function MakeTaskName($Add='')
    {
      return
        ($this->IsExternalModule() ?'Ext '  :'').
         $this->GetContext()->SimpleName.' '.
      //($this->IsStatic  ()? 'Static'  .' ':'').
         $this->GetModule()->FullName.': '.
        ($Add!==''? $Add.' ':'').
         $this->GetFileName()
      ;
    }
    
    Function CreateExec(Array $Args)
    {
      $Args['Task_Asset']=$this;
      if(!IsSet($Args['CachePath']))
        $this->Log('Fatal', 'CachePath is not defined');
      $Res=$this->Create_Object('/Builder/Task/Exec', $Args);
      return $Res;
    }
    
    Function GetDirFullPath()
    {
      return DirName($this->GetFullPath());
    }

    Function GetFileExt() // TODO: Num
    {
      $Res=$this->GetLocalPath();
      $Pos1 = StrRPos($Res, '/');
      $Pos2 = StrRPos($Res, '.');
      if($Pos2===false || $Pos1!=false && $Pos1>$Pos2)
        return '';
      return SubStr($Res, $Pos2+1);
    //return FilePath_GetFileNick($this->GetLocalPath());
    }
    
    Function GetLocalFolder()
    {
      $Res=$this->GetLocalPath();
      $Pos1 = StrRPos($Res, '/');
      if($Pos1==false)
        return '';
      return SubStr($Res, 0, $Pos1+1);
    //return FilePath_GetFileNick($this->GetLocalPath());
    }
    
    Function GetLocalPathNick()
    {
      $Res=$this->GetLocalPath();
      $Pos1 = StrRPos($Res, '/');
      $Pos2 = StrRPos($Res, '.');
      if($Pos2===false || $Pos1!=false && $Pos1>$Pos2)
        $Pos2=StrLen($Res);
      return SubStr($Res, 0, $Pos2);
    //return FilePath_GetFileNick($this->GetLocalPath());
    }
    
    Function GetFullPathNick()
    {
      $Res=$this->GetFullPath();
      $Pos1 = StrRPos($Res, '/');
      $Pos2 = StrRPos($Res, '.');
      if($Pos2===false || $Pos1!=false && $Pos1>$Pos2)
        $Pos2=StrLen($Res);
      return SubStr($Res, 0, $Pos2);
    //return FilePath_GetFileNick($this->GetLocalPath());
    }
    
    Function GetFileNick()
    {
      return FilePath_GetFileNick($this->GetLocalPath());
    }

    Static Protected Function _IsFile() { return true; }
    
    Var $Cached_Hash=null;
    
    Function GetHash() { return $this->Cached_Hash??=$this->_GetHash(); }
  //Function GetHash() { return $this->_GetHash(); }
    
    // TODO: optimize, calculating too long/ Is should be fast without Cached_Hash
    Protected Function _GetHash()
    {
      $Performance=$this->GetManager()->Performance->Start(['Name'=>'Md5File']);
      $Cache=$this->GetMD5Cache();
      return $Cache->CalcMD5($this->GetFullPath());
    }
    
    Function GetDirAndNick()
    {
      if($this->Parent)
        return [
          $this->Parent->GetFullPath(),
          $this->GetLocalPathNick(),
        ];
      return [
        $this->GetDirFullPath(),
        $this->GetFileNick(),
      ];
    }
    
    Function GetDirAndName()
    {
      if($this->Parent)
        return [
          $this->Parent->GetFullPath(),
          $this->GetLocalPath(),
        ];
      return [
        $this->GetDirFullPath(),
        $this->GetFileName(),
      ];
    }
  //****************************************************************
  // Lazy Depends

    Final Function CheckLazyDependsArgs(Array $Args)
    {
      $Res=[];
      $this->_CheckLazyDepsArgs($Res, $Args);
      if($Res===[])
        return true;

      $Log=$this->Log('Fatal', 'LazyDepends havn\'t arguments:');
      ForEach($Res As $Item)
        if(Is_Array($Item))
          $Log('  ', ...$Item);
        else
          $Log('  ', $Item);
      $Log->Done();
      
      return False;
    }
    
    Final Function GetLazyDepends(Array $Args)
    {
      if(!$this->CheckLazyDependsArgs($Args))
        return [];
      $Res=[];
      $this->_GetLazyDeps($Res, $Args);
      return $Res;
    }

    Protected Function _CheckLazyDepsArgs(Array &$Res, Array $Args)
    {
      // TODO: Checker
    }
    
    Protected Function _GetLazyDeps(Array &$Res, Array $Args)
    {
    }
  //****************************************************************
  
  };
?>