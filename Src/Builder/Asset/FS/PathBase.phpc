<?  $Loader->Parent_Class('/Builder/Asset/Base');  $Loader->Load_Lib('/FS/Utils');  class C_Builder_Asset_FS_PathBase extends C_Builder_Asset_Base  {    Private $LocalPath='';    Var $Parent;    Private $FullPath='';        Function GetFullPath  () { return $this->FullPath  ; }    Function GetLocalPath () { return $this->LocalPath ; }        Function GetKey() { return $this->GetFullPath(); }        Protected Function _Init(Array $Args)    {      Parent::_Init($Args);      if(IsSet($Args['>Parent']))      { // TODO: SetPath        $this->Parent=$Args['>Parent'];        $this->LocalPath=$Args['Path'];        $this->FullPath=Self::NormPath($this->Parent->GetSubPath($this->LocalPath));      }      else    //if(IsSet($Args['Path']))      $this->SetPath(        $Args['Path'],        $Args['>Create'      ]??false,        $Args['>DebugDetect' ]??false,        $Args['>NoSearch'    ]??false      );      if(IsSet($Args['>FileDepends']))        $this->AddFileDepends($Args['>FileDepends']);     }        Static Function _CustomParams()    {      return [        '>DetectDebug' ,        '>NoSearch'    ,        '>Create'      ,        '>FileDepends' ,        '>Parent'      ,      ];    }        Static Function _ParseParams($Args)    {      $Param=$Args['Param'];      unset($Args['Param']);      ForEach(Static::_CustomParams() As $Cmd)        if(IsSet($Param[$Cmd]))        {          $Args[$Cmd]=$Param[$Cmd];          UnSet($Param[$Cmd]);        }      $Res=[];      while(IsSet($Param[0 ]))      {        $_Args=$Args;        $_Args['Path']=Array_Shift($Param);        $Res[]=$_Args;      }      if(IsSet($Param['Path']))      {        $Args['Path']=$Param['Path'];        $Res[]=$Args;        Unset($Param['Path']);      }      self::CheckEmptyParam($Param);      return $Res;    }        Function IsNoSearch() { return $this->NoSearch??false; }        Final Function SetPath($v, $Create, $DebugDetect, $NoSearch)    {      if($NoSearch)        $this->NoSearch=true;      $v=FileName_Normalize($v);      $this->LocalPath=$v;      $sp=$this->_GetSearchPathClass();      $Cfg=[        'First'       => true,        'Base'        => true,        'Search'      =>!$Create && !$NoSearch ,        'Create'      => $Create      ,        'NoError'     => $NoSearch    ,        'DebugDetect' => $DebugDetect ,      ];      $v=$this->GlobalSearch($v, $sp, $Cfg);      $v2=Self::NormPath($v);      if($v!=$v2)      {      //echo 'Norm ',$v,"\n";      //echo '  to ',$v2,"\n";        $v=$v2;      }      $this->FullPath=$v;    //$this->FullPath=NormPath($v);    }        Protected Function _GetSearchPathClass()    {      return [];    }        Protected Function _IsFile() { return false; }    Static Function IsAbsolute($Path)    {      return StrLen($Path)>1 &&(        SubStr($Path, 0, 1)=='/'   ||      //SubStr($Path, 0, 1)=='\\'  ||        SubStr($Path, 1, 1)==':'   ||      //SubStr($Path, 1, 1)=='.\\' ||        SubStr($Path, 0, 2)=='./'      );          }        Function MkDir()    {    //echo 'MkDir ',$this->GetDirFullPath(),"\n";      CreatePath($this->GetDirFullPath());    }        Function GlobalSearch($Path, $Assets, $Cfg)    {      $bIsFile =$this->_IsFile();      $bFirst      =$Cfg['First'       ];      $bSearch     =$Cfg['Search'      ];      $bCreate     =$Cfg['Create'      ];      $bNoError    =$Cfg['NoError'     ];      $DebugDetect =$Cfg['DebugDetect' ];      if($Cfg['Base'])        $Assets[]='Module/Path';          if(Self::IsAbsolute($Path))      {        $this->Parent=null;        return $Path;      }            $Searches=[];      ForEach($Assets As $AssetClass)      {        $List=$this->GetAssetsR($AssetClass);        $c=count($List);      //Echo 'Global Search ', $Path, ' in ',$AssetClass, ' (', $c,')', "\n";        if($c==0)          continue;        if($bFirst)        {          ForEach($List As $k=>$Item)          {                      $Searches[$k]=$Item; // TODO: Reset(). End()?            break;          }          break;        }        $Searches+=$List; //+++      }      if($bSearch)      {        ForEach($Searches As $Asset)        {          $Res=$Asset->Search($Path, $bIsFile);          if($Res!=='')            return $Res;        }      }      if($bCreate)      {        ForEach($Searches As $Asset)        {          $this->Parent=$Asset;          return $Asset->GetSubPath($Path);        }      }      $this->Parent=null;      if(!$bNoError)      {        if($bIsFile)          echo 'File not found: ',$Path,"\n";        else          echo 'Dir not found: ',$Path,"\n";        echo '  Search:',"\n";        ForEach($Searches As $Search)          echo '    '.$Search->GetFullPath(),"\n";                UnSupported();      }      return $Path;    }        Function GetRoot()    {      $Res=$this;      While($Res->Parent)        $Res=$Res->Parent;      return $Res;    }        Function GetRootKey()    {      $Root=GetRoot();      $RootPath=$Root->GetFullPath();      $FullPath=$this->GetFullPath();      $l=StrLen($RootPath);      if(SubStr($FullPath, 0, $l)!==$RootPath)        UnSupported(); // Unreacable case            return SubStr($FullPath, $l);    }    Function GetMD5Cache()    {      return $this->GetModuleInstance()->GetMD5Cache($this->GetRoot()->GetFullPath());    }    Function InvalidateCache()    {      if($this->Parent)        $this->Parent->InvalidateCache();    }    // Нормализует путь $Path, удаляя ненужное    Static Function NormPath($Path)    {    //$Path=Str_Replace('\\','/', $Path);      $Path=Explode('/', $Path);      $Beg=count($Path)-1;      $End=count($Path)-1;      $Res=[];      ForEach($Path As $k=>$v)      {        $v=Trim($v);        If($v=='')        {          if($k!==$Beg && $k!==$End)            Continue;          ++$Beg;        }        If($v=='.')          $Res=['.']; // TODO: Root        ElseIf($v=='..')        {          If(Count($Res)>1)            Array_Pop($Res);        }        Else          $Res[]=$v;      }      Return Implode('/', $Res);    }  // Depends      Static Function _Filter($List, $Filter=false)    {      if(!$Filter) return $List;      $Res=[];      ForEach($List As $k=>$v)      {      //echo $Filter,'===',$v->Info->Type,"\n";        if($v->Info->Type===$Filter)          $Res[$v->Object_Id]=$v;      }      return $Res;    }        Function GetFileDepends($Filter=false)    {      if(!IsSet($this->FileDepends)) return [];      $Res=$this->FileDepends;      $Res=Static::_Filter($Res, $Filter);      return $Res;    }        Static Function _GetFileDependsR(Array $ToAdd, $Filter=false):Array    {      $Added=[];      While(Count($ToAdd))      {        $Adding=$ToAdd;        $ToAdd=[];        ForEach($Adding As $AddingItem)          $Added[$AddingItem->Object_Id]=$AddingItem;                ForEach($Adding As $AddingItem)          ForEach($AddingItem->GetFileDepends($Filter) As $Item)            if(!IsSet($Added[$Item->Object_Id]))              $ToAdd[$Item->Object_Id]=$Item;      }      return $Added;    }        Function GetFileDependsR($Filter=false, $FilterR=false)    {      $Res=$this->GetFileDepends($FilterR);    //Echo 'GetFileDependsR ',$this->GetLocalPath(), ', ',$Filter,' =',count($Res), ' ', count($this->FileDepends),"\n";      $Res=Static::_GetFileDependsR($Res, $FilterR);      $Res=Static::_Filter($Res, $Filter);      return $Res;    }        Function AddFileDepends($v)    {      if(Is_Array($v))      {        ForEach($v As $Item)          $this->AddFileDepends($Item);      }      elseif(Is_String($v))        $this->AddFileDepends($this->GetAssets($v));      elseif(Is_Object($v))      {      //echo 'AddFileDepends ',$v->GetLocalPath(), ' to ' ,$this->GetLocalPath(),"\n";        $this->FileDepends[$v->Object_Id]=$v;      }      else        UnSupported();    }  };  $DebM=$Loader->Get_Singleton('/Debug/Manager');  $DebM->AddInlineClass('C_Builder_Asset_FS_PathBase');?>