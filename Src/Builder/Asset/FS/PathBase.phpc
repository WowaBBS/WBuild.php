<?
  $Loader->Parent_Class('/Builder/Asset/Base');
  $Loader->Load_Lib('/FS/Utils');
  $Loader->Load_Lib('/FS/IOFS');
  $Loader->Using_Module('/Array');

  class C_Builder_Asset_FS_PathBase extends C_Builder_Asset_Base
  {
    Var $LocalPath=''; // TODO: Private
    Var $Parent;
    Var $HasNext=false;
    Private $FullPath='';
    
    Function GetFullPath  () { return $this->FullPath  ; }
    Function GetLocalPath () { return $this->LocalPath ; }
    
    Function GetKey() { return $this->GetFullPath(); }
    
    Function Exists()
    {
      return File_Exists($this->GetFullPath());
    }
    
    Function Remove():bool
    {
      if(!$this->Exists()) return true;
      return Unlink($this->GetFullPath());
    }
    
    Protected Function _Init(Array $Args)
    {
      Parent::_Init($Args);
      $this->HasNext=$Args['HasNext']??false;
      if(IsSet($Args['>Parent']))
      { // TODO: SetPath
        $Parent=$Args['>Parent'];
        if(Is_String($Parent))
        {
          $ParentAsset=$Parent;
          $Parent=$this->GetLastAsset($ParentAsset);
          if(!$Parent)
            $this->Log('Fatal', 'Parent asset "', $ParentAsset, '" not found');
        }
        $this->Parent=$Parent;
        $this->LocalPath=$Args['Path'];
        $this->FullPath=NormPath($Parent->GetSubPath($this->LocalPath));
      }
      else
    //if(IsSet($Args['Path']))
        $this->SetPath(
          $Args['Path'],
          $Args['>Create'      ]??false,
          $Args['>NoSearch'    ]??false
        );
      if(IsSet($Args['>FileDepends']))
        $this->AddFileDepends($Args['>FileDepends']); 
    }
    
    Static Function _CustomParams()
    {
      return [
        '>DetectDebug' ,
        '>NoSearch'    ,
        '>Create'      ,
        '>FileDepends' ,
        '>Parent'      ,
        '>Keys'        ,
        '>Map'         ,
        '>Mask'        ,
      ];
    }
    
    Static Function _AddItem(Array &$Res, Array $Args, String $Path)
    {
      $Args['Path']=$Path;
      $Res[]=$Args;
    }
    
    Static Function _AddItems(Array &$Res, Array $Args, Array $Paths)
    {
      ForEach($Paths As $Path)
        Static::_AddItem($Res, $Args, $Path);
    }
    
    Protected Static Function __ParseItemsForKey($Outer, Array $Path, Array $CheckKey, bool $z)
    {
      $bHasKey=false;
      $Res=[];
      ForEach($Path As $k=>$v)
        if(IsSet($CheckKey[$v]))
        {
          if($bHasKey)
            $Outer->Log('Fatal', 'Key already exists');
          $bHasKey=true;
        }
        elseif($bHasKey===$z)
          $Res[]=$v;
      return $bHasKey? $Res:$Path;
    }

    Protected Static Function _ParseItemForKeys(Array &$Res, Array $Args, $Path)
    {
      if(Is_String($Path))
        return Static::_AddItem($Res, $Args, $Path);

      $Outer=$Args['Outer'];
      $Path=Static::__ParseItemsForKey($Outer, $Path, ['>Debug'  =>1], $Outer->IsDebug  ());
      $Path=Static::__ParseItemsForKey($Outer, $Path, ['>Static' =>1], $Outer->IsStatic ());
      Static::_AddItems($Res, $Args, $Path);
    }
    
    Static Function _ParseParams($Args)
    {
      $Param=$Args['Param'];
      unset($Args['Param']);
      ForEach(Static::_CustomParams() As $Cmd)
        if(IsSet($Param[$Cmd]))
        {
          $Args[$Cmd]=$Param[$Cmd];
          UnSet($Param[$Cmd]);
        }
      $Res=[];
      while(IsSet($Param[0]))
      {
        $Path=Array_Shift_Checked($Param);
        Static::_ParseItemForKeys($Res, $Args, $Path);
      }
      if(IsSet($Param['Path']))
      {
        $Path=$Param['Path']; Unset($Param['Path']);
        Static::_ParseItemForKeys($Res, $Args, $Path);
      }
      self::CheckEmptyParam($Param);
      $Type=$Args['Asset_Info']->Name; // $Args['Type']??
      $z=false;
      ForEach($Res As &$Item)
        if(($Res['Type']??$Type)==$Type)
          if($z)
            $Item['HasNext']=true;
          else
            $z=true;
      return $Res;
    }
    
    Function IsNoSearch() { return $this->NoSearch??false; }
    
    Final Function SetPath($v, $Create, $NoSearch)
    {
      if($NoSearch)
        $this->NoSearch=true;
      $v=FileName_Normalize($v);
      $this->LocalPath=$v;
      $Assets=$this->_GetSearchPathClass();
      $Cfg=[
        'Outer'       => $this,
        'IsFile'      => $this->_IsFile(),
        'First'       => true,
        'Base'        => true,
        'Search'      =>!$Create && !$NoSearch ,
        'Create'      => $Create      ,
        'NoError'     => $NoSearch    ,
        'Assets'      => $Assets,
      ];
      [$p, $v]=Static::GlobalSearch($v, $this, $Cfg);
      $this->Parent=$p;
      $v=NormPath($v);
      $this->FullPath=$v;
    }
    
    Protected Function _GetSearchPathClass()
    {
      return [];
    }
    
    Protected Function _IsFile() { return false; }

    Static Function IsAbsolute($Path)
    {
      return StrLen($Path)>1 &&(
        SubStr($Path, 0, 1)=='/'   ||
      //SubStr($Path, 0, 1)=='\\'  ||
        SubStr($Path, 1, 1)==':'   ||
      //SubStr($Path, 1, 1)=='.\\' ||
        SubStr($Path, 0, 2)=='./'
      );      
    }
    
    Function MkDir()
    {
    //$this->Log('Debug', 'MkDir ',$this->GetDirFullPath());
      CreatePath($this->GetDirFullPath());
    }
    
    Static Function GlobalSearches($Outer, $Cfg)
    {
      $Assets      =$Cfg['Assets'      ]??[];
      $bFirst      =$Cfg['First'       ]??true;
      if($Cfg['Base']??true)
        $Assets[]='Module/Path:'; // TODO: NS
      $Res=[];
      ForEach($Assets As $AssetClass)
        if(Is_Object($AssetClass))
          $Res[$AssetClass->Object_Id]=$AssetClass;
        else
        {
          $List=$Outer->GetAssetsR($AssetClass);
          $c=count($List);
        //$this->Log('Debug', 'Global Search ', $Path, ' in ',$AssetClass, ' (', $c,')');
          if($c==0)
            continue;
          if($bFirst)
          {
            ForEach($List As $k=>$Item)
            {
              $Res[$k]=$Item; // TODO: Reset(). End()?
              if(!($Item->HasNext??false))
                break;
            }
            break;
          }
          $Res+=$List; //+++
        }
      return $Res;  
    }
    
    // Used in FindFile
    Static Function GlobalSearch($Path, $Outer, $Cfg)
    {
      $bIsFile     =$Cfg['IsFile'      ]??true  ;
      $bSearch     =$Cfg['Search'      ]??true  ;
      $bCreate     =$Cfg['Create'      ]??false ;
      $bNoError    =$Cfg['NoError'     ]??false ;
    
      if(Static::IsAbsolute($Path))
        return [null, $Path];
      
      $Searches=Static::GlobalSearches($Outer, $Cfg);
      if($bSearch)
      {
        ForEach($Searches As $Asset)
        {
          $Res=$Asset->SearchNode($Path, ['IsFile'=>$bIsFile]);
          if($Res!=='')
            return [$Asset, $Res];
        }
      }
      if($bCreate)
        ForEach($Searches As $Asset)
          return [$Asset, $Asset->GetSubPath($Path)];
      
      if(!$bNoError)
      {
        $Log=$Outer->Log('Fatal', ($bIsFile? 'File':'Dir'), ' not found: \'',$Path,'\' in module ', $Outer->GetModule()->FullName);
        $Log('  Search:');
        ForEach($Searches As $Search)
          $Log('    ', $Search->GetFullPath(), ' from ', $Search->GetModule()->FullName, ' type ', $Search->Asset_Info->Name);
        $Cfg['Path'   ]=$Path   ;
        $Log->Debug($Cfg);
        $Log->NoBackTrace();
        $Log->Done();
      }
      return [null, $Path];
    }
    
    Function GetRoot()
    {
      $Res=$this;
      While($Res->Parent)
        $Res=$Res->Parent;
      return $Res;
    }
    
    Function GetRootKey()
    {
      $Root=GetRoot();
      $RootPath=$Root->GetFullPath();
      $FullPath=$this->GetFullPath();
      $l=StrLen($RootPath);
      if(SubStr($FullPath, 0, $l)!==$RootPath)
        $this->Log('Fatal', 'Unreachable C_Builder_Asset_FS_PathBase::GetRootKey() case');
      
      return SubStr($FullPath, $l);
    }

    Function GetMD5Cache()
    {
      return $this->GetModuleInstance()->GetMD5Cache($this->GetRoot()->GetFullPath());
    }

    Function InvalidateCache()
    {
      ClearStatCache(true, $this->GetFullPath());
      if($this->Parent)
        $this->Parent->InvalidateCache();
    }

  // Depends
  
    Static Function _Filter($List, $Filter=false)
    {
      if(!$Filter) return $List;
      $Res=[];
      ForEach($List As $k=>$v)
      {
      //$this->Log('Debug', $Filter,'===',$v->Asset_Info->Type);
        if($v->Asset_Info->Type===$Filter)
          $Res[$v->Object_Id]=$v;
      }
      return $Res;
    }
    
    Function GetFileDepends($Filter=false)
    {
      if(!IsSet($this->FileDepends)) return [];
      $Res=$this->FileDepends;
      $Res=Static::_Filter($Res, $Filter);
      return $Res;
    }
    
    Static Function _GetFileDependsR_Deprecated(Array $ToAdd, $Filter=false):Array
    {
      $Added=[];
      While(Count($ToAdd))
      {
        $Adding=$ToAdd;
        $ToAdd=[];
        ForEach($Adding As $AddingItem)
          $Added[$AddingItem->Object_Id]=$AddingItem;
        
        ForEach($Adding As $AddingItem)
          ForEach($AddingItem->GetFileDepends($Filter) As $Item)
            if(!IsSet($Added[$Item->Object_Id]))
              $ToAdd[$Item->Object_Id]=$Item;
      }
      return $Added;
    }
    
    Static Function __GetFileDependsR(Array &$Res, $Asset, $Filter=false)
    {
      $Id=$Asset->Object_Id;
      if(IsSet($Res[$Id]))
        return;
      $Res[$Id]=true; // TODO: Check recurse
      ForEach($Asset->GetFileDepends($Filter) As $Item)
        Static::__GetFileDependsR($Res, $Item, $Filter);
      UnSet($Res[$Id]);
      $Res[$Id]=$Asset;
    }
    
    Static Function _GetFileDependsR(Array $ToAdd, $Filter=false):Array
    {
      $Res=[];
      ForEach($ToAdd As $Item)
        Static::__GetFileDependsR($Res, $Item, $Filter);
      return $Res;
    }
    
    Function GetFileDependsR($Filter=false, $FilterR=false)
    {
      $Res=$this->GetFileDepends($FilterR);
    //$this->Log('Debug', 'GetFileDependsR ',$this->GetLocalPath(), ', ',$Filter,' =',count($Res), ' ', count($this->FileDepends));
      $Res=Static::_GetFileDependsR($Res, $FilterR);
      $Res=Static::_Filter($Res, $Filter);
      return $Res;
    }
    
    Function AddFileDepends($v)
    {
      if(Is_Array($v))
      {
        ForEach($v As $Item)
          $this->AddFileDepends($Item);
      }
      elseif(Is_String($v))
        $this->AddFileDepends($this->GetAssets($v));
      elseif(Is_Object($v))
      {
      //$this->Log('Debug', 'AddFileDepends ',$v->GetLocalPath(), ' to ' ,$this->GetLocalPath());
        $this->FileDepends[$v->Object_Id]=$v;
      }
      else
        $this->Log('Fatal', 'Uncceptable type "', GetType($v), '" of depends file');
    }

  //****************************************************************
  // Debug
  
    Protected Function _Debug_Info(Array &$Res)
    {
      Parent::_Debug_Info($Res);
      if($this->Parent)
        $Res['Parent']=$this->Parent->ToDebugInfo();
    }
  //****************************************************************
  };

  $DebM=$Loader->Get_Singleton('/Debug/Manager');
  $DebM->AddInlineClass('C_Builder_Asset_FS_PathBase');
?>