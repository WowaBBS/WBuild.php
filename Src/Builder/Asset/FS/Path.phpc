<?
  $Loader->Parent_Class('/Builder/Asset/FS/PathBase');

  class C_Builder_Asset_FS_Path extends C_Builder_Asset_FS_PathBase
  {
    Protected Function _Init(Array $Args)
    {
      Parent::_Init($Args);
      if(IsSet($Args['Search'])) $this->Search=$Args['Search'];
    }
    
    Function GetDirFullPath()
    {
      return $this->GetFullPath();
    }

    Static $Search_Def=[
      'Mask'     =>false,
      'NoMask'   =>false,
      'Hidden'   =>false,
    //'Include'  =>[],
      'Exclude'  =>[],
    //'CallBack' =>False,
    ];
      
    Protected Function GetSearch()
    {
      if(IsSet($this->Search) && !Is_Array($this->Search))
        return $this->Search;
      
      $Res=$this->Create_Object('/FS/Search', Static::$Search_Def);
      if(IsSet($this->Search))
        $Res->SetParams($this->Search);
      $this->Search=$Res;
      return $Res;
    }
    
    Function GetSubPath($Path)
    {
      $Parent=$this->GetFullPath();
    //$l=StrLen($Parent);
    //if($l && SubStr($Parent, $l-1, 1)==='/')
    //  return $Parent.$Path;
      if(StrLen($Path))
        return $Parent.'/'.$Path;
      return $Parent;
    }
    
    Function Search($Path, $bIsFile=true)
    {
    //$this->Log('Debug', 'Search:',$Path,' ',$this->GetFullPath());
      $Path=$this->GetSubPath($Path);
    //$this->Log('Debug', '  ',$Path);
      if(!$bIsFile && Is_Dir($Path) || $bIsFile && Is_File($Path))
        return $Path;
      return '';
    }
    
    Function SearchDir  ($Path) { return Search($Path, false ); }
    Function SearchFile ($Path) { return Search($Path, true  ); }
    
    Protected Function _IsFile() { return false; }
    
    Var $md5='';
    
    Function InvalidateCache()
    {
      Parent::InvalidateCache();
      $this->md5='';
    }
    
    Function GetMD5()
    {
      if($this->md5)
        return $this->md5;
      $Cache=$this->GetMD5Cache();
      $Res=[];
      ForEach($this->GetSearch()->GetListArray($this->GetFullPath().'/')As $Item)
        $Res[$Item->GetLocalPath()]=$Cache->CalcMD5($Item->GetFullPath());
      KSort($Res, SORT_NATURAL);
    //$this->Debug($Res);
      $Res=Implode(':', Array_Keys($Res)).'='.
        Implode(';', Array_Values($Res));
      $Res=md5($Res);
      $this->md5=$Res;
      return $Res;
    }
  };
?>