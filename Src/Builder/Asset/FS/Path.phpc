<?
  $Loader->Parent_Class('/Builder/Asset/FS/PathBase');
  $Loader->Load_Lib('/FS/Utils');
  $Loader->Using_Module('/FS/IOFS');
  
  class C_Builder_Asset_FS_Path extends C_Builder_Asset_FS_PathBase
  {
    Protected Function _Init(Array $Args)
    {
      Parent::_Init($Args);
   #}
   #
   #Function _InitParam(Array &$Param)
   #{
   #   parent::_InitParam($Param);
   #
   #  $Mask = $Param['>Mask' ]?? Static::GetDefMask(); UnSet($Param['>Mask' ]);
   #  $Map  = $Param['>Map'  ]?? [];                   UnSet($Param['>Map'  ]);
      $Mask = $Args['>Mask' ]?? Static::GetDefMask();
      $Map  = $Args['>Map'  ]?? [];
      if($Mask!=='')
      {
        $lMask=Explode('|', $Mask);
        if(Count($lMask)>2)
          $this->Log('Fatal', 'Mask error: ', $Mask);
        if(IsSet($lMask[1]) && $lMask[1]!=='')
          ForEach(Explode(';' ,$lMask[1]) As $M)
            $Map[$M]=0;
        if($lMask[0]==='')
          $Map['*']=1;
        else
        {
          ForEach(Explode(';' ,$lMask[0]) As $M)
            $Map[$M]=1;
          if(!IsSet($Map['*']))
            $Map['*']=0;
        }
      }
   //if($Map) $this->Debug($Map);
      if($Map) $this->Search=['Filter'=>['Map'=>$Map]];
    }
    
    Static Function GetDefMask() { return ''; }
    
    Function GetDirFullPath()
    {
      return $this->GetFullPath();
    }

    Protected Function GetSearch()
    {
      if(IsSet($this->Search) && !Is_Array($this->Search))
        return $this->Search;
      
      $Res=$this->Create_Object('/FS/Search/Folder', $this->Search ??[]);
      return $this->Search=$Res;
    }
    
    Function GetSubPath($Path)
    {
      $Parent=$this->GetFullPath();
    //$l=StrLen($Parent);
    //if($l && SubStr($Parent, $l-1, 1)==='/')
    //  return $Parent.$Path;
      if(StrLen($Path))
        return $Parent.'/'.$Path;
      return $Parent;
    }
    
    Function SearchNode($Path, $Args=[])
    {
      $bIsFile =$Args['IsFile']??true;
      $Logger  =$Args['Logger']??$this;
      $InFile  =$Args['InFile']??[false];
      $NoLog   =$Args['NoLog' ]??false;
    //$this->Log('Debug', 'Search:',$Path,' ',$this->GetFullPath());
      $Res=$this->GetSubPath($Path);
      $Res=NormPath(StrTr($Res, '\\', '/'));
    //$this->Log('Debug', '  ',$Path);
      if($bIsFile? Is_File($Res):Is_Dir($Res))
      {
        $Real=StrTr(RealPath($Res), '\\', '/');
        if(StrLen($Real)!==StrLen($Res))
          $Logger->Log('Fatal', 'Different paths:', "\n",
            '   Used=',$Res  ,"\n",
            '   Real=',$Real
          )->File($InFile);
        elseif($Real!==$Res)
        {
          $RealPath=SubStr($Real, -StrLen($Path));
          if($RealPath===$Path)
          {
            if(!$NoLog)
              $Logger->Log('Warning', '??? Different paths:', "\n",
                '   Used=',$Res  ,"\n",
                '   Real=',$Real
              )->File($InFile);
          }
          else
          {
            while(SubStr($Path, 0, 3)==='../')
            {
              $Path     =SubStr($Path     ,3);
              $RealPath =SubStr($RealPath ,3);
            }
            if($RealPath!==$Path && !$NoLog)
              $Logger->Log('Error', 'Different paths:', "\n", //'Fatal', 
                '   Used=',$Path,"\n",
                '   Real=',$RealPath
              )->File($InFile); //->Debug($Real);
          }
        }
          
        return $Real;
      }
      return '';
    }
    
    Var $SubAssets=[];
    
    Function _CreateSubAsset($Path, $Type, $Param=[], Array $Args=[])
    {
      if(IsSet($this->SubAssets[$Path][$Type]))
        return $this->SubAssets[$Path][$Type];
      if(!Static::IsAbsolute($Path))
        $Param['>Parent']=$this;
      $Param[]=$Path;
      $Res=$this->CreateAsset($Type, $Param, $Args);
      $this->SubAssets[$Path][$Type]=$Res;
      return $Res;
    }
    
    Var $FoundAsset=[];
    
    Function _SearchAsset($Path, $Type, Array $Args=[])
    {
      $Res=$this->SearchNode($Path, $Args);
      if($Res==='') return null;
      
      $Logger =$Args['Logger']??$this;
      $InFile =$Args['InFile']??[false];
      
      $Base=$this->GetFullPath();
      if(false)
        $Logger->Log('Log', '_SearchAsset',"\n",
          'Current: ', $Base, "\n",
          'Search: ', $Path, "\n",
          'Res: ', $Res
        );
      $base=SubStr($Res, 0, StrLen($Base));
      if($base!=$Base)
      {
        $Path=NormPath($Path);
      //$Logger->Log('Fatal', 'Different base path',"\n",
        $Logger->Log('Error', 'Different base path',"\n",
          'For file: ', $Path, "\n",
          'Actual: ', $base, "\n",
          'Excepted: ', $Base
        )->File($InFile);
      //$Res=$Path; //??
      }
      else
      {
        if(SubStr($Res, StrLen($Base), 1)!=='/')
          $Logger->Log('Fatal', 'Unreachable C_Builder_Asset_FS_Path')->File($InFile);
        $Res=SubStr($Res, StrLen($Base)+1);
      }
    //$this->Log('Debug', 'Res=', $Res);
      return $this->_CreateSubAsset($Res, $Type, $Args['Create']['Param']??[], $Args['Create']['Args']??[]);
    }
    
  //Function GetDefaultAssetItemInfo() { return False; }
    
    Function SearchAsset($Path, $Type, $Args=[])
    {
      return $this->SubAssets[$Path][$Type] ?? $this->_SearchAsset($Path, $Type, $Args);
    }
    
  //Function SearchDir  ($Path) { return SearchNode($Path, ['IsFile'=>false ]); }
  //Function SearchFile ($Path) { return SearchNode($Path, ['IsFile'=>true  ]); }
    
    Static Protected Function _IsFile() { return false; }
    
    Var $Cached_Hash='';
    
    Function InvalidateCache()
    {
      Parent::InvalidateCache();
      $this->Cached_Hash='';
    }
    
    Function GetFiles()
    {
      $FullPath=$this->GetFullPath();
      if(!Is_Dir($FullPath))
      {
        $this->Log('Error', '"', $FullPath,'" is not directory in module ', $this->GetModule()->GetName());
        return [];
      }
      return $this->GetSearch()->GetListArray($FullPath);
    }
    
    Function GetSubAssets($AssetType)
    {
      $Files=$this->GetFiles();
      $Res=[];
      $Param=[];
      $Args=[];
      ForEach($Files As $File)
      {
        $Path=$File->GetLocalPath();
        if(StrLen($Path)==0 || $Path[0]!='/')
          $this->Log('Error' ,'TODO: Some times ago it gave path with / but now without it')
            ('If you changed this functional please remove this log and do it right')->File($Path);
        else
          $Path=SubStr($Path, 1);
        $Asset=$this->_CreateSubAsset($Path, $AssetType, $Param, $Args);
        $Res[$Asset->GetKey()]=$Asset;
      }
      return $Res;
    }
    
    Function GetHash()
    {
      if($this->Cached_Hash)
        return $this->Cached_Hash;
      // This functional is not used?!
      $Performance=$this->GetManager()->Performance->Start(['Name'   =>'Md5Dir']);
      $Cache=$this->GetMD5Cache();
      $Res=[];
      ForEach($this->GetFiles() As $Item)
        $Res[$Item->GetLocalPath()]=$Cache->CalcMD5($Item->GetFullPath());
      KSort($Res, SORT_NATURAL);
    //$this->Debug($Res);
      $Res=Implode(':', Array_Keys($Res)).'='.
        Implode(';', Array_Values($Res));
      $Res=md5($Res);
      $this->Cached_Hash=$Res;
      return $Res;
    }
  };
?>