<?
  $Loader->Parent_Class('/Builder/Asset/FS/PathBase');
  $Loader->Load_Lib('/FS/IOFS');

  class C_Builder_Asset_FS_Path extends C_Builder_Asset_FS_PathBase
  {
    Protected Function _Init(Array $Args)
    {
      Parent::_Init($Args);
   #}
   #
   #Function _InitParam(Array &$Param)
   #{
   #   parent::_InitParam($Param);
   #
   #  $Mask = $Param['>Mask' ]?? Static::GetDefMask(); UnSet($Param['>Mask' ]);
   #  $Map  = $Param['>Map'  ]?? [];                   UnSet($Param['>Map'  ]);
      $Mask = $Args['>Mask' ]?? Static::GetDefMask();
      $Map  = $Args['>Map'  ]?? [];
      if($Mask!=='')
      {
        $lMask=Explode('|', $Mask);
        if(Count($lMask)>2)
          $this->Log('Fatal', 'Mask error: ', $Mask);
        if(IsSet($lMask[1]) && $lMask[1]!=='')
          ForEach(Explode(';' ,$lMask[1]) As $M)
            $Map[$M]=0;
        if($lMask[0]==='')
          $Map['*']=1;
        else
        {
          ForEach(Explode(';' ,$lMask[0]) As $M)
            $Map[$M]=1;
          if(!IsSet($Map['*']))
            $Map['*']=0;
        }
      }
   //if($Map) $this->Debug($Map);
      if($Map) $this->Search=['Filter'=>['Map'=>$Map]];
    }

    Static Function GetDefMask() { return ''; }
    
    Function GetDirFullPath()
    {
      return $this->GetFullPath();
    }

    Protected Function GetSearch()
    {
      if(IsSet($this->Search) && !Is_Array($this->Search))
        return $this->Search;
      
      $Res=$this->Create_Object('/FS/Search/Folder', $this->Search ??[]);
      return $this->Search=$Res;
    }
    
    Function GetSubPath($Path)
    {
      $Parent=$this->GetFullPath();
    //$l=StrLen($Parent);
    //if($l && SubStr($Parent, $l-1, 1)==='/')
    //  return $Parent.$Path;
      if(StrLen($Path))
        return $Parent.'/'.$Path;
      return $Parent;
    }
    
    Function Search($Path, $bIsFile=true)
    {
    //$this->Log('Debug', 'Search:',$Path,' ',$this->GetFullPath());
      $Res=$this->GetSubPath($Path);
      $Res=NormPath($Res);
    //$this->Log('Debug', '  ',$Path);
      if(!$bIsFile && Is_Dir($Res) || $bIsFile && Is_File($Res))
      {
        $Real=StrTr(RealPath($Res), '\\', '/');
        if(StrLen($Real)!==StrLen($Res))
          $this->Log('Fatal', 'Different paths:', "\n",
            '   Used=',$Res  ,"\n",
            '   Real=',$Real ,"\n"
          );
        elseif($Real!==$Res)
          $this->Log('Error', 'Different paths:', "\n",
            '   Used=',SubStr($Real, -StrLen($Path))  ,"\n",
            '   Real=',$Path ,"\n"
          );
          
        return $Real;
      }
      return '';
    }
    
    Var $SubAssets=[];
    
    Function _CreateSubAsset($Path, $Type, $Param=[], Array $Args=[])
    {
      if(IsSet($this->SubAssets[$Path][$Type]))
        return $this->SubAssets[$Path][$Type];
      $Param['>Parent']=$this;
      $Param[]=$Path;
      $Res=$this->CreateAsset($Type, $Param, $Args);
      $this->SubAssets[$Path][$Type]=$Res;
      return $Res;
    }
    
    Function _SearchAsset($Path, $Type, $bIsFile=true, $Param=[], Array $Args=[])
    {
      $Res=$this->Search($Path, $bIsFile);
      if($Res!=='')
        return $this->_CreateSubAsset($Res, $Type, $Param, $Args);
      return null;
    }
    
  //Function GetDefaultAssetItemInfo() { return False; }
    
    Function SearchAsset($Path, $Type, $bIsFile=true)
    {
      return $this->SubAssets[$Path][$Type] ?? $this->_SearchAsset($Path, $Type, $bIsFile);
    }
    
  //Function SearchDir  ($Path) { return Search($Path, false ); }
  //Function SearchFile ($Path) { return Search($Path, true  ); }
    
    Protected Function _IsFile() { return false; }
    
    Var $md5='';
    
    Function InvalidateCache()
    {
      Parent::InvalidateCache();
      $this->md5='';
    }
    
    Function GetFiles()
    {
      return $this->GetSearch()->GetListArray($this->GetFullPath());
    }
    
    Function GetMD5()
    {
      if($this->md5)
        return $this->md5;
      $Cache=$this->GetMD5Cache();
      $Res=[];
      ForEach($this->GetFiles() As $Item)
        $Res[$Item->GetLocalPath()]=$Cache->CalcMD5($Item->GetFullPath());
      KSort($Res, SORT_NATURAL);
    //$this->Debug($Res);
      $Res=Implode(':', Array_Keys($Res)).'='.
        Implode(';', Array_Values($Res));
      $Res=md5($Res);
      $this->md5=$Res;
      return $Res;
    }
  };
?>