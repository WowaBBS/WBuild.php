<?  $Loader->Parent_Class('/Object');  $Loader->Load_Type('/Builder/Asset/Info');   class C_Builder_Asset_Base extends C_Object  {  //Var $AssetClass=''; // TODO: Move into class object;  //Function GetAssetClass() { return $this->AssetClass; }    Var $Outer=false;        Protected Function _Init(Array $Args)    {      Parent::_Init($Args);    //$this->AssetClass=$Args['Type'];      if(!IsSet($Args['Info']))        UnSupported();          $this->Info=$Args['Info'];      if(!IsSet($Args['Outer']))        UnSupported();      $this->Outer=$Args['Outer'];            if(IsSet($Args['Param']))      {        $Param=$Args['Param'];      //unset($Args['Param']);        $this->_InitParam($Param);        Self::CheckEmptyParam($Param);      }    }        //****************************************************************    // NameSpaces        Function UpdateNS($Info)    {      $Info=self::GetTypeInfo($Info);      return $Info->Merge($this->Info);    }        Static Function GetTypeInfo($TypeName)    {      return T_Builder_Asset_Info::Get($TypeName);    }        Static Function MakeNS($Type, $NS)    {      if($NS=='')        return $Type;      if(StrPos($NS, ':')===false)        $NS=':'.$NS; // TODO: Error      $Type =self::GetTypeInfo($Type )->Type   ;      $NS   =self::GetTypeInfo($NS   )->NS_Str ;      return $Type.$NS;    }        Function MakeNS_ByParam(String $Type, Array $Param, String $ParamName, ?String $Default=null, String $ParamName2='NS')    {      return self::MakeNS($Type, $this->GetNS_ByParam($Type, $Param, $ParamName, $Default, $ParamName2));    }        Function GetNS_ByParam(String $Type, Array $Param, String $ParamName, $Default=null, String $ParamName2='NS')    {      if(IsSet($Param[$ParamName ])) return $Param[$ParamName ];      if(IsSet($Param[$ParamName2])) return $Param[$ParamName2];      if(!Is_Null($Default)) return $Default;      if($this->Info->Has_NS && !$this->Info->Has_NS) return $this->Info['Str'];      return '';    }      //****************************************************************  //Function GetKey() { return null; }    Function GetKey() { return $this->Object_Id; }        Function AddTask($Task)    {      if(!IsSet($this->Tasks))        $this->Tasks=[];      $this->Tasks[]=$Task;    }        Static Function CheckEmptyParam($Param)    {      if(!Count($Param)) return;      Var_Dump($Param);      throw new Exception('Invalid parameters');    }        Static Function _ParseParams($Args)    {      return [$Args];    }        Function _InitParam(Array &$Param)    {    }      //****************************************************************  // Assets functional    Function AddAssets($List)    {      return $this->Outer->AddAssets($List);    }    Protected Function _CreateAsset($Info, $Param=[], Array $Args=[])    {      return $this->Outer->_CreateAsset($Info, $Param, $Args);    }        Protected Function _CreateAssets($Info, $Param=[], Array $Args=[])    {      return $this->Outer->_CreateAssets($Info, $Param, $Args);    }        Protected Function _GetAssets($Info)    {      return $this->Outer->_GetAssets($Info);    }        Protected Function _RemoveAssets($Info)    {      return $this->Outer->_RemoveAssets($Info);    }        Function CreateAsset($Type, $Param=[], Array $Args=[], $NS=null)    {      return $this->_CreateAsset($this->UpdateNS($Type), $Param, $Args);    }        Function CreateAssets($Type, $Param=[], Array $Args=[], $NS=null)    {      return $this->_CreateAssets($this->UpdateNS($Type), $Param, $Args);    }        Function GetAssets($Type)    {      return $this->_GetAssets($this->UpdateNS($Type));    }        Function GetAssetsR($Type)    {      return Array_Reverse($this->_GetAssets($this->UpdateNS($Type)->Reverse()), true);    }        Function RemoveAssets($Type)    {      return $this->_RemoveAssets($this->UpdateNS($Type));    }        Function RemoveAssetsR($Type)    {      return Array_Reverse($this->_RemoveAssets($this->UpdateNS($Type)->Reverse()), true);    }        Function GetLastAsset($Type)    {      $Res=$this->GetAssetsR($Type);      ForEach($Res As $k=>$v)        return $v;      return null;    }        Function RequireAsset($Type)    {      $Res=$this->GetLastAsset($Type);      if(!$Res)        $Res=$this->CreateAsset($Type);      return $Res;    }      //****************************************************************        Protected Function _Debug_Info(Array &$Res)    {      Parent::_Debug_Info($Res);      if($this->Outer) unset($Res['Outer']);      UnSet($Res['Depends']); // TODO: ???      $Res['Info']=$Res['Info']->Name;    //UnSet($Res['Depends']); // TODO: ???    }      //****************************************************************  /*    Var $Depends=[];        Function DependsOn()    {    //echo $this->Object_Id, "\n";    //return;      ForEach(func_get_args() As $Item)        If(!Is_Array($Item))          $this->Depends[$Item->Object_Id]=$Item;        Else ForEach($Item As $I)          If(!Is_Array($Item))            $this->Depends[$I->Object_Id]=$I;          else            $this->DependsOn($I);    }  */  //****************************************************************  // Context        Function GetManager()    {      return $this->GetModuleInstance()->Manager;    }        Function GetModuleInstance()    {      return $this->Outer->GetModuleInstance();    }        Function GetContext()    {      return $this->GetModuleInstance()->Context;    }        Function GetConfig()    {      return $this->GetContext()->Config;    }        Function AddFrom($Asset, $bPublic=null, $bDebug=false)    {      $this->Outer->AddFrom($Asset, $bPublic, $bDebug);    }        Function IsDebug() { return $this->GetContext()->IsDebug(); }    Function IsStatic() { return $this->GetContext()->IsStatic(); }    Function IsRelease() { return !$this->IsDebug(); }      //****************************************************************      Function ShouldBePrivate ($v) { return $v; }    Function ShouldBePublic  ($v) { return $v; }    Function CreateExec()    {      return $this->Create_Object('/Builder/Task/Exec', ['Asset'=>$this]);    }        Function GetMakeTasks(Array &$Res, Array &$Depends)    {    //echo '!', $this, "\n";      if(IsSet($Depends[$this->Object_Id]))      {        if($Depends[$this->Object_Id]==1)          echo 'Circ', "\n";        return;      }     #$Depends[$this->Object_Id]=1;     #ForEach($this->Depends As $Item)     #  $Item->GetMakeTasks($Res, $Depends);     #$Depends[$this->Object_Id]=2;      if(IsSet($this->Tasks))        ForEach($this->Tasks As $Task)          if(!IsSet($Res[$Task->Object_Id]))          {            $Task->GetMakeTasks($Res);            $Res[$Task->Object_Id]=$Task;          }         #else         #  Echo "Task already exists: \n".$Task->ToString();    }        Function Remove()    {      $this->Outer->RemoveAsset($this);    }  };?>