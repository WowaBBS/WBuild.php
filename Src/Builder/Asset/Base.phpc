<?
  $Loader->Parent_Class('/Object');
  $Loader->Load_Type('/Builder/Asset/Info');
  $Loader->Load_Type('/Builder/CachePath');
 
  class C_Builder_Asset_Base extends C_Object
  {
  //Var $AssetClass=''; // TODO: Move into class object;
  //Function GetAssetClass() { return $this->AssetClass; }
    Var $Asset_Info =null;
    Var $Outer      =false;
    
    Protected Function _Init(Array $Args)
    {
      Parent::_Init($Args);
    //$this->AssetClass=$Args['Type'];
      if(!IsSet($Args['Asset_Info']))
        $this->Log('Fatal', 'Unreachable place');
    
      $this->Asset_Info=$Args['Asset_Info'];
      if(!IsSet($Args['Outer'])) // TODO: InstanceOf
        $this->Log('Fatal', 'Unreachable place');
      $this->Outer=$Args['Outer'];
      
      if(IsSet($Args['Param']))
      {
        $Param=$Args['Param'];
      //unset($Args['Param']);
        $this->_InitParam($Param);
        Self::CheckEmptyParam($Param);
      }
      if(IsSet($Args['>Keys']))
        $this->Keys=(Array)$Args['>Keys'];
    }
    
    Function HasKey($Key)
    {
      ForEach($this->Keys ?? [] As $_Key)
        if($_Key===$Key)
          return true;
      return false;
    }
    
    //****************************************************************
    // NameSpaces
    
    Function UpdateNS($Asset_Info)
    {
      $Asset_Info=self::GetTypeInfo($Asset_Info);
      return $Asset_Info->Merge($this->Asset_Info);
    }
    
    Static Function GetTypeInfo($TypeName)
    {
      return T_Builder_Asset_Info::Get($TypeName);
    }
    
    Static Function MakeNS($Type, $NS)
    {
      if($NS=='')
        return $Type;
      if(StrPos($NS, ':')===false)
        $NS=':'.$NS; // TODO: Error
      $Type =self::GetTypeInfo($Type )->Type   ;
      $NS   =self::GetTypeInfo($NS   )->NS_Str ;
      return $Type.$NS;
    }
    
    Function MakeNS_ByParam(String $Type, Array $Param, String $ParamName, ?String $Default=null, String $ParamName2='NS')
    {
      return self::MakeNS($Type, $this->GetNS_ByParam($Type, $Param, $ParamName, $Default, $ParamName2));
    }
    
    Function GetNS_ByParam(String $Type, Array $Param, String $ParamName, $Default=null, String $ParamName2='NS')
    {
      if(IsSet($Param[$ParamName ])) return $Param[$ParamName ];
      if(IsSet($Param[$ParamName2])) return $Param[$ParamName2];
      if(!Is_Null($Default)) return $Default;
      if($this->Asset_Info->Has_NS && !$this->Asset_Info->Has_NS) return $this->Asset_Info['Str'];
      return '';
    }
  
    //****************************************************************
  //Function GetKey() { return null; }
    Function GetKey() { return $this->Object_Id; }
    
    Function AddTask($Task)
    {
      if(!IsSet($this->Tasks))
        $this->Tasks=[];
      $this->Tasks[$Task->Object_Id]=$Task;
    }
    
    Static Function CheckEmptyParam($Param)
    {
      if(!Count($Param)) return;

      Var_Dump($Param);
      // TODO: Log
      throw new Exception('Invalid parameters');
    }
    
    Static Function _ParseParams($Args)
    {
      return [$Args];
    }
    
    Function _InitParam(Array &$Param)
    {
    }
    
  //****************************************************************
  // Assets functional

    Function AddAssets($List)
    {
      return $this->Outer->AddAssets($List);
    }

    Protected Function _CreateAsset   ($Info, $Param, Array $Args) { return $this->Outer->_CreateAsset   ($Info, $Param, $Args); }
    Protected Function _CreateAssets  ($Info, $Param, Array $Args) { return $this->Outer->_CreateAssets  ($Info, $Param, $Args); }
    Protected Function _GetAssets     ($Info                     ) { return $this->Outer->_GetAssets     ($Info               ); }
    Protected Function _ExtractAssets ($Info                     ) { return $this->Outer->_ExtractAssets ($Info               ); }
    Protected Function _RemoveAssets  ($Info, Array $Assets      ) { return $this->Outer->_RemoveAssets  ($Info, $Assets      ); }
    Protected Function _RemoveAsset   ($Info, $Asset             ) { return $this->Outer->_RemoveAssets  ($Info, $Asset       ); }

    Function CreateAsset   ($Type, $Param=[], Array $Args=[]) { return $this->_CreateAsset   ($this->UpdateNS($Type), $Param, $Args); }
    Function CreateAssets  ($Type, $Param=[], Array $Args=[]) { return $this->_CreateAssets  ($this->UpdateNS($Type), $Param, $Args); }
    Function GetAssets     ($Type                           ) { return $this->_GetAssets     ($this->UpdateNS($Type)               ); }
    Function ExtractAssets ($Type                           ) { return $this->_ExtractAssets ($this->UpdateNS($Type)               ); }
    Function RemoveAssets  ($Type, Array $Assets            ) { return $this->_RemoveAssets  ($this->UpdateNS($Type), $Assets      ); }
    Function RemoveAsset   ($Type,       $Asset             ) { return $this->_RemoveAssets  ($this->UpdateNS($Type), $Asset       ); }

    Function GetAssetsR     ($Type) { return Array_Reverse($this->_GetAssets     ($this->UpdateNS($Type)->Reverse()), true); }
    Function ExtractAssetsR ($Type) { return Array_Reverse($this->_ExtractAssets ($this->UpdateNS($Type)->Reverse()), true); }
    
    Function GetLastAsset($Type)
    {
      $Res=$this->GetAssetsR($Type);
      ForEach($Res As $k=>$v)
        return $v;
      return null;
    }
     
    Function RequireAsset($Type)
    {
      $Res=$this->GetLastAsset($Type);
      if(!$Res)
        $Res=$this->CreateAsset($Type);
      return $Res;
    }
    
  //****************************************************************
  // Debug
   
    Function _ToDebugInfo() { return $this->GetKey(); }

    Protected Function _Debug_Info(Array &$Res)
    {
      Parent::_Debug_Info($Res);
      if($this->Outer) unset($Res['Outer']);
      UnSet($Res['Depends']); // TODO: ???
      $Res['Asset_Info']=$Res['Asset_Info']->Name;
      if(IsSet($this->Tasks))
      {
        $Tasks=[];
        ForEach($this->Tasks As $Task)
          $Tasks[]=$Task->Object_Id;
        $Res['Tasks']=$Tasks;
      }
    //UnSet($Res['Depends']); // TODO: ???
    }
    
  //****************************************************************
  /*
    Var $Depends=[];
    
    Function DependsOn(... $Args)
    {
    //return;
      ForEach($Args As $Item)
        If(!Is_Array($Item))
          $this->Depends[$Item->Object_Id]=$Item;
        Else ForEach($Item As $I)
          If(!Is_Array($Item))
            $this->Depends[$I->Object_Id]=$I;
          else
            $this->DependsOn($I);
    }
  */
  //****************************************************************
  // Context
    
    Function GetModuleInstance() { return $this->Outer->GetModuleInstance(); }
    Function GetManager() { return $this->GetModuleInstance()->Manager; }
    Function GetModule() { return $this->GetModuleInstance()->GetModule(); }
    Function GetContext() { return $this->GetModuleInstance()->Context; }
    Function GetConfig() { return $this->GetContext()->Config; }
    Function GetDependsModule($Name)
    {
      return $this->GetModuleInstance()->GetDependsModule($Name);
    }
    
    Function AddFrom(C_Builder_Asset_List $Asset, $bPublic=null, $bDebug=false)
    {
      $this->Outer->AddFrom($Asset, $bPublic, $bDebug);
    }
    
    Function IsDebug() { return $this->GetContext()->IsDebug(); }
    Function IsStatic() { return $this->GetContext()->IsStatic(); }
    Function IsRelease() { return !$this->IsDebug(); }
    
  //****************************************************************
    Function FindFile($File, $Cfg=[])
    {
      static $Load=true;
      if($Load)
      {
        $Load=false;
        $this->Loader->Load_Class('/Builder/Asset/FS/PathBase');
      }
      return C_Builder_Asset_FS_PathBase::GlobalSearch($File, $this, $Cfg);
    }
  //****************************************************************
  // Events
  
    Function DoEvent($Type, ...$Args) { return $this->_DoEvent($this, $Type, ...$Args); }
    Protected Function _DoEvent($Asset, $Type, ...$Args)
    {
      return $this->Outer->_DoEvent($Asset, $Type, ...$Args);
    }
    
  //****************************************************************
  
    Function ShouldBePrivate ($v) { return $v; }
    Function ShouldBePublic  ($v) { return $v; }
    Function IsCopyable      ($From, $To) { return true; }

    Function CreateExec(String $CachePath)
    {
      $Res=$this->Create_Object('/Builder/Task/Exec', ['Asset'=>$this]);
    //$Res->Cache=new TCachePath($CachePath);
      $Res->CachePath=$CachePath;
      return $Res;
    }
    
    Function GetMakeTasks(Array &$Res, Array &$Depends)
    {
      if(IsSet($Depends[$this->Object_Id]))
      {
        if($Depends[$this->Object_Id]==1)
          $this->Log('Error', 'Circular dependencies');
        return;
      }
     #$Depends[$this->Object_Id]=1;
     #ForEach($this->Depends As $Item)
     #  $Item->GetMakeTasks($Res, $Depends);
     #$Depends[$this->Object_Id]=2;
      if(IsSet($this->Tasks))
        ForEach($this->Tasks As $Task)
          if(!IsSet($Res[$Task->Object_Id]))
          {
            $Task->GetMakeTasks($Res);
            $Res[$Task->Object_Id]=$Task;
          }
         #else
         #  $this->Log('Error', 'Task already exists:', $Task->ToString());
    }
    
    Function RemoveFromOuter()
    {
      $this->Outer->FullRemoveAsset($this);
    }
  };
?>