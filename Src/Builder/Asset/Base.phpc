<?  $Loader->Parent_Class('/Object');   class C_Builder_Asset_Base extends C_Object  {  //Var $AssetClass=''; // TODO: Move into class object;  //Function GetAssetClass() { return $this->AssetClass; }        Protected Function _Init(Array $Args)    {      Parent::_Init($Args);    //$this->AssetClass=$Args['Name'];          if(IsSet($Args['Outer']))      {        $this->Outer=$Args['Outer'];      }      else      {} // TODO: Error            if(IsSet($Args['Param']))      {        $Param=$Args['Param'];      //unset($Args['Param']);        $this->_InitParam($Param);        Self::CheckEmptyParam($Param);      }    }      //Function GetKey() { return null; }    Function GetKey() { return $this->Object_Id; }        Function AddTask($Task)    {      if(!IsSet($this->Tasks))        $this->Tasks=[];      $this->Tasks[]=$Task;    }        Static Function CheckEmptyParam($Param)    {      if(!Count($Param)) return;      Var_Dump($Param);      throw new Exception('Invalid parameters');    }        Function _ParseParams($Args)    {      return [$Args];    }        Function _InitParam(Array &$Param)    {    }        Static Function _ParseParamsArrayField($Args, $FieldName)    {      $Param=$Args['Param'];      unset($Args['Param']);      $Res=[];      while(IsSet($Param[0 ]))      {        $_Args=$Args;        $_Args[$FieldName]=Array_Shift($Param);        $Res[]=$_Args;      }      if(IsSet($Param[$FieldName]))      {        $Args[$FieldName]=Array_Shift($Param);        $Res[]=$Args;        Unset($Param[$FieldName]);      }      self::CheckEmptyParam($Param);      return $Res;    }  //****************************************************************  // Assets functional    Function CreateAsset(String $Name, $Param=[], Array $Args=[])    {      return $this->Outer->CreateAsset($Name, $Param, $Args);    }        Function GetAssets($Name)    {      return $this->Outer->GetAssets($Name);    }        Function GetAssetsR($Name)    {      return Array_Reverse($this->GetAssets($Name));    }        Function RemoveAssetsR($Name)    {      return Array_Reverse($this->RemoveAssets($Name));    }        Function GetLastAsset($Name)    {      $Res=$this->GetAssets($Name);      $c=count($Res);      return $c>0? $Res[$c-1]:null;    }        Function RequireAsset($Name)    {      $Res=$this->GetLastAsset($Name);      if(!$Res)        $Res=$this->CreateAsset($Name);      return $Res;    }      //****************************************************************        Protected Function _Debug_Info(Array &$Res)    {      Parent::_Debug_Info($Res);      if(IsSet($this->Outer) && $this->Outer!==null) unset($Res['Outer']);      UnSet($Res['Depends']); // TODO: ???    //UnSet($Res['Depends']); // TODO: ???    }      //****************************************************************    Var $Depends=[];        Function DependsOn()    {    //echo $this->Object_Id, "\n";    //return;      ForEach(func_get_args() As $Item)        If(!Is_Array($Item))          $this->Depends[$Item->Object_Id]=$Item;        Else ForEach($Item As $I)          If(!Is_Array($Item))            $this->Depends[$I->Object_Id]=$I;          else            $this->DependsOn($I);    }  //****************************************************************  // Context    Function GetModuleInstance()    {      return $this->Outer->GetModuleInstance();    }        Function AddFrom($Asset, $bPublic=null, $bDebug=false)    {      $this->Outer->AddFrom($Asset, $bPublic, $bDebug);    }      //****************************************************************      Function ShouldBePrivate ($v) { return $v; }    Function ShouldBePublic  ($v) { return $v; }    Function CreateExec()    {      return $this->Create_Object('/Builder/Exec');    }        Function GetMakeTasks(Array &$Res, Array &$Depends)    {    //echo '!', $this, "\n";      if(IsSet($Depends[$this->Object_Id]))      {        if($Depends[$this->Object_Id]==1)          echo 'Circ', "\n";        return;      }      $Depends[$this->Object_Id]=1;      ForEach($this->Depends As $Item)        $Item->GetMakeTasks($Res, $Depends);      $Depends[$this->Object_Id]=2;      if(IsSet($this->Tasks))        ForEach($this->Tasks As $Task)          if(IsSet($Res[$Task->Object_Id]))            Echo "Task already exists";          else            $Res[$Task->Object_Id]=$Task;    }  };?>