<?
  $Loader->Parent_Class('/Builder/Asset/Base');
//$Loader->Parent_Class('/Builder/Asset/Inline');

  class C_Builder_Asset_Target_Copy extends C_Builder_Asset_Base//extends C_Builder_Asset_Inline
  {
    Var $FromAssets   ;
    Var $CopingAssets ;
    Var $TargetDir    ;
    
  //Static Function _ParseParams($Args)
  //  $Outer=$Args['Outer'];
  //  $Param=$Args['Param'];
    Function _InitParam(Array &$Param)
    {
      parent::_InitParam($Param);

      $From =$Param[0]??$Param['From' ]    ; UnSet($Param[0]); UnSet($Param['From' ]);
      $To   =$Param[1]??$Param['To'   ]??''; UnSet($Param[1]); UnSet($Param['To'   ]);
     
      $TargetDir=$To? $this->CreateAsset('Target/Dir', $To):false;
      $this->TargetDir=$this->GetLastAsset('Target/Dir');
        
      $this->FromAssets=$From =$this->GetAssets($From);
      
     #ForEach($From As $FromItem)
     #  ForEach($FromItem->GetFileDepends() As $Item)
     #    $From[$Item->Object_Id]=$Item;
      $this->CopingAssets=$From=C_Builder_Asset_FS_PathBase::_GetFileDependsR($From);
      $Outer=$this->Outer;
      
      ForEach($From As $i)
      {
      //$Dest=$this->CreateAsset('Target/File', [$i->GetLocalPath(), '>Create'=>1]);
        $Dest=$this->CreateAsset('Target/File', [$i->GetFileName(), '>Create'=>1]);
        [$Dir, $Name]=$Dest->GetDirAndName();
        $EnumCache=$Outer->GetModuleInstance()->EnumCache;
        $Num=$EnumCache->AllocNum($Dir, 'Copy', ['Pad'=>1]);
        $ResNick=$Num.'/'.$Name;
      //$Compiler=$Outer->RequireAsset('Cpp/Compiler')->Instance;
      //$OutPath=$Compiler->CreateOutPath($Outer);
        $I=$Outer->GetModuleInstance();
        $OutPath=$I->EnumCache->FullPath;
        
        $Exec=$Dest->CreateExec([
          'CachePath'     =>$OutPath.'Task/Copy/'.$ResNick,
          'Task_Name_Add' =>'Copy',
        ]);
        
        $Exec->RemoveResultOnFailed=true;
        $Exec->AddCheckInput($i);
        $Exec->MkDir($Dest);
        $Exec->Copy($i, $Dest);

        $Exec->AddCheckResultFile($Dest);
        $Exec->SaveCallTo();
        $Exec->Exec_Finish();
      }
      
      if($TargetDir)
        $TargetDir->RemoveFromOuter();
        
    //return [];
    }
  };
?>