<?
  $Loader->Parent_Class('/Builder/Asset/Base');
  $Loader->Using_Module('/Array');
  
  class C_Builder_Asset_List extends C_Builder_Asset_Base
  {
    Var $Assets_List      =[]; // Array // List+Private+Public
    Var $Assets_Removed   =[]; // Array // TODO: Can remove it, only for debug
    Var $Assets_Private   =[]; // Array // Private+Public
    Var $Assets_Public    =[]; // Array
    Var $Assets_IsPrivate =true ; // TODO: Remove? It`s always true
    Var $Assets_IsPublic  =false;

    Protected Function _Init(Array $Args)
    {
      if($Outer=$Args['Outer'])
      {
        $this->Assets_List     =$Outer->Assets_List     ;
      //$this->Assets_Private  =$Outer->Assets_Private  ;
      //$this->Assets_Public   =$Outer->Assets_Public   ;
      //$this->Assets_IsPublic =$Outer->Assets_IsPublic ;
      }
      Parent::_Init($Args);
    }
    
    Function _InitParam(Array &$Param)
    {
      parent::_InitParam($Param);
      $this->AddAssets($Param);
      $Param=[];
    }
    
    Function AddAssets($List)
    {
      ForEach($List As $k=>$v)
      {
        if(!Is_String($k))
          $k=Array_Shift_Checked($v);
        $this->CreateAsset($k, $v);
      }
    }
    
    Function IsModuleInstance() { return false; }
    
    Private Function _OnRemove($Asset)
    {
      if(Is_Null($Asset)) return;
      $this->Assets_Removed[$Asset->Object_Id]=$Asset;
    }
    
    Private Static Function __Add(&$L, $KeyType, $K, $Asset)
    {
      $Res=null;
      if(!IsSet($L[$KeyType]))
        $L[$KeyType]=[];
      $L=&$L[$KeyType];
      if(IsSet($L[$K]))
      {
        $Res=$L[$K];
        UnSet($L[$K]);
        if($Res->Object_Id===$Asset->Object_Id)
          $Res=null;
      }
      $L[$K]=$Asset;
      return $Res;
    }
    
    Private Static Function __Remove(&$L, $KeyType, $K, $Asset)
    {
      if(!IsSet($L[$KeyType]))
        return;
      $L=&$L[$KeyType];
      if(IsSet($L[$K]) && $L[$K]->Object_Id===$Asset->Object_Id)
      {
        UnSet($L[$K]);
        return true;
      }
      return false;
    }
    
    Private Static Function __Exists(&$L, $KeyType, $K, $Asset)
    {
      if(!IsSet($L[$KeyType]))
        return;
      $L=&$L[$KeyType];
      return IsSet($L[$K]) && $L[$K]->Object_Id===$Asset->Object_Id;
    }
    
    Function __AddAsset(String $KeyType, C_Builder_Asset_Base $Asset)
    {
      $K=$Asset->GetKey();
      $Overrided=Self::__Add($this->Assets_List, $KeyType, $K, $Asset);
      $this->_OnRemove($Overrided);
      if($Asset->ShouldBePrivate($this->Assets_IsPrivate))
        Self::__Add($this->Assets_Private, $KeyType, $K, $Asset);
      if($Asset->ShouldBePublic($this->Assets_IsPublic))
        Self::__Add($this->Assets_Public, $KeyType, $K, $Asset);
    }
    
    Private Function GetSubInfo(String $NameType, $OwnerInfo)
    {
      return self::GetTypeInfo($NameType)->Merge($OwnerInfo);
    }
    
    Private Function _Create(Array &$Res, Array $Args)
    {
      $List=$Args['Asset_Info']->ParseParams($Args);
      ForEach($List As $Item)
      {
        if(!IsSet($Item['Asset_Info']))
          if(IsSet($Item['Type']))
            $Item['Asset_Info']=Self::GetSubInfo($Item['Type'], $Args['Asset_Info']);
          else
          {
            $this->Debug($List);
            $this->Log('Error', 'Haven`t Type');
            UnSet($Args['Outer']);
            $this->Debug($Args);
            UnSupported();
          }
        $Asset_Info=$Item['Asset_Info'];
        $Obj=$this->Create_Object($Asset_Info->Class, $Item);
        ForEach($Asset_Info->List As $Key)
          $this->__AddAsset($Key, $Obj);
        $Res[]=$Obj;
        $this->DoEvent('Created', $Obj);
      }
    }
    
    Function CheckCondition($Condition, $Args=[])
    {
      $Condition_Factory=$this->Get_Singleton('/Builder/Condition/Factory');
      $Condition=$Condition_Factory->Create($Condition);
      $z=$Condition->CheckAsset($this, $Args);
      $Condition->Done();
    //$Condition_Factory->Done();
      return $z;
    }
      
    Function _CreateAssets($Asset_Info, $Param, Array $Args)
    {
      if(!Is_Array($Param))
        $Param=[$Param];
      if(IsSet($Param['>Sub']))
      {
        $Sub=$Param['>Sub'];
        UnSet($Param['>Sub']);
        Array_UnShift($Param, $Asset_Info);
        $Sub[]=$Param;
        $Param=$Sub;
        $Asset_Info=Self::GetTypeInfo('Sub'); // TODO: Static var

       #$Deb=$this->Get_Singleton('/Debug/Manager')->Get('Asset_Sub.log');
       #$Deb->Debug($Param);
      }
      $Args['Outer'      ]=$this       ; // Only for static methods
      $Args['Asset_Info' ]=$Asset_Info ;
    //$Args['Type'       ]=$Type       ;

      if(IsSet($Param['>If']))
      {
       #$this->Log('Debug', '>If ', $Asset_Info->Name,' ',Serialize($Param['>If']));
        if(!$this->CheckCondition($Param['>If'], $Args))
          return [];
       #$this->Log('Debug', 'IsDebug   =',$this->IsDebug   ());
       #$this->Log('Debug', 'IsRelease =',$this->IsRelease ());
       #$this->Log('Debug', 'Ok');
        UnSet($Param['>If']);
       //$Args['Param' ]=$Param ;
      }
      
      if(IsSet($Param['>Debug']))
      {
        $Args['Debug']=$Param['>Debug'];
        UnSet($Param['>Debug']);
      }
      
      if(IsSet($Param['>Keys']))
      {
        $Args['>Keys']=$Param['>Keys'];
        UnSet($Param['>Keys']);
      }
      
      $Args['Param' ]=$Param ;
      
      $Res=[];
      $this->_Create($Res, $Args);
      return $Res;
    }
    
    Function _CreateAsset($Asset_Info, $Param, Array $Args)
    {
      $Res=$this->_CreateAssets($Asset_Info, $Param, $Args);
      switch(Count($Res))
      {
      case 0: return null;
      case 1: return $Res[0];
      default: return $Res;
      }
    }

    Function _GetAssets($Asset_Info)
    {
      $Res=[];
      $A=$this->Assets_List;
      ForEach($Asset_Info->List As $KeyType)
        if(IsSet($A[$KeyType]))
          $Res+=$A[$KeyType]; //+++
      return $Res;
    }
    
    Function _ExtractAssets($Asset_Info)
    {
      $Assets_List    =&$this->Assets_List    ;
      $Assets_Private =&$this->Assets_Private ;
      $Assets_Public  =&$this->Assets_Public  ;
      $Res=[];
      ForEach($Asset_Info->List As $KeyType)
        if(IsSet($Assets_List[$KeyType]))
        {
          $Rremove_List=$Assets_List[$KeyType];
          UnSet($Assets_List[$KeyType]);
          ForEach($Rremove_List As $Key=>$Asset)
          {
            Self::__Remove($Assets_Private ,$KeyType, $Key, $Asset);
            Self::__Remove($Assets_Public  ,$KeyType, $Key, $Asset);
            $Res[$Key]=$Asset;
           #$this->Log('Debug', $Asset->Asset_Info->Name);
          }
        //$Res+=$Rremove_List; //+++
        }
      ForEach($Res As $Asset)
        $this->_OnRemove($Asset);
      return $Res;
    }
    
    Function __ExistsAsset($KeyType, $Asset, $bPublic=false)
    {
      $Key=$Asset->GetKey();
      //TODO?  self::__Exists($this->Assets_Private, $KeyType, $Key, $Asset);
      if($bPublic)
        return self::__Exists($this->Assets_Public, $KeyType, $Key, $Asset);
      else
        return self::__Exists($this->Assets_List, $KeyType, $Key, $Asset);
    }
    
    Function __RemoveAsset($KeyType, $Asset)
    {
      $Key=$Asset->GetKey();
      if(!self::__Remove($this->Assets_List, $KeyType, $Key, $Asset))
        return false;
      self::__Remove($this->Assets_Private ,$KeyType ,$Key ,$Asset);
      self::__Remove($this->Assets_Public  ,$KeyType ,$Key ,$Asset);
      return true;
    }
    
    Function _RemoveAsset($Asset_Info, $Asset)
    {
      $this->_RemoveAssets($Asset_Info, [$Asset]);
    }
    
    Function _RemoveAssets($Asset_Info, $Assets)
    {
      $Assets_List    =&$this->Assets_List    ;
      $Assets_Private =&$this->Assets_Private ;
      $Assets_Public  =&$this->Assets_Public  ;
      $Res=[];
      ForEach($Asset_Info->List As $KeyType)
        if(IsSet($Assets_List[$KeyType]))
        {
          ForEach($Assets As $Asset)
          {
            $Key=$Asset->GetKey();
            Self::__Remove($Assets_List    ,$KeyType, $Key, $Asset);
            Self::__Remove($Assets_Private ,$KeyType, $Key, $Asset);
            Self::__Remove($Assets_Public  ,$KeyType, $Key, $Asset);
            $Res[$Key]=$Asset;
          }
        }
      ForEach($Res As $Asset)
        $this->_OnRemove($Asset);
      return $Res;
    }
    
    Function FullRemoveAsset($Asset)
    {
      $Key=$Asset->GetKey();
      $Res=false;
      ForEach($Asset->Asset_Info->List As $KeyType) // TODO:
        if($this->__RemoveAsset($KeyType, $Asset))
          $Res=true;
      if(!$Res)
        $this->Log('Error', 'Asset ',$Asset->Asset_Info->Name,' not found for remove in module ', $this->GetModule()->FullName);
      $this->_OnRemove($Asset);
      return $Res;
    }

    Function AddFrom(C_Builder_Asset_List $Asset, $bPublic=null, $bDebug=false)
    {
      // if $bPublic
      if(Is_Null($bPublic))
        $bPublic=$Asset->Assets_IsPublic;
    //$List=$bPublic? $Asset->Assets_Public:$Asset->Assets_List    ;
      $List=$bPublic? $Asset->Assets_Public:$Asset->Assets_Private ;
    //$this->Log('Debug', 'List: ',Count($List));
      if($bDebug)
      {
        $Added=[];
        ForEach($List As $KeyType=>$l)
          ForEach($l As $K=>$v)
            if($v->IsCopyable($Asset, $this))
              self::__Add($Added, $KeyType, $K, $v);
              
        ForEach($Added As $k=>$l)
          $Added[$k]=Array_Values($l);
        $Deb=$this->Get_Singleton('/Debug/Manager')->Get('Asset_AddFrom.log');
      //if(!IsSet($Added['List']))
      //$Deb->Debug($Added);
        $Deb->Debug($List);
      }
      ForEach($List As $KeyType=>$l)
        ForEach($l As $v)
          if($v->IsCopyable($Asset, $this))
            $this->__AddAsset($KeyType, $v);
    }
  //****************************************************************
    
    Protected Function _Debug_Info(Array &$Res)
    {
      Parent::_Debug_Info($Res);
      ForEach($Res['Assets_List'    ]As $k=>$v) $Res['Assets_List'    ][$k]=Array_Values($v);
    //ForEach($Res['Assets_Removed' ]As $k=>$v) $Res['Assets_Removed' ][$k]=Array_Values($v);
      ForEach($Res['Assets_Private' ]As $k=>$v) $Res['Assets_Private' ][$k]=Array_Values($v);
      ForEach($Res['Assets_Public'  ]As $k=>$v) $Res['Assets_Public'  ][$k]=Array_Values($v);
    }
    
  //****************************************************************
  };
?>