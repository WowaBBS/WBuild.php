<?  $Loader->Parent_Class('/Builder/Asset/Base');  $Loader->Using_Module('/Array');    class C_Builder_Asset_List extends C_Builder_Asset_Base  {    Var $List      =[]; // Array    Var $Removed   =[]; // Array // TODO: Can remove it, only for debug    Var $Public    =[]; // Array    Var $IsPrivate =true ; // TODO: Remove? It`s always true    Var $IsPublic  =false;    Protected Function _Init(Array $Args)    {      if($Outer=$Args['Outer'])      {        $this->List     =$Outer->List     ;        $this->Public   =$Outer->Public   ;        $this->IsPublic =$Outer->IsPublic ;      }      Parent::_Init($Args);    }        Function _InitParam(Array &$Param)    {      parent::_InitParam($Param);      $this->AddAssets($Param);      $Param=[];    }        Function AddAssets($List)    {      ForEach($List As $k=>$v)      {        if(!Is_String($k))          $k=Array_Shift_Checked($v);        $this->CreateAsset($k, $v);      }    }        Function IsInstance() { return false; }        Private Function _OnRemove($Asset)    {      if(Is_Null($Asset)) return;      $this->Removed[$Asset->Object_Id]=$Asset;    }        Private Static Function __Add(&$L, $KeyType, $K, $Asset)    {      $Res=null;      if(!IsSet($L[$KeyType]))        $L[$KeyType]=[];      $L=&$L[$KeyType];      if(IsSet($L[$K]))      {        $Res=$L[$K];        UnSet($L[$K]);        if($Res->Object_Id==$Asset->Object_Id)          $Res=null;      }      $L[$K]=$Asset;      return $Res;    }        Private Static Function __Remove(&$L, $KeyType, $K, $Asset)    {      if(!IsSet($L[$KeyType]))        return;      $L=&$L[$KeyType];      if(IsSet($L[$K]) && $L[$K]->Object_Id===$Asset->Object_Id)      {        UnSet($L[$K]);        return true;      }      return false;    }        Private Static Function __Exists(&$L, $KeyType, $K, $Asset)    {      if(!IsSet($L[$KeyType]))        return;      $L=&$L[$KeyType];      return IsSet($L[$K]) && $L[$K]->Object_Id===$Asset->Object_Id;    }        Function _Add(String $KeyType, C_Builder_Asset_Base $Asset)    {      $K=$Asset->GetKey();      if($Asset->ShouldBePrivate($this->IsPrivate))        $this->_OnRemove(Self::__Add($this->List, $KeyType, $K, $Asset));      if($Asset->ShouldBePublic($this->IsPublic))        Self::__Add($this->Public, $KeyType, $K, $Asset);    }        Private Function GetSubInfo(String $NameType, $OwnerInfo)    {      return self::GetTypeInfo($NameType)->Merge($OwnerInfo);    }        Private Function _Create(Array &$Res, Array $Args)    {      $List=$Args['Info']->ParseParams($Args);      ForEach($List As $Item)      {        if(!IsSet($Item['Info']))          if(IsSet($Item['Type']))            $Item['Info']=Self::GetSubInfo($Item['Type'], $Args['Info']);          else          {            $this->Debug($List);            echo 'Haven`t Type',"\n";            UnSet($Args['Outer']);            $this->Debug($Args);            UnSupported();          }        $Info=$Item['Info'];        $Obj=$this->Create_Object($Info->Class, $Item);        ForEach($Info->List As $Key)          $this->_Add($Key, $Obj);        $Res[]=$Obj;      }    }        Function CheckCondition($Condition, $Args)    {      $Condition_Factory=$this->Get_Singleton('/Builder/Condition/Factory');      $Condition=$Condition_Factory->Create($Condition);      $z=$Condition->CheckAsset($this, $Args);      $Condition->Done();    //$Condition_Factory->Done();      return $z;    }          Function _CreateAssets($Info, $Param=[], Array $Args=[])    {      if(!Is_Array($Param))        $Param=[$Param];      if(IsSet($Param['>Sub']))      {        $Sub=$Param['>Sub'];        UnSet($Param['>Sub']);        Array_UnShift($Param, $Info);        $Sub[]=$Param;        $Param=$Sub;        $Info=Self::GetTypeInfo('Sub'); // TODO: Static var       #$Deb=$this->Get_Singleton('/Debug/Manager')->Get('Asset_Sub.log');       #$Deb->Debug($Param);      }      $Args['Outer' ]=$this  ;      $Args['Info'  ]=$Info  ;    //$Args['Type'  ]=$Type  ;      $Args['Param' ]=$Param ;      if(IsSet($Param['>If']))      {       #echo '>If ', $Info->Name,' ',Serialize($Param['>If']), "\n";        if(!$this->CheckCondition($Param['>If'], $Args))          return [];       #echo 'IsDebug   =',$this->IsDebug   (),"\n";       #echo 'IsRelease =',$this->IsRelease (),"\n";       #echo "Ok\n";        UnSet($Param['>If']);        $Args['Param' ]=$Param ;      }            if(IsSet($Param['>Debug']))      {        $Args['Debug']=$Param['>Debug'];        UnSet($Param['>Debug']);      }            $Res=[];      $this->_Create($Res, $Args);      return $Res;    }        Function _CreateAsset($Info, $Param=[], Array $Args=[])    {      $Res=$this->_CreateAssets($Info, $Param, $Args);      switch(Count($Res))      {      case 0: return null;      case 1: return $Res[0];      default: return $Res;      }    }    Function _GetAssets($Info)    {      $Res=[];      $A=$this->List;      ForEach($Info->List As $KeyType)        if(IsSet($A[$KeyType]))          $Res+=$A[$KeyType]; //+++      return $Res;    }        Function _RemoveAssets($Info)    {      $A=&$this->List;      $P=&$this->Public;      $Res=[];      ForEach($Info->List As $KeyType)        if(IsSet($A[$KeyType]))        {          $R=$A[$KeyType];          UnSet($A[$KeyType]);          ForEach($R As $Key=>$Asset)          {            Self::__Remove($P  ,$KeyType, $Key, $Asset);            $Res[$Key]=$Asset;          //echo $Asset->Info->Name, "\n";          }        //$Res+=$R; //+++        }      ForEach($Res As $Asset)        $this->_OnRemove($Asset);      return $Res;    }        Function _ExistsAsset($KeyType, $Asset, $bPublic=false)    {      $Key=$Asset->GetKey();      if($bPublic)        return self::__Exists($this->Public, $KeyType, $Key, $Asset);      else        return self::__Exists($this->List, $KeyType, $Key, $Asset);    }        Function _RemoveAsset($KeyType, $Asset)    {      $Key=$Asset->GetKey();      if(!self::__Remove($this->List, $KeyType, $Key, $Asset))        return false;      self::__Remove($this->Public, $KeyType, $Key, $Asset);      return true;    }        Function RemoveAsset($Asset)    {      $Key=$Asset->GetKey();      $Res=false;      ForEach($Asset->Info->List As $KeyType)        if($this->_RemoveAsset($KeyType, $Asset))          $Res=true;      if(!$Res)        Echo 'Asset not found for remove',"\n";      $this->_OnRemove($Asset);      return $Res;    }    Function AddFrom($Asset, $bPublic=null, $bDebug=false)    {      if(Is_Null($bPublic))        $bPublic=$Asset->IsPublic;    //Echo 'Public: ',$bPublic,"\n";      $List=$bPublic? $Asset->Public:$Asset->List;    //Echo 'List: ',Count($List),"\n";      if($bDebug)      {        $Added=[];        ForEach($List As $KeyType=>$l)          ForEach($l As $K=>$v)            if(!$this->_ExistsAsset($KeyType, $v, $this->IsPublic))              self::__Add($Added, $KeyType, $K, $v);                      ForEach($Added As $k=>$l)          $Added[$k]=Array_Values($l);        $Deb=$this->Get_Singleton('/Debug/Manager')->Get('Asset_AddFrom.log');      //if(!IsSet($Added['List']))      //$Deb->Debug($Added);        $Deb->Debug($List);      }      ForEach($List As $KeyType=>$l)        ForEach($l As $v)          if(!$this->_ExistsAsset($KeyType, $v, $this->IsPublic))            $this->_Add($KeyType, $v);    }  //****************************************************************        Protected Function _Debug_Info(Array &$Res)    {      Parent::_Debug_Info($Res);      ForEach($Res['List'] As $k=>$v)        $Res['List'][$k]=Array_Values($v);    //ForEach($Res['Removed'] As $k=>$v)    //  $Res['Removed'][$k]=Array_Values($v);      ForEach($Res['Public'] As $k=>$v)        $Res['Public'][$k]=Array_Values($v);    }      //****************************************************************  };?>