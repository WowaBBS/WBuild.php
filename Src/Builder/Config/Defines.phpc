<?  $Loader->Parent_Class('/Object');    class C_Builder_Config_Defines extends C_Object  {    Var $Defines=[      'Instruction'=>[        // simd        'simd'    =>[],        'mmx'     =>['Parent'=>['simd'  ]],        'mmx+'    =>['Parent'=>['mmx'   ]],        'sse'     =>['Parent'=>['mmx'   ]],        'sse2'    =>['Parent'=>['sse'   ]],        'sse3'    =>['Parent'=>['sse2'  ]],        'ssse3'   =>['Alias '=>['sse4'  ]],        'sse4'    =>['Parent'=>['sse3'  ]],        'sse4a'   =>['Parent'=>['sse3'  ]],        'sse41'   =>['Parent'=>['sse4'  ]],        'sse42'   =>['Parent'=>['sse41' ]],      //'sisd'    =>[],      //'mimd'    =>[],        'avx'     =>[],        'avx2'    =>['Parent'=>['avx'   ]],        '3DNow'   =>[],        '3DNow+'  =>['Parent'=>['3DNow' ]],        // code        'ARMv7'   =>[],      ],      'Processor'=>[        'x86'    =>[],      //'x64'    =>[],        'arm'    =>[],      //'arm64'  =>[],      ],      'Bit'=>[        '8b'     =>[],        '16b'    =>[],        '32b'    =>[],        '64b'    =>[],      ],      'OS'=>[        'Windows' =>[],        'Win'     =>['Alias'=>'Windows'],        'Linux'   =>[],        'Mac'     =>[],        'Android' =>[],        'iOS'     =>[],        'HTML5'   =>[],      ],      'Cpp/Compiler'=>[        'GCC'       =>[],      //'GCC_Max'   =>['Required'=>['GCC']],        'VC'        =>[],      //'VC_Max'    =>['Required'=>['VC']],        'CLang'     =>[],      //'CLang_Max' =>['Required'=>['CLang']],      ],      'Build'=>[        'Test'       =>[],        'Examples'   =>[],        'Debug'      =>[],        'Release'    =>[],        'Shipping'   =>[],        'Console'    =>[],              //'Dynamic'    =>[],        'Static'     =>[],                'UnityBuild' =>[],      ],      ''=>[        'Win32'=>['Required'=>['Win', 'x86', '32b']],        'Win64'=>['Required'=>['Win', 'x86', '64b']],      ],    ];        Var $List=[];     Function GetList()    {      $Res=&$this->List;      if(count($Res))        return $Res;      // Make list      ForEach($this->Defines as $Group=>$Values)        ForEach($Values As $k=>$v)        {          $Item=$this->Create_Object('/Builder/Config/Item');          $v2=['Key'=>$k];          if($Group!=='')            $v2['Group']=$Group;          $Item->Init($v2);          $Item->Init($v);          $Item->AddTo($Res);        }      // Required      ForEach($Res As $k=>$v)        $v->PropagateDepend($Res);      return $Res;    }     Function ValidateSet($List)    {      $Keys=$this->GetList();      $Res=[];      ForEach($List as $k=>$v)      {        if(Is_Int($k))        {          $k=$v;          $v=true;        }                if(!Is_String($k))        {          Echo '[Error] Unknown key format ', $k, '=>', $v, "\n";          Continue;        }                if(!Is_Int($v) && !Is_Bool($v)) // TODO: Multi value?? && !Is_Array($v)        {          Echo '[Error] Unknown value format ', $k, '=>', $v, "\n";          Continue;        }                if(!IsSet($Keys[$k]))        {          Echo '[Error] Key don`t find ', $k, '=>', $v, "\n";        //UnSupported();          Continue;        }                  If(IsSet($Res[$k]))        {          Echo '[Error] Dublicate key ', $k, '=>', $v, "\n";          Continue;        }                $Res[$k]=$v;      }      return $Res;    }        Function Get($Key)    {      return $this->GetList()[$Key];    }  }?>