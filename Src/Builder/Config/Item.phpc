<?
  $Loader->Load_Class('/Object');

  class C_Builder_Config_Item extends C_Object
  {
    Var $Name     ='';
    Var $Alias    =[]; // +Alias, {Name1=>x, Name2=>x}
    Var $Parent   =[]; // {Name1=>v1, Name2=>v2}
    Var $Group    =[]; // {Group1=>x, Group2=>x}
    Var $Required =[]; // {Name1=>v1, Name2=>v2}
    Var $Depend   =[]; // {Name1=>x, Name2=>x}
  //Var $Set      =[];
    
    Function Init($Info)
    {
      self::Set_Map_Info($this, $this->Alias    ,$Info ,'Key'      );
      self::Set_Map_Info($this, $this->Alias    ,$Info ,'Alias'    );
      self::Set_Map_Info($this, $this->Parent   ,$Info ,'Parent'   );
      self::Set_Map_Info($this, $this->Group    ,$Info ,'Group'    );
      self::Set_Map_Info($this, $this->Required ,$Info ,'Required' );
      self::Set_Map_Info($this, $this->Depend   ,$Info ,'Depend'   );
    //self::Set_Map_Info($this, $this->Set      ,$Info ,'Set'      );
      ForEach($this->Alias As $k=>$tmp)
      {
        $this->Name=$k;
        break;
      }
    }
    
    Function MergeWith($Obj)
    {
      self::Merge_Map($this->Alias    ,$Obj->Alias    );
      self::Merge_Map($this->Parent   ,$Obj->Parent   );
      self::Merge_Map($this->Group    ,$Obj->Group    );
      self::Merge_Map($this->Required ,$Obj->Required );
      self::Merge_Map($this->Depend   ,$Obj->Depend   );
    //self::Merge_Map($this->Set      ,$Obj->Set      );
    }
    
    Function AddTo(&$Items)
    {
      $Item=$this;
      ForEach($this->Alias As $Key=>$tmp)
        if(IsSet($Items[$Key]))
        {
          $Item=$Items[$Key];
          Break;
        }
      ForEach($this->Alias As $Key=>$tmp)
        $Items[$Key]=$Item;
    }
 
    Function Validate() // TODO:
    {
    }
    
    Function PropagateDepend($Items)
    {
      $Name=$this->Name;
      ForEach($this->Required As $Required=>$v)
        $Items[$Required]->Depend[$Name]=0;
    }
    
    Function Set($Set, $v)
    {
    //$this->Log('Debug', $this->Name, '=>', $v)
      $i=$Set->Value[$this->Name];
      if($i===$v)
        return;
      $this->_Set($Set, $v);
    }
   
    Function SetMin($Set, $v)
    {
      $i=$Set->Value[$this->Name];
      if($i>=$v)
        return;
      $this->_Set($Set, $v);
    }
   
    Function SetDepend($Set)
    {
      if(!$Set->Check($this->Required))
        return;
      $v=true; // TODO:
      $Set->Value[$this->Name]=$v;
      $Defines=$Set->Defines;
      ForEach($this->Depend As $k=>$v)
        $Defines->Get($k)->SetDepend($Set);
    }
   
    Function _Set($Set, $v)
    {
      $Set->Value[$this->Name]=$v;
      $Defines=$Set->Defines;
      ForEach($this->Parent As $k=>$v)
        $Defines->Get($k)->SetMin($Set, $v);
      ForEach($this->Required As $k=>$v)
        $Defines->Get($k)->SetMin($Set, $v);
      ForEach($this->Depend As $k=>$v)
        $Defines->Get($k)->SetDepend($Set);
    }
   
    Function Check($Res, $v)
    {
      if(!IsSet($Res[$this->Name]))
        $this->Log('Fatal', 'Config key ',$this->Name,' don`t find [',Count($Res),']')
          ('  Allowed keys [',Implode(', ', Array_Keys($Res)),']');
      $i=$Res[$this->Name];
      if($v===true) return $i!=0 && $i!==-1;
      if($v>0) return $i>= $v;
      if($v<0) return $i<=-$v;
      return $i===0 || $i===false;
    }
   
    //****************************************************************
    Private Static Function Set_Map_Info($This, &$Field, $Info, $Name)
    {
      if(!IsSet($Info[$Name]))
        return false;
    //$Value=$Info[$Name];
      return self::Set_Map($This, $Field, $Info[$Name]);
    }
    
    Private Static Function Set_Map($This, &$Field, $Value)
    {
      If(Is_String($Value))
      {
        $Field[$Value]=true;
        return true;
      }
      If(!Is_Array($Value))
      {
        $This->Log('Error', '12341252345');
        Return false;
      }
      ForEach($Value as $k=>$v)
      {
        if(Is_Int($k))
        {
          $k=$v;
          $v=true;
        }
        if(!Is_String($k))
        {
          $This->Log('Error', '98347593487');
          Continue;
        }
        if(IsSet($Field[$k]))
        {
          $This->Log('Error', '84857364875');
          Continue;
        }
        $Field[$k]=$v;
      }
    }
 
    Private Static Function Merge_Map(&$V1, $V2) { $V1=$V2+$V1; } //+++
  /*
    Private Static Function Set_Set_Info($This, &$Field, $Info, $Name)
    {
      if(!IsSet($Info[$Name]))
        return false;
      $Value=$Info[$Name];
      If(Is_String($Value))
        $Value=[$Value];
      If(!Is_Array($Value))
      {
        $This->Log('Error', '83459834857');
        return false;
      }
      Self::Merge_Set($Field, $Value);
      return true;
    }
    
    Private Static Function Merge_Set(&$V1, $V2) { $V1=Array_Keys(Array_Flip($V1)+Array_Flip($V2); } //+++
  */
  }
?>