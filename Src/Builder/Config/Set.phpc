<?
  $Loader->Parent_Class('/Object');
  
  class C_Builder_Config_Set extends C_Object
  {
    Var $Defines ;
    Var $Value   =[];
    
    Protected Function _Cloneable() { return true; }
    
    function _Init(Array $Args)
    {
      parent::_Init($Args);
      $this->Defines=$this->Get_Singleton('/Builder/Config/Defines');
    //$this->Defines=$this->Create_Object('/Builder/Config/Defines'); // TODO: Are you sure?
      if(IsSet($Args['Config'])) // TODO: Remove if
        $this->Set($Args['Config']);
    }
    
    Function Set($List)
    {
      $Res=&$this->Value;
      $Defines=$this->Defines;
      $Keys=$Defines->GetList();
      ForEach($Keys As $k=>$v)
        $Res[$v->Name]=false;
      $List=$Defines->ValidateSet($List);
      ForEach($List As $k=>$v)
        $Defines->Get($k)->Set($this, $v);
    }
    
    Function InlineCheck($List)
    {
      $Values=$this->Defines->ValidateSet($List);
      return $this->Check($Values);
    }
    
    Function Check($List)
    {
      $Res=&$this->Value;
      $Keys=$this->Defines->GetList();
      ForEach($List as $k=>$v)
      {
        if(!IsSet($Keys[$k]))
          $this->Log('Fatal', 'Config key ',$k,' not fonud [',Count($Res),']')
            ('  Allowed keys [',Implode(', ', Array_Keys($Keys)),']');
        if(!$Keys[$k]->Check($Res, $v))
          return false;
      }
      return true;
    }

    Function GetContextId()
    {
      $Res=[];
      ForEach($this->Value As $k=>$v)
        if($v)
          $Res[$k]=$v;
      return $Res;
    }
  }
?>