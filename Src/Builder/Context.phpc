<?
  $Loader->Parent_Class('/Object');
  
  class C_Builder_Context extends C_Object
  {
  //Var $Private =false;
  //Var $Debug   =false;
  //Var $Release =false;
  //Var $Static  =false;
  //Var $Full    =false;
    
    Var $Manager ;
  //Var $Modules ;
  
    Var $InitAssets    =[];
    Var $InitConfig    ;
    Var $Assets        =[]; // TODO: Remove, use T_Builder_Config
    Var $Config        ;
    Var $Configuration ='Release';
    Var $Platform      ='Win32';
    Var $ConfigMap     =[]; // TODO: Remove, use T_Builder_Config
    Var $SimpleName    ='Undefined'; // TODO: Remove, use T_Builder_Config
    
    Private $InitId ;
    Private $ContextId ; //< TODO: Remove?
    
    Private Function _GetContextId() //< TODO: Remove?
    {
      return [
        'Assets'        =>$this->InitAssets ,
        'Config'        =>$this->InitConfig->GetContextId(),
        'Configuration' =>$this->Configuration ,
        'Platform'      =>$this->Platform      ,
      ];
    }
 
    Private Function _GetInitId()
    {
      return [
        'Assets'        =>$this->InitAssets ,
        'Config'        =>$this->InitConfig->GetContextId(),
      ];
    }
 
    Function GetContextId() { return $this->ContextId; } //< TODO: Remove?
    Function GetInitId() { return $this->InitId; }
 
    Protected Function _Init(Array $Args)
    {
      parent::_Init($Args);
      $this->InitAssets=$Args['Assets']?? [];
      $this->Manager       =$Args['Manager'       ];
      $this->Configuration =$Args['Configuration' ]?? $this->Configuration ;
      $this->Platform      =$Args['Platform'      ]?? $this->Platform      ;
      
      $Cs=$this->Manager->Configurations;
      $Configuration =$Cs['Configuration' ][$this->Configuration ]; $this->Configuration =$Configuration ->Name;
      $Platform      =$Cs['Platform'      ][$this->Platform      ]; $this->Platform      =$Platform      ->Name;
      
      $Res=new T_Builder_Config();
      $Res->MergeLeft($Configuration, true)->MergeLeft($Platform, true)->MergeContext($this->InitAssets, $Args['Config']?? []);
    //$Res=(clone $Platform)->MergeWith($Configuration)->MergeContext($this->InitAssets, $Args['Config']?? []);
      if(false)
      {
        $ResDeb=(Array)$Res;
      //UnSet($ResDeb['VS'       ]);
        UnSet($ResDeb['Type'     ]);
        UnSet($ResDeb['Name'     ]);
        UnSet($ResDeb['Abstract' ]);
        UnSet($ResDeb['Hidden'   ]);
        UnSet($ResDeb['Depends'  ]);
        $this->Debug(['Context_Init('.$this->Configuration.','.$this->Platform.')'=>$ResDeb]);
      //$this->Debug(['Context_Init', 'Platform'=>$Platform, 'Configuration'=>$Configuration, 'Res'=>$Res]);
      }
      
      $this->ConfigMap  =$Res->ConfigMap ;
      $this->Assets     =$Res->Assets    ;
      $this->SimpleName =$Res->SimpleName;
      
    //$this->Modules=$Args['Modules'];
    //$this->Config=$this->Create_Object('/Builder/Config/Set', ['Config'=>$Args['Config']??[]]);
      $this->InitConfig=$this->Create_Object('/Builder/Config/Set', ['Config'=>$Args['Config']??[]]);
      $this->Config=$this->Create_Object('/Builder/Config/Set');
    # ForEach($Res->Config As $Config)
    #   $this->Config->Set($Config);
      $this->Config->Set($Res->Config);
    //$this->Debug(['Context_Init('.$this->Configuration.','.$this->Platform.').Debug'=>$this->Config->Value['Debug']]);
      $this->ContextId=$this->_GetContextId(); //< TODO: Remove?
      $this->InitId=$this->_GetInitId();
      
    # UnSet($Args['Manager']);
    # UnSet($Args['Outer']);
    # $this->Debug([
    #   'Args'=>$Args,
    #   'Config'=>$Res,
    # ]);
    }
    
    Function GetAssets() { return $this->Assets; }
    Function IsDebug() { return $this->Config->Value['Debug']; }
    Function IsStatic() { return $this->Config->Value['Static']; }
    
    Function Get_Context($Context)
    {
    //$this->Debug(['Get_Context', $Context, $this->ConfigMap]);
      if(!Is_Array($Context))
        $Context=$this->ConfigMap[$Context]?? $Context;
      if($Context===true)
        return $this;
      if($Context===false)
        return $this;
      
      if(Is_String($Context))
        $Context=[$Context];
      
      if(!Is_Array($Context))
        $this->Log('Error', 'Context is not Array=',$Context);
      
      $Context['Configuration' ]=$Context['Configuration' ]?? $Context[0]?? $this->Configuration ;
      $Context['Platform'      ]=$Context['Platform'      ]?? $Context[1]?? $this->Platform      ;
      return $this->Manager->Create_Context($Context);
    }
  }
?>